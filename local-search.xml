<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>浅谈微推，带你走进微推编辑的世界！</title>
    <link href="/2022/09/16/%E6%B5%85%E8%B0%88%E5%BE%AE%E6%8E%A8/"/>
    <url>/2022/09/16/%E6%B5%85%E8%B0%88%E5%BE%AE%E6%8E%A8/</url>
    
    <content type="html"><![CDATA[<p>在宣传部当了一年的打工人，记录一些经验以供参考。“道可道，非恒道”。知识与能力有限，恳请各位多多包涵。</p><span id="more"></span><h1 id="基本格式要求"><a href="#基本格式要求" class="headerlink" title="基本格式要求"></a>基本格式要求</h1><p>这个是我们 <a href="https://mp.weixin.qq.com/s/XmCRal9bIryb0p0vEkh_zA">电光火时</a> 的基础格式要求：</p><div class="note note-info">            <p><strong>基础字号：</strong>14<br><strong>字间距：</strong>2<br><strong>页边距：</strong>12<br><strong>加上固定的版头版尾</strong><br><strong>独立的图片，宽度要选90%</strong><br>大段段落两端对齐<br>标题与文字之间、图片上下、大段段落之间加一行空行<br>开头结尾居中，长短句错落有致，建议加分割线或者小图片与正文部分分割<br>设计颜色统一<br>图片多多</p>          </div><p>嘛，我们用的是 <a href="https://xiumi.us/#/">秀米</a> ，不得不说秀米操作挺容易上手的，对于我一个稍微了解一些Web和Office的人来说，可以直接使用。<br>为什么我要提一句Web呢？这个我们后面会讲……</p><h1 id="怎样高效率排版？"><a href="#怎样高效率排版？" class="headerlink" title="怎样高效率排版？"></a>怎样高效率排版？</h1><h2 id="一般做法"><a href="#一般做法" class="headerlink" title="一般做法"></a>一般做法</h2><p>一般来说，我收到的原稿都是这样的：<br>标题、开头结尾、正文以及图片已经准备好，现在你要做的是在秀米上把它们排出来，然后交给负责这个的副部去审核。副部审过了给部长，再给老师，最后往微信公众号上去发。<br>首先你要浏览一遍他们发给你的文档——毕竟你的副部应该也没有阅读过里面的内容——以便你熟悉你要排版的文章的基本结构。<br>通常，正文的格式是这样的……</p><div class="note note-primary">            <p><strong>标题</strong><br>一堆字，还有一些图，图片偶尔不够多<br><em>可能会有的过渡段</em><br><strong>标题</strong><br>一堆字，还有一些图，图片偶尔不够多<br><em>可能会有的过渡段</em><br>（重复上述结构……）</p>          </div><p>下面我们来看看那堆字里面，一些可能的情况</p><h3 id="具体内容分类"><a href="#具体内容分类" class="headerlink" title="具体内容分类"></a>具体内容分类</h3><h4 id="人物介绍"><a href="#人物介绍" class="headerlink" title="人物介绍"></a>人物介绍</h4><p><img src="/img/post/%E7%A7%80%E7%B1%B3%E4%BA%BA%E7%89%A9%E4%BB%8B%E7%BB%8D.jpg" alt="以我最近做的某篇微推为例……"><br>通常是由人物照片、姓名、班级、简介组成，我们可以在秀米上找到人物介绍相关的卡片，然后修改模板中的内容。</p><div class="note note-warning">            <p>人物介绍时应该让图片和介绍交错，比如上面的人物图片在左介绍在右，那么下面一个人的人物图片就要在右而介绍在左。<br>防止排版呆板，不够生动灵活</p>          </div><p>当然，也可以是这样的：<br><img src="/img/post/%E7%A7%80%E7%B1%B3%E4%BA%BA%E7%89%A9%E4%BB%8B%E7%BB%8D2.jpg" alt="以别人最近做的某篇微推为例……"><br>这篇微推是向新人们介绍他们的下班党员，如此排版会让人觉得亲近可爱。</p><div class="note note-warning">            <p>本身就很生动灵活了，不需要再去交错。</p>          </div><h4 id="分段阐述"><a href="#分段阐述" class="headerlink" title="分段阐述"></a>分段阐述</h4><p><img src="/img/post/%E5%88%86%E6%AE%B5%E9%98%90%E8%BF%B0.jpg" alt="还是以我最近做的某篇微推为例……"><br>比较好的格式是这样的</p><div class="note note-primary">            <p>1、标题<br>一张图片（或者两张图片并列、四张图片两两并列）<br>长段文字（标记重点）<br>一张图片（或者两张图片并列、四张图片两两并列）<br>长段文字（标记重点）</p>          </div><h4 id="感言"><a href="#感言" class="headerlink" title="感言"></a>感言</h4><p>这个比较灵活，可以根据你找到的合适的模板来，也可以魔改秀米给出的模板。<br>比较好的格式，像这样：</p><h4 id="个人专门介绍"><a href="#个人专门介绍" class="headerlink" title="个人专门介绍"></a>个人专门介绍</h4><p><img src="/img/post/%E4%B8%AA%E4%BA%BA%E4%B8%93%E9%97%A8%E4%BB%8B%E7%BB%8D.jpg" alt="以一位朋友为例……"><br>可能涉及ta的任职经历、获奖经历等等，这些要注意左端对齐，一行一条，最好不要超行<br>由于设备不同，不同手机的阅读效果可能不尽相同，有的手机上难免会出现超行换行的情况</p><h3 id="处理两图并列"><a href="#处理两图并列" class="headerlink" title="处理两图并列"></a>处理两图并列</h3><p>在<code>布局-&gt;基础布局</code>里找到第二个布局（名为”二列布局“），把它拖到编辑器里去<br>然后双击其中一栏，在图库里点一下你想用的图片<br>记得调整一下图片的宽度，我的推荐是每个图片95%</p><h2 id="排版秘诀"><a href="#排版秘诀" class="headerlink" title="排版秘诀"></a>排版秘诀</h2><p>先抛出一个问题：<strong>秀米给出的主题不好用，怎么办？</strong><br>自己调！<br>那要是不知道怎么调呢？<br>别急，我有一个简单朴素却又异常好用的方法！</p><div class="note note-primary">            <p>图片圆角+卡片圆角+文字标重点+合理配色</p>          </div><p>图片圆角和卡片圆角，仅我一家会用，现在他们都还以为是我用了某些特殊的主题:)<br>比如在Web里，我们就经常用到圆角，微信推送不就是网页么，顺藤摸瓜，我们会发现秀米在这里也为圆角做了设计。<br>其他人到是用过圆角图片，他的做法是：收藏我的排版里的圆角图片，放进自己的微推里，然后修改图片<br>但是他不会调整圆角半径:)<br>原理很简单：点击已经插入了的图片，在上方图片编辑栏里找到“边框”并点击，然后修改弧度的值。<br><img src="/img/post/%E7%A7%80%E7%B1%B3%E5%9C%86%E8%A7%92%E5%9B%BE%E7%89%87.jpg" alt="真的很简单"><br>独立大图片（如图所示的就是所谓“独立大图片”）我通常使用12<del>16px，两图并列通常用8</del>12px，卡片内部的独立大图用12px，并列良图用8px。<br>“大图片”的弧度 &gt; 两图并列的每一个图片自己的弧度<br>独立大图片宽度用90%，两图并列的每个图片宽度用95%</p><div class="note note-warning">            <p>通篇下来，圆角要保持一致，比如所有的独立大图片都应该是16px，不能有的是16px有的是12px，包括卡片等等，其它的同理。<br>如果你的卡片或者卡片里的图片用了圆角，或者是某些独立大图片用了圆角，那么其它的东西（卡片、卡片内图片、独立大图片等）最好也应该设置圆角。</p>          </div><h1 id="写原创微推"><a href="#写原创微推" class="headerlink" title="写原创微推"></a>写原创微推</h1><p>咕咕咕……改天再写啦……<br>哈哈，开个玩笑别当真φ(&gt;ω&lt;*)<br>难在选题，这个我也不好说，看灵感，看素材<br>写出整篇来是第二个难题，不过，大不了你可以写一些“大白话”作为补充<br>开头结尾，我总是希望自己写的高端一些。普通的也没问题。</p>]]></content>
    
    
    
    <tags>
      
      <tag>杂谈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dosbox下使用debug</title>
    <link href="/2022/04/03/dosbox%E4%B8%8B%E4%BD%BF%E7%94%A8debug/"/>
    <url>/2022/04/03/dosbox%E4%B8%8B%E4%BD%BF%E7%94%A8debug/</url>
    
    <content type="html"><![CDATA[<p>debug是DOS环境下调试程序的得力助手。</p><span id="more"></span><h1 id="进入debug"><a href="#进入debug" class="headerlink" title="进入debug"></a>进入debug</h1><p>首先<code>mount C 路径</code>然后<code>C:</code>在DOSBOX中设定并选择C盘作为路径</p><p><img src="https://s2.loli.net/2022/04/03/efKzjOXPS9VYwxc.png" alt="设定C盘.png"></p><p>然后输入<code>debug</code>并敲回车，就可以进入debug程序。这样启动的debug程序只是能对整个内存空间进行操作，并不会载入我们想要调试的程序。</p><p>当然，也可以<code>debug 需要调试的程序的路径</code>来调试程序</p><p><img src="https://s2.loli.net/2022/04/03/VEoYeXbnqSg3GdL.png" alt="debug调试程序.png"></p><h1 id="开始用指令调试程序"><a href="#开始用指令调试程序" class="headerlink" title="开始用指令调试程序"></a>开始用指令调试程序</h1><p>在debug里，指令不区分大小写，debug的命令只有一个字母，后面的其他值可以加空格也可以不加空格。</p><p>比如<code>rax</code>和<code>r ax</code>等价</p><p>在写的时候发现了一篇讲得很详细的文章<a href="https://blog.csdn.net/never_late/article/details/111193302">https://blog.csdn.net/never_late&#x2F;article&#x2F;details&#x2F;111193302</a>，，，</p><h2 id="r命令"><a href="#r命令" class="headerlink" title="r命令"></a>r命令</h2><p><strong>直接输入：</strong>查看寄存器的值和当前cs:ip所指向的内存处的指令。</p><p><img src="https://s2.loli.net/2022/04/03/fKeqVjl8U9FCX6m.png" alt="r命令.png"></p><p><strong>r+寄存器名：</strong>查询并编辑寄存器的值</p><p>比如输入rax并回车后，首先会显示ax的取值，接着需要你输入一个小于等于4位的十六进制数字并按回车，修改ax的值。如果不想改变其值，直接按下回车即可。</p><p><img src="https://s2.loli.net/2022/04/03/T1PaY2xGK7p4gE8.png" alt="rax并修改值.png"></p><h2 id="u命令"><a href="#u命令" class="headerlink" title="u命令"></a>u命令</h2><p><strong>直接输入：</strong>查看cs:ip处的一段反汇编代码</p><p><img src="https://s2.loli.net/2022/04/03/nM2dPVL5K7OCgQA.png" alt="u命令直接输入.png"></p><p><strong>u+偏移地址&#x2F;段地址:偏移地址：</strong>查看目标地址处的一段反汇编代码。如果只写偏移地址，就会显示cs:偏移地址处的一段反汇编代码</p><p><img src="https://s2.loli.net/2022/04/03/euMyNtbQTsi7hIX.png" alt="u命令.png"></p><h2 id="t命令"><a href="#t命令" class="headerlink" title="t命令"></a>t命令</h2><p><strong>直接输入：</strong>执行一行代码（汇编代码），相当于高级语言调试里的逐语句、单步跟踪</p><p><strong>t+数字：</strong>执行若干行代码，行数取决于你的输入</p><p>当然了，使用t命令会使寄存器ip的值的变化</p><h2 id="d命令"><a href="#d命令" class="headerlink" title="d命令"></a>d命令</h2><p><strong>直接输入：</strong>从ds:0开始显示内存中的数据。会在右侧显示程序对应的ASCII值，如果对应的字符无法显示则显示<code>.</code></p><p>多次使用d命令，可以改变查看的内存的偏移地址，以查看后面的数据</p><p><strong>d+数字：</strong>从当前偏移地址+数字的位置开始向后显示内存中的数据</p><p><strong>d+起始地址：</strong>显然，很自然，不难得到，略。</p><p><strong>d+起始地址 终止地址：</strong>显然，很自然，不难得到，略。</p><p><strong>d+起始地址 长度：</strong>显然，很自然，不难得到，略。</p><p><img src="https://s2.loli.net/2022/04/03/ndT5pzN8uUtViF6.png" alt="d命令.png"></p><h2 id="a命令"><a href="#a命令" class="headerlink" title="a命令"></a>a命令</h2><p><strong>直接输入：</strong>编辑cs:ip处的代码</p><p><strong>a+偏移地址&#x2F;段地址:偏移地址</strong>：修改制定位置处的代码。</p><p>就是在对应的地址上边写汇编，并且只能使用十六进制的数字。按下回车后你的汇编指令会被直接翻译成二进制并放到相应的位置上去。什么也不输入按下回车才会结束编辑。</p><h2 id="e命令"><a href="#e命令" class="headerlink" title="e命令"></a>e命令</h2><p>与a类似，直接修改内存中的数值。</p><h2 id="g命令"><a href="#g命令" class="headerlink" title="g命令"></a>g命令</h2><p>Go！</p><p>执行程序</p><p>可以设置断点：<code>g=地址</code>，将在指定地址处触发断点</p><h2 id="f命令"><a href="#f命令" class="headerlink" title="f命令"></a>f命令</h2><p>fill.</p><p>使用指定的值覆盖制定位置中的值</p><p>f+范围+填充列表</p><p><img src="https://s2.loli.net/2022/04/03/M6Yn1EpLPXBvrcH.png" alt="f命令.png"></p><h2 id="q命令"><a href="#q命令" class="headerlink" title="q命令"></a>q命令</h2><p>退出debug</p><h1 id="咕咕咕……"><a href="#咕咕咕……" class="headerlink" title="咕咕咕……"></a>咕咕咕……</h1><p>鸽了鸽了</p>]]></content>
    
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>汇编</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>草记 | 创新创业大赛专家指导会</title>
    <link href="/2022/03/29/%E8%8D%89%E8%AE%B0-%E5%88%9B%E6%96%B0%E5%88%9B%E4%B8%9A%E5%A4%A7%E8%B5%9B%E4%B8%93%E5%AE%B6%E6%8C%87%E5%AF%BC%E4%BC%9A/"/>
    <url>/2022/03/29/%E8%8D%89%E8%AE%B0-%E5%88%9B%E6%96%B0%E5%88%9B%E4%B8%9A%E5%A4%A7%E8%B5%9B%E4%B8%93%E5%AE%B6%E6%8C%87%E5%AF%BC%E4%BC%9A/</url>
    
    <content type="html"><![CDATA[<p>跟着他说的大概记了一些</p><hr><blockquote><p>创造是最重要的</p></blockquote><p>四个关键字：创新、创业、创意、创造</p><p>四创的融合</p><p>可以延续上一届学长留下来的成果“一直传承下来”</p><p>可以用别人的软件等</p><p>但是<em>互联网+大赛</em>更加看重自己的创意创造。（已经创立的公司可以进行授权）</p><br/><p><img src="https://s2.loli.net/2022/03/29/rP7KJfgZBGw59Lo.png" alt="这里是截图..."></p><p><img src="https://s2.loli.net/2022/03/29/cBXKG1YqvFhoM7N.png" alt="这里还是截图..."></p><br/><p><strong>会查重</strong>，要注意查重率</p><p>维普查重</p><br/><p>创青春 - 国赛直通车：特别优质的项目可以通过这个，（八项活动都参加，取得较好成绩）</p><p>细节：“你自己去看”</p><br/><p>评审项目的人：</p><p>更多是企业的人、政府（例如环保类）、行业领军人物（马化腾、乡村振兴的人）</p><br/><blockquote><p>站在社会的视角去看项目能不能行得通</p></blockquote><br/><p>不能<strong>侵犯</strong>他人知识产权，不得<strong>借用</strong>他人项目参赛</p><p>授权方法：写一个授权书；找一个第三方的证明（比如找长理背书）</p><blockquote><p>剽窃盗用 -&gt; 取消资格</p></blockquote><p>已经获奖的不能再次报名</p><p>比如关注营业执照的<strong>法人</strong>是否符合相关要求</p><p>在报名时要递交所有关于具有法律效益的软件权利的<br>法人代表的签字和公司的授权<br>个人专利也要授权</p><p>已经工商注册的公司，单位概况等需要递交</p><p>营业执照复印件、税务登记证、股权结构balabala……</p><p>企查查、天眼查</p><br/><hr><br/><p>注意一些说法是否符合当下的说法</p><blockquote><p>脱贫攻坚 -&gt; 巩固脱贫成果</p></blockquote><br/><p>区域合作、文创项目</p><p>湖南省<strong>三高四新战略</strong></p><p>做项目的时候<strong>一定要把三高四新战略加进去</strong></p><p>稍微老一点的：<strong>长株潭一体化</strong></p><br/><p>指导老师&lt;&#x3D;3，团队人数&lt;&#x3D;10</p><p>跨校组队：例如找湖大，报同一个项目时确定是谁去报</p><p>去找不同专业不同学院的人（否则是致命一击）</p><p><strong>一定要有懂得营销的学生</strong></p><p><strong>一定要有懂得营销的学生</strong></p><p><strong>一定要有懂得营销的学生</strong></p><br/><p>已经注册的公司参赛会有优势</p><p>但是要是项目的法人代表最好。</p><br/><p>不是文字越多越好，不可以太多，要精简，比如项目概况可以一页弄完</p><p>关注商业策划书的逻辑，比如背景-&gt;做了什么-&gt;产品是什么-&gt;服务-&gt;……</p><br/><p>评委不关心产品用什么设备生产，只关注产品如何生产</p><p>没有卖，就预测一下销售情况</p><p>发现是假的，就会扣分</p><p>要分析就具体地写一些内容</p><br/><p>社会实践性</p><p>注重时间、过程材料的收集</p><p>综合图标指引，使得评委知道研发了什么</p><br/><p>长理的许多项目不乏技术，但是缺乏商业的</p><p>“投资圈”APP</p><p><a href="http://www.xytzq.cn/">www.xytzq.cn</a></p><br/><h1 id="PPT"><a href="#PPT" class="headerlink" title="PPT"></a>PPT</h1><p>20页以内</p><br/><p>不要太过于对宏观、大行业的分析、痛点，可以选择简述</p><br/><p>PPT要专业，不要搞太多文字</p><br/><h1 id="技术研发"><a href="#技术研发" class="headerlink" title="技术研发"></a>技术研发</h1><p><strong>创新</strong>、<strong>创新</strong>、<strong>创新</strong>！</p><p><strong>创新</strong>、<strong>创新</strong>、<strong>创新</strong>！</p><p><strong>创新</strong>、<strong>创新</strong>、<strong>创新</strong>！</p><p>先总后细，先讲大的产品，再讲细的</p><p>项目类核心技术的描述、同类产品的对比</p><p>没有核心技术：商业模式（比如茶颜悦色，他们的文创、销售模式、服务方式，虽然没有核心技术但是商业模式好）</p><br/><h1 id="文档结构"><a href="#文档结构" class="headerlink" title="文档结构"></a>文档结构</h1><ol><li>项目简介</li><li>痛点分析</li><li>团队事件过程材料</li><li>技术研发产品</li><li>团队介绍，如何协作</li><li>财务分析、成本、利润预测、可预测的收入</li><li>社会价值社会依依</li><li>未来展望</li><li>附件</li></ol><p><strong>讲清楚营销手段到底怎么做</strong></p><p>营销很重要</p><p>要有口号</p>]]></content>
    
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>人力资源机器1-6满星攻略</title>
    <link href="/2022/02/09/%E4%BA%BA%E5%8A%9B%E8%B5%84%E6%BA%90%E6%9C%BA%E5%99%A81-6%E6%BB%A1%E6%98%9F%E6%94%BB%E7%95%A5/"/>
    <url>/2022/02/09/%E4%BA%BA%E5%8A%9B%E8%B5%84%E6%BA%90%E6%9C%BA%E5%99%A81-6%E6%BB%A1%E6%98%9F%E6%94%BB%E7%95%A5/</url>
    
    <content type="html"><![CDATA[<p>《人力资源机器》（原名：<em>Human Resource Machine</em>，又译：<em>程序员升职记</em>）这款游戏，所使用的游戏规则接近于计算机的汇编，可视化了底层代码，去其繁，益其乐。无论是入坑编程还是初试算法思想都是非常好的选择。当然，仅仅是作为一款益智游戏也是蛮不错的。从一名基层员工，一步一步从基层爬上巅峰，是不是特别地有意思？</p><span id="more"></span><h1 id="简单地介绍一下"><a href="#简单地介绍一下" class="headerlink" title="简单地介绍一下"></a>简单地介绍一下</h1><p>在HRM里，你将会扮演<span title="实际上，我也不太清楚是不是叫这个名字">Human Resource Machine公司</span>的一名职员，从基层开始锻炼，一步一步走上职场巅峰（然后被解雇？）。将命令合理地组合，处理上司给你的数据然后输出正确的结果，从而通关，让电梯上升一层。在通关的同时也会有一些剧情（对，HRM这小游戏有一点剧情）。</p><h2 id="玩法"><a href="#玩法" class="headerlink" title="玩法"></a>玩法</h2><p><img src="https://s2.loli.net/2022/02/09/3crykzHmIqLCPeV.png" alt="HRM，操作界面.png"></p><p>游戏的场景在一间办公室里，最左侧是输入（INBOX），右边是输出（OUTBOX），中间是地砖（相当于寄存器&#x2F;RAM），你需要在界面最右侧的指令栏里，通过点击+拖拽组合你的指令，然后点击界面下方的“运行”（上司打断道：听清楚，这叫播放！），你所扮演的员工将会按照程序完成任务。随着剧情的推进，办公室里的场景也有一些细节上的变化，它们正等待着你的仔细观察。</p><p><strong>通关方法：</strong>只需要输出结果正确即可通关。当然了，你需要编写合适的程序从而保障任务得以顺利完成，并且上司会暗中拿同样类型但是不同的输入数据去监测你的程序，一旦不能通过某组测试数据，我们也是无法通关的。</p><p><strong>强迫症诊断标准：</strong>游戏里还有挑战内容，通过较少的步数，使用更少的指令完成任务，可以分别获得一星的奖励。当然，有些任务可能无法一箭双雕，需要通过不同代码分别获得两颗星的奖励。</p><p><strong>便捷操作：</strong>游戏提供了撤销、复制、粘贴、清除等功能，并且你还能在你的代码和地砖上写注释！真的是非常贴心。</p><p><img src="https://s2.loli.net/2022/02/09/i93wDePZjqlxWA6.png" alt="HRM，电梯.png"></p><p><strong>电梯：</strong>不完成前一层的任务，就无法进入下一层，或者是获得别的分支。就像生活一样，不克服困难，怎能进入下一个阶段？</p><h2 id="指令都有哪些？"><a href="#指令都有哪些？" class="headerlink" title="指令都有哪些？"></a>指令都有哪些？</h2><p>我们会在指令首次出现的层里一一介绍。</p><h2 id="我的体验"><a href="#我的体验" class="headerlink" title="我的体验"></a>我的体验</h2><p>与编程不同的是，在HRM里没有常量，包括每一层地砖上自带的数字，你可以随意使用和修改。加减乘除，各种运算，也比以往有了更加灵活的处理方式，在多次尝试（或者查攻略）之后你会发现那种处理方式到底有多么令人称赞。</p><p>花了很久的时间一点一点改进，一点一点优化，终于拿了HRM的全部满星。怎能不写一篇攻略来庆祝一下？</p><p><img src="https://s2.loli.net/2022/02/09/Zkdrq94soOLbJl5.jpg" alt="QQ图片20220201000008.jpg"></p><h1 id="攻略"><a href="#攻略" class="headerlink" title="攻略"></a>攻略</h1><p>HRM的输入和输出的数量是确定的。也就是说，你可以连续写<code>inbox</code>和<code>outbox</code>若干次，从而完成任务。</p><p>在我写的攻略系列中，你可能会看到的代码有以下几种类型：</p><ul><li>最朴素的解法：暴力代码</li><li>同时满星的代码：AK代码</li><li>步数超了，但是指令条数达成目标的代码：TLE代码</li><li>指令条数超了，但是步数没超的代码：MLE代码</li></ul><h2 id="一些基本的要素"><a href="#一些基本的要素" class="headerlink" title="一些基本的要素"></a>一些基本的要素</h2><p>所有的东西都可以与游戏画面一一对应。当你不理解攻略中的某些操作的时候，再来看看这里会比较好。</p><ul><li><code>手</code>：<del>就是手</del>员工的手，手上可能拿着一样东西，从而让这样东西参与到程序中来；也可能空手。简言之：可拿可不拿，只能拿一样东西，拿新的东西会替换掉旧的东西。据说，这是比Minecraft的史蒂夫的麒麟臂更强的手，它可以在短时间内拿起任何东西，也可以抛出手上的任何东西，然后把它们摔碎！（误）每当你拿取新的东西时，手上原有的东西就会被员工抛出，然后在地上摔碎。当然了，如果此前你手上没有东西，那么显然员工只会把新的东西好好地放在手上。</li><li><code>inbox</code>：<code>inbox</code>就是界面左边的传送带。传送带上有一些<code>物品</code>，<code>物品</code>可能是数字，也可能是单个的字符。你可以每次从<code>inbox</code>内拿出一件物品，然后放在手上。如果此前手上已经有了东西，那么新拿的东西会替换掉旧的东西</li><li><code>outbox</code>：<code>outbox</code>就是界面右边的传送带，你将把手上的物品放上去。当然，员工空手时是不能向传送带放东西的，把物品放上去之后，员工的手就空了。</li><li><code>地砖</code>：地砖就是画面中间的那些方格，每个方格都有唯一的一个数字编号（即地址），你可以通过地址来访问它们。地砖相当于寄存器或者是ROM，它们都能存放唯一的物品。你可以从地砖上复制一份物品，也可以用手上的物品去替换它原有的内容。</li></ul><h2 id="电梯1层-收发室"><a href="#电梯1层-收发室" class="headerlink" title="电梯1层-收发室"></a>电梯1层-收发室</h2><h3 id="新指令！"><a href="#新指令！" class="headerlink" title="新指令！"></a>新指令！</h3><p><code>→inbox</code>：从<code>inbox</code>里面拿出一件<code>物品</code>，放在<code>手</code>上。我们也简称这条指令为<code>inbox</code>。</p><p><code>outbox→</code>：把你手上的东西放进<code>outbox</code>里。同样地，简称这条指令为<code>outbox</code>。</p><h3 id="思路是……"><a href="#思路是……" class="headerlink" title="思路是……"></a>思路是……</h3><p>解：略，请读者自证（手动滑稽）</p><p><strong>AK代码：</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-comment">-- HUMAN RESOURCE MACHINE PROGRAM --</span><br><br>    INBOX   <br>    OUTBOX  <br>    INBOX   <br>    OUTBOX  <br>    INBOX   <br>    OUTBOX  <br><br></code></pre></td></tr></table></figure><h2 id="电梯2层-繁忙的收发室"><a href="#电梯2层-繁忙的收发室" class="headerlink" title="电梯2层-繁忙的收发室"></a>电梯2层-繁忙的收发室</h2><h3 id="新指令！-1"><a href="#新指令！-1" class="headerlink" title="新指令！"></a>新指令！</h3><p><code>jump</code>：当程序运行遇到到<code>jump</code>时，程序就会跳转到箭头所指位置，然后继续执行后面的命令。运用<code>jump</code>，我们可以实现跳转，也可以实现复读机一样的循环。</p><h3 id="思路是……-1"><a href="#思路是……-1" class="headerlink" title="思路是……"></a>思路是……</h3><p>这关告诉了我们如何使用<code>jump</code>创建一个循环，就是跑到前边去，把自己以前执行过的命令再执行一遍。这关有两种思路，一种是直接反复使用INBOX和OUTBOX打暴力；另一种，也是最一般的思路，就是把一对<code>inbox</code>和<code>outbox</code>放在循环里</p><p><strong>TLE代码：</strong></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-comment">-- HUMAN RESOURCE MACHINE PROGRAM --</span><br><br><span class="hljs-keyword">a</span>:<br>    INBOX   <br>    OUTBOX  <br>    JUMP     <span class="hljs-keyword">a</span><br><br></code></pre></td></tr></table></figure><p>MLE代码是想告诉我们，在这个游戏机制之下，想要获得满星，有可能要写非常复杂的代码。这个思想在后面会发挥很大的作用。<strong>MLE代码：</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-comment">-- HUMAN RESOURCE MACHINE PROGRAM --</span><br><br>    INBOX   <br>    OUTBOX  <br>    INBOX   <br>    OUTBOX  <br>    INBOX   <br>    OUTBOX  <br>    INBOX   <br>    OUTBOX  <br>    INBOX   <br>    OUTBOX  <br>    INBOX   <br>    OUTBOX  <br>    INBOX   <br>    OUTBOX  <br>    INBOX   <br>    OUTBOX  <br>    INBOX   <br>    OUTBOX  <br>    INBOX   <br>    OUTBOX  <br>    INBOX   <br>    OUTBOX  <br>    INBOX   <br>    OUTBOX  <br>    INBOX   <br>    OUTBOX  <br><br></code></pre></td></tr></table></figure><h2 id="电梯3层-复印楼层"><a href="#电梯3层-复印楼层" class="headerlink" title="电梯3层-复印楼层"></a>电梯3层-复印楼层</h2><h3 id="新指令！-2"><a href="#新指令！-2" class="headerlink" title="新指令！"></a>新指令！</h3><p><code>copyfrom</code>：将地砖上的物品复制到你的手上。使用它会替换你手上原有的内容。</p><h3 id="思路是……-2"><a href="#思路是……-2" class="headerlink" title="思路是……"></a>思路是……</h3><p>这层就是要教给我们怎么使用<code>copyfrom</code>。而且要我们直接输出”BUG“，非常好玩儿。</p><p>思路：分别直接复制B、U、G，复制完成后就直接输出就好。</p><p><strong>AK代码：</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-comment">-- HUMAN RESOURCE MACHINE PROGRAM --</span><br><br>    COPYFROM <span class="hljs-number">4</span><br>    OUTBOX  <br>    COPYFROM <span class="hljs-number">0</span><br>    OUTBOX  <br>    COPYFROM <span class="hljs-number">3</span><br>    OUTBOX  <br><br></code></pre></td></tr></table></figure><h2 id="电梯4层-解扰码器"><a href="#电梯4层-解扰码器" class="headerlink" title="电梯4层-解扰码器"></a>电梯4层-解扰码器</h2><h3 id="新指令！-3"><a href="#新指令！-3" class="headerlink" title="新指令！"></a>新指令！</h3><p><code>copyto</code>：既然能<code>copyfrom</code>，那么反过来就能<code>copyto</code>。顾名思义，把手上的内容复制到地砖上。使用它会替换地砖原有的内容。</p><h3 id="思路是……-3"><a href="#思路是……-3" class="headerlink" title="思路是……"></a>思路是……</h3><p>告诉我们如何使用<code>copyto</code>。</p><p>AK代码的思路是，如果输入的两个东西分别是甲、乙，那么输出的时候就是乙、甲。先取一个输出，然后记录一下（<code>copyto</code>到地砖上），再取第二个输入，直接把第二个输出出去，然后再把第一个拿起来（<code>copyfrom</code>），输出出去。</p><p><strong>AK代码：</strong></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-comment">-- HUMAN RESOURCE MACHINE PROGRAM --</span><br><br><span class="hljs-keyword">a</span>:<br>    INBOX   <br>    COPYTO   <span class="hljs-number">0</span><br>    INBOX   <br>    OUTBOX  <br>    COPYFROM <span class="hljs-number">0</span><br>    OUTBOX  <br>    JUMP     <span class="hljs-keyword">a</span><br><br></code></pre></td></tr></table></figure><h2 id="电梯5层-咖啡时间"><a href="#电梯5层-咖啡时间" class="headerlink" title="电梯5层-咖啡时间"></a>电梯5层-咖啡时间</h2><p>剧情关，没有任务，以后会把剧情放在一块儿写。</p><h2 id="电梯6层-多雨之夏"><a href="#电梯6层-多雨之夏" class="headerlink" title="电梯6层-多雨之夏"></a>电梯6层-多雨之夏</h2><h3 id="新指令！-4"><a href="#新指令！-4" class="headerlink" title="新指令！"></a>新指令！</h3><p><code>add</code>：无论你拿着什么值，都会讲地砖上制定地砖的内容加上你手中的值，结果再返回到你的手中。</p><h3 id="思路是……-4"><a href="#思路是……-4" class="headerlink" title="思路是……"></a>思路是……</h3><p>幼儿园级别的题</p><p><strong>AK代码：</strong></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-comment">-- HUMAN RESOURCE MACHINE PROGRAM --</span><br><br><span class="hljs-keyword">a</span>:<br>    INBOX   <br>    COPYTO   <span class="hljs-number">0</span><br>    INBOX   <br>    ADD      <span class="hljs-number">0</span><br>    OUTBOX  <br>    JUMP     <span class="hljs-keyword">a</span><br><br></code></pre></td></tr></table></figure><h1 id="勘误"><a href="#勘误" class="headerlink" title="勘误"></a>勘误</h1><p>等我把Github Commits弄好就好了</p>]]></content>
    
    
    <categories>
      
      <category>游戏攻略</category>
      
    </categories>
    
    
    <tags>
      
      <tag>游戏</tag>
      
      <tag>游戏攻略</tag>
      
      <tag>人力资源机器</tag>
      
      <tag>HRM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jsoncpp的安装与使用</title>
    <link href="/2022/02/02/jsoncpp%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/02/02/jsoncpp%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>一个小工程需要在C++中使用json，于是我找到了库jsoncpp。第一次在Visual Studio中安装和使用jsoncpp库的时踩了一些坑，花了半天的时间解决了问题。写一篇博客来分享jsoncpp的安装与使用方法。</p><span id="more"></span><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="写在开始之前"><a href="#写在开始之前" class="headerlink" title="写在开始之前"></a>写在开始之前</h2><p>我的jsoncpp库的版本：jsoncpp-1.8.4</p><p>示例项目的名称：jsontest</p><p>路径：D:\proj\jsoncppTEST\</p><h2 id="必看！必看！必看！"><a href="#必看！必看！必看！" class="headerlink" title="必看！必看！必看！"></a>必看！必看！必看！</h2><p>安装过程中将会用到<a href="https://git-scm.com/downloads">git bash</a></p><p>在安装jsoncpp之前，确保你的Visual Studio安装了<em>英文语言包</em>，否则最后一步将会无法执行。如果没有安装英文语言包，请在<em>Visual Studio修改程序</em>（在<em>程序和功能</em>里面找）里面添加这个语言包。</p><p>直接在github上下载jsoncpp，然后想百(CS)度(DN)上说的那样去做是没法成功的。</p><p>那么百(CS)度(DN)上怎么说的？</p><blockquote><p>首先下载jsoncpp这个库</p><p>打开jsoncpp\makefiles\vs71\jsoncpp.sln，然后编译以生成json_vc71_libmtd.lib（工程把json_vc71_libmtd.lib生成到了jsoncpp\build\vs71\debug\lib_json下）</p><p>然后把jsoncpp\include\json\下的文件以及json_vc71_libmtd.lib复制到工程目录下</p><p>把这些文件添加到工程中，并且修改项目属性，修改方法为balabalabalabala…</p><p>然后就大功告成</p></blockquote><p>如果这样做，那么恭喜你，VS会亲切地告诉你：</p><p><img src="https://s2.loli.net/2022/02/02/irdQqgKj4zsP1yV.png" alt="jsoncpp的安装与使用-亲切地告诉你.png"></p><p>（当然这里使用的是另一个项目）</p><h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><p>根据<a href="https://github.com/open-source-parsers/jsoncpp">github上的jsoncpp库</a>的官方说明文档<a href="https://github.com/open-source-parsers/jsoncpp/blob/master/README.md">README.md</a>，首先我们打开（或者新建一个）VS项目，然后<em>在终端打开</em></p><p><img src="https://s2.loli.net/2022/02/02/GaryAnkw5xz3vZg.png" alt="jsoncpp的安装与使用-在终端打开.png"></p><p>接着我们会发现左下角多了一个选项卡：开发者PowerShell</p><p><img src="https://s2.loli.net/2022/02/02/aDQrg6OTIWxVzmX.png" alt="jsoncpp的安装与使用-开发者PowerShell.png"></p><p>现在我们在Powershell里面依次执行以下命令（一条一条复制上去然后一条一条运行）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/Microsoft/vcpkg.git<br><span class="hljs-built_in">cd</span> vcpkg<br>./bootstrap-vcpkg.sh<br>./vcpkg integrate install<br>./vcpkg install jsoncpp<br></code></pre></td></tr></table></figure><p>这里再写一遍：如果你的Visual Studio没有安装<em>英文语言包</em>，那么请在<em>Visual Studio修改程序</em>（在<em>程序和功能</em>里面找）里面添加这个语言包。</p><p>这样就可以了，是不是很简单啊（不枉费我半天时间）</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="关于json"><a href="#关于json" class="headerlink" title="关于json"></a>关于json</h2><p>json诞生自js，因为二者十分相似，所以相互支持起来非常方便。不过我们在C++中也需要使用json，所以又有大佬专门为C++开发了jsoncpp</p><h3 id="json的食用方法"><a href="#json的食用方法" class="headerlink" title="json的食用方法"></a>json的食用方法</h3><p>json中仅支持两种结构</p><ul><li>name-&gt;value，键值对（pair）的集合，一般称为对象(object)</li><li>值的有序表，一般称为数组(array)</li></ul><h4 id="键值对pair"><a href="#键值对pair" class="headerlink" title="键值对pair"></a>键值对pair</h4><p>一个pair的结构通常是：<code>string : value</code>，pair的对应关系用<code>:</code>表示，左边的为name，右边的是其对应的值value</p><p>一般key使用字符串。也可以使用数字，但是不推荐</p><p>value可以是json支持的任何类型，如object、array、string、number、true&#x2F;false，null</p><h4 id="对象object"><a href="#对象object" class="headerlink" title="对象object"></a>对象object</h4><p>object可以认为是多个pair的集合，其语法为</p><ul><li>以<code>&#123;</code>作为object起始</li><li>以<code>&#125;</code>作为object结束</li><li>不同pair之间使用<code>,</code>分割</li></ul><p>object中存储的数据是无序的</p><p>例如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;jensentsts&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;score&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">114514</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="数组array"><a href="#数组array" class="headerlink" title="数组array"></a>数组array</h4><p>array是value的有序集合，其语法为</p><ul><li>以<code>[</code>作为array起始</li><li>以<code>]</code>作为array结束</li><li>不同array元素之间使用<code>,</code>分割</li></ul><p>建议在array中使用统一的类型，否则解析起来比较麻烦</p><p>例如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;jensentsts&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;score&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">114514</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;LiHua&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;score&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">-1</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>当然这样写也是合法的：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;jensentsts&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">233</span><span class="hljs-punctuation">,</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;year&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1919810</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>与C++一样，使用<code>//</code>或者是<code>/*</code>与<code>*/</code>来写注释</p><p>例如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// 衬衫的价格为</span><br><span class="hljs-comment">/* 9镑15便士 */</span><br></code></pre></td></tr></table></figure><h3 id="全部加起来，结果写出来"><a href="#全部加起来，结果写出来" class="headerlink" title="全部加起来，结果写出来"></a>全部加起来，结果写出来</h3><p>例如（这是我的VS Code配置）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// https://code.visualstudio.com/docs/cpp/launch-json-reference</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.2.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;configurations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;(gdb) Launch&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 配置名称，将会在启动配置的下拉菜单中显示</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cppdbg&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 配置类型，对于C/C++可认为此处只能是cppdbg，由cpptools提供；不同编程语言不同</span><br>        <span class="hljs-attr">&quot;request&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;launch&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 可以为launch（启动）或attach（附加）</span><br>        <span class="hljs-attr">&quot;program&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 将要进行调试的程序的路径</span><br>        <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 程序调试时传递给程序的命令行参数，一般设为空</span><br>        <span class="hljs-attr">&quot;stopAtEntry&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 设为true时程序将暂停在程序入口处，相当于在main上打断点</span><br>        <span class="hljs-attr">&quot;cwd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 调试程序时的工作目录，此为工作区文件夹；改成$&#123;fileDirname&#125;可变为文件所在目录</span><br>        <span class="hljs-attr">&quot;environment&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 环境变量</span><br>        <span class="hljs-attr">&quot;externalConsole&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 使用单独的cmd窗口，与其它IDE一致；为false时使用内置终端</span><br>        <span class="hljs-attr">&quot;internalConsoleOptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;neverOpen&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 如果不设为neverOpen，调试时会跳到“调试控制台”选项卡，你应该不需要对gdb手动输命令吧？</span><br>        <span class="hljs-attr">&quot;MIMode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;gdb&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 指定连接的调试器，可以为gdb或lldb。但我没试过lldb</span><br>        <span class="hljs-attr">&quot;miDebuggerPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;gdb.exe&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 调试器路径，Windows下后缀不能省略，Linux下则不要</span><br>        <span class="hljs-attr">&quot;setupCommands&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 模板自带，好像可以更好地显示STL容器的内容，具体作用自行Google</span><br>                <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Enable pretty-printing for gdb&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;-enable-pretty-printing&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;ignoreFailures&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;preLaunchTask&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Compile&quot;</span> <span class="hljs-comment">// 调试前执行的任务，一般为编译程序。与tasks.json的label相对应</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="jsoncpp头文件"><a href="#jsoncpp头文件" class="headerlink" title="jsoncpp头文件"></a>jsoncpp头文件</h2><p>使用jsoncpp的任何功能，只需要引入一个头文件就好：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c_cpp">#include &lt;json/json.h&gt;<br></code></pre></td></tr></table></figure><h2 id="JSON解析"><a href="#JSON解析" class="headerlink" title="JSON解析"></a>JSON解析</h2><h3 id="解析json字符串"><a href="#解析json字符串" class="headerlink" title="解析json字符串"></a>解析json字符串</h3><p>我们将会使用Json::Reader来解析JSON数据，用Json::Value来存储JSON解析出来的各种值。</p><p>先<code>Json::Reader reader;</code>然后调用<code>reader.parse()</code>解析JSON数据。如果解析成功，返回<code>false</code>；否则返回<code>true</code>。</p><p>我们将要处理的json数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;jensentsts&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;score&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">114514</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c_cpp">Json::Reader reader;<br>Json::Value root;<br>std::string jsonString = &quot;&#123;\&quot;name\&quot;: \&quot;jensentsts\&quot;, \&quot;score\&quot;: 114514&#125;&quot;;<br>if (reader.parse(jsonString/*或者jsonString.c_str()*/, root))&#123;<br>  std::cerr &lt;&lt; &quot;parse failed!&quot; &lt;&lt; std::endl;<br>&#125;<br>else&#123;<br>  // 类型一定要正确选择，否则会抛出异常<br>  std::cout &lt;&lt; root[&quot;name&quot;].asString() &lt;&lt; std::endl;    // 选择为string类型并输出<br>  std::cout &lt;&lt; root[&quot;score&quot;].asInt() &lt;&lt; std::endl;      // 选择为int类型并输出<br>&#125;<br></code></pre></td></tr></table></figure><p>当然了，还可以这样写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c_cpp">Json::Reader reader;<br>Json::Value root;<br>const char jsonString[] = &quot;&#123;\&quot;name\&quot;: \&quot;jensentsts\&quot;, \&quot;score\&quot;: 114514&#125;&quot;;<br>if (!reader.parse(jsonString, jsonString + sizeof(jsonString), root))&#123;<br>  // 这样就是在字符串之中读取部分文本并且解析<br>  // 类型一定要正确选择，否则会抛出异常<br>  std::cout &lt;&lt; root[&quot;name&quot;].asString() &lt;&lt; std::endl;    // 选择为string类型并输出<br>  std::cout &lt;&lt; root[&quot;score&quot;].asInt() &lt;&lt; std::endl;      // 选择为int类型并输出<br>&#125;<br>else&#123;<br>  std::cerr &lt;&lt; &quot;parse failed!&quot; &lt;&lt; std::endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>同样的输出结果：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">jensentsts</span><br><span class="hljs-keyword"></span><span class="hljs-number">114514</span><br></code></pre></td></tr></table></figure><h3 id="从json文件中读取并解析"><a href="#从json文件中读取并解析" class="headerlink" title="从json文件中读取并解析"></a>从json文件中读取并解析</h3><p>以下代码修改自<em>参考资料1</em></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// &quot;checkjson.json&quot;中的数据</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;tocy&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;age&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1000</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>下面的代码将其读入并解析</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c_cpp">ifstream ifs(&quot;checkjson.json&quot;);<br>assert(ifs.is_open());<br>Json::Reader reader;<br>Json::Value root;<br>if (reader.parse(ifs, root, false))&#123;<br>  std::cerr &lt;&lt; &quot;parse failed!&quot; &lt;&lt; std::endl;<br>&#125;<br>else&#123;<br>  std::string name = root[&quot;name&quot;].asString();<br>  int age = root[&quot;age&quot;].asInt();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="解析array数据"><a href="#解析array数据" class="headerlink" title="解析array数据"></a>解析array数据</h3><p>我们将要解析的json数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Tony&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;salary&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">100</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Kit&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;salary&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">233</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c_cpp">std::string json = &quot;[\&quot;Here is data below.\&quot;, &#123;\&quot;Tony\&quot;: \&quot;\&quot;, \&quot;salary\&quot;: 100&#125;, &#123;\&quot;name\&quot;: \&quot;Kit\&quot;, \&quot;salary\&quot;: 233&#125;]&quot;<br>Json::Reader reader;<br>Json::Value root;<br>if (!reader.parse(json, root))&#123;<br>  // 在json中，第一项是string，第二、三项是object，下面我们将分别输出它们<br>  std::cout &lt;&lt; root[0] &lt;&lt; std::endl;<br>  size_t count = root.size();<br>  for (size_t i = 1; i &lt; count; ++i)&#123;<br>    std::cout &lt;&lt; root[i][&quot;name&quot;].asString() &lt;&lt; &quot;\&#x27;s salary is &quot; &lt;&lt; root[i][&quot;salary&quot;].asInt() &lt;&lt; &quot;.&quot; &lt;&lt; std::endl;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada">Here <span class="hljs-keyword">is</span> data below.<br>Tony<span class="hljs-symbol">&#x27;s</span> salary <span class="hljs-keyword">is</span> <span class="hljs-number">100</span>.<br>Kit<span class="hljs-symbol">&#x27;s</span> salary <span class="hljs-keyword">is</span> <span class="hljs-number">233</span>.<br></code></pre></td></tr></table></figure><h3 id="全部加起来，结果写出来-1"><a href="#全部加起来，结果写出来-1" class="headerlink" title="全部加起来，结果写出来"></a>全部加起来，结果写出来</h3><p>我们将要解析的json数据（放在了<code>jkl.json</code>中）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;package-name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;jinkela&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.0.0&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;artists&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Mei&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;from&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;America&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Ri&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;from&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Japan&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Fei&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;from&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Aferica&quot;</span><span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;prop&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;jinkela&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;kind&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;fertilizer&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;cost&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">450</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>__ __ __ __：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c_cpp">void packageInstaller()&#123;<br>  Json::Reader reader;<br>  Json::Value root;<br>  ifstream ifs(&quot;jkl.json&quot;);<br>  if (!ifs.is_open())&#123;<br>    std::cerr &lt;&lt; &quot;Cannot open the file.&quot; &lt;&lt; std::endl;<br>    return;<br>  &#125;<br>  if (reader.parse(ifs, root))&#123;<br>    std::cerr &lt;&lt; &quot;Failed to parse JSON.&quot; &lt;&lt; std::endl;<br>    return;<br>  &#125;<br>  std::clog &lt;&lt; &quot;Stage Package Installer loaded.&quot; &lt;&lt; std::endl;<br>  std::clog &lt;&lt; &quot;Package name: &quot; &lt;&lt; root[&quot;package-name&quot;].asString() &lt;&lt; std::endl;<br>  std::clog &lt;&lt; &quot;Package version: &quot; &lt;&lt; root[&quot;version&quot;].asString() &lt;&lt; std::endl;<br>  size_t count = root[&quot;artists&quot;].size();<br>  // &quot;artists&quot;<br>  for (size_t i = 0; i &lt; count; ++i)&#123;<br>    std::clog &lt;&lt; &quot;Artist &quot; &lt;&lt; i &lt;&lt; &quot;is &quot; &lt;&lt; root[&quot;artists&quot;][i][&quot;name&quot;].asString() &lt;&lt; std::endl;<br>    std::clog &lt;&lt; &quot;\twho is from &quot; &lt;&lt; root[&quot;artists&quot;][i][&quot;from&quot;].asString() &lt;&lt; std::endl;<br>  &#125;<br>  // &quot;prop&quot;<br>  Json::Value prop = root[&quot;prop&quot;];<br>  std::clog &lt;&lt; &quot;The prop they need:&quot; &lt;&lt; std::endl;<br>  std::clog &lt;&lt; &quot;name: &quot; &lt;&lt; prop[&quot;name&quot;].asString() &lt;&lt; std::endl;<br>  std::clog &lt;&lt; &quot;kind: &quot; &lt;&lt; prop[&quot;kind&quot;].asString() &lt;&lt;std::endl;<br>  std::clog &lt;&lt; &quot;cost: &quot; &lt;&lt; prop[&quot;cost&quot;].asInt() &lt;&lt; std::endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ada">Stage <span class="hljs-keyword">Package</span> <span class="hljs-title">Installer loaded.</span><br><span class="hljs-keyword">Package</span> <span class="hljs-title">name: jinkela</span><br><span class="hljs-keyword">Package</span> <span class="hljs-title">version: 1.0.0</span><br>Artist <span class="hljs-number">0</span><span class="hljs-keyword">is</span> Mei<br>        who <span class="hljs-keyword">is</span> from America<br>Artist <span class="hljs-number">1</span><span class="hljs-keyword">is</span> Ri<br>        who <span class="hljs-keyword">is</span> from Japan<br>Artist <span class="hljs-number">2</span><span class="hljs-keyword">is</span> Fei<br>        who <span class="hljs-keyword">is</span> from Aferica<br>The prop they need:<br>name: jinkela<br>kind: fertilizer<br>cost: <span class="hljs-number">450</span><br></code></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>解析操作基本上就是这些。</p><p>我们通过<code>Json::Reader对象</code>中的<code>parse()</code>解析JSON数据，<code>parse()</code>会自动地吧结果写入传入的<code>Json::Value对象</code>中。调用<code>parse()</code>的方法有很多种，一般来说分别是：</p><ul><li><code>parse(C++ stream, Json::Value)</code>，第一项可以是<code>string</code>，也可以是<code>ifstream</code></li><li><code>parse(const char* begin, const char* end, Json::Value)</code></li><li><code>parse(const char* str, Json::Value)</code></li></ul><p>总之最后一项是<code>Json::Value</code>。你可能会发现<code>parse()</code>的最后一项会是<code>collectComments</code>，这个我还没研究过，咕咕咕(*･ω&lt; ) </p><p><code>Json::Value对象</code>中存储的可能是一个键值对，object，array，也可能只是一个简简单单的string，Number，Boolean等等，我们要通过<code>Json::Value对象.as***()</code>以在C++中使用他们的值</p><p>在示例代码中，我们创建了一个名为<code>root</code>的变量，并用<code>root</code>存储JSON数据的“根节点”。在“全部加起来，结果写出来”中，我们也用了一个<code>Json::Value prop</code>来存储其“子节点”的信息。并通过<code>prop</code>来访问其下的数据。其实，只要我们调用的不是<code>as***()</code>，那么我们得到的对象都是<code>Json::Value</code>类型的</p><h2 id="JSON数据封装"><a href="#JSON数据封装" class="headerlink" title="JSON数据封装"></a>JSON数据封装</h2><p>这里我们会用<code>Json::Value</code>来存储JSON中的数据，然后用<code>Json::Writer</code>来把编辑好的<code>Json::Value</code>转换为JSON字符串</p><h3 id="封装简单的数据"><a href="#封装简单的数据" class="headerlink" title="封装简单的数据"></a>封装简单的数据</h3><p>示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c_cpp">Json::Value root;<br>Json::Value files;<br>Json::FastWriter writer;<br>root[&quot;name&quot;] = &quot;Tony&quot;;<br>root[&quot;salary&quot;] = 100;<br>root[&quot;msg&quot;] = &quot;work hard&quot;;<br>files[0] = &quot;1.zip&quot;;<br>files[1] = &quot;2.txt&quot;;<br>root[&quot;files&quot;] = files;<br>std::string jsonFile = writer.write(root);<br>std::cout &lt;&lt; jsonFile &lt;&lt; std::endl;<br></code></pre></td></tr></table></figure><h3 id="封装内嵌object的array"><a href="#封装内嵌object的array" class="headerlink" title="封装内嵌object的array"></a>封装内嵌object的array</h3><p>其实和上边那个例子的过程一样。只要你能明白两点</p><ul><li>对着<code>Json::Value对象</code>直接去赋值</li><li>array和object的调用方法和使用方法大差不差</li></ul><p title="终于写完啦！！！">咕咕咕</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li><a href="https://www.cnblogs.com/tocy/p/json-intro_jsoncpp-lib.html">json简介及JsonCpp用法</a></li><li><a href="https://github.com/open-source-parsers/jsoncpp/blob/master/README.md">github上jsoncpp&#x2F;README.md</a></li><li>百度得到的CSDN博客</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>cpp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>冬天到啦，给你的博客添加雪花特效！</title>
    <link href="/2021/12/23/%E9%9B%AA%E8%8A%B1%E7%89%B9%E6%95%88/"/>
    <url>/2021/12/23/%E9%9B%AA%E8%8A%B1%E7%89%B9%E6%95%88/</url>
    
    <content type="html"><![CDATA[<p>刚刚过了冬至，可是冬天尚在最盛。距离过年还有些时间，而心却时时刻刻盼望着假期的饺子。<a href="https://limestart.cn/">青柠起始页</a> 加上了雪花的特效，在修好的背景图片上，凄清、幽寒而静谧。  </p><span id="more"></span><p>本文来源：<a href="https://blog.csdn.net/qq_36759224/article/details/85420403">Hexo 博客优化之博客美化系列（持续更新）</a><br>废话不多说，直接开始！</p><h1 id="新建文件"><a href="#新建文件" class="headerlink" title="新建文件"></a>新建文件</h1><p>在<code>.\themes\$你想要添加雪花效果的主题的文件夹$\source\js</code>下新建一个js文件，然后存如下代码：</p><h2 id="样式一"><a href="#样式一" class="headerlink" title="样式一"></a>样式一</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*样式一*/</span><br>(<span class="hljs-keyword">function</span>(<span class="hljs-params">$</span>)&#123;<br>$.fn.<span class="hljs-property">snow</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">options</span>)&#123;<br><span class="hljs-keyword">var</span> $flake = $(<span class="hljs-string">&#x27;&lt;div id=&quot;snowbox&quot; /&gt;&#x27;</span>).<span class="hljs-title function_">css</span>(&#123;<span class="hljs-string">&#x27;position&#x27;</span>: <span class="hljs-string">&#x27;absolute&#x27;</span>,<span class="hljs-string">&#x27;z-index&#x27;</span>:<span class="hljs-string">&#x27;9999&#x27;</span>, <span class="hljs-string">&#x27;top&#x27;</span>: <span class="hljs-string">&#x27;-50px&#x27;</span>&#125;).<span class="hljs-title function_">html</span>(<span class="hljs-string">&#x27;&amp;#10052;&#x27;</span>),<br>documentHeight = $(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">height</span>(),<br>documentWidth= $(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">width</span>(),<br>defaults = &#123;<br>minSize: <span class="hljs-number">10</span>,<br>maxSize: <span class="hljs-number">20</span>,<br>newOn: <span class="hljs-number">1000</span>,<br>flakeColor: <span class="hljs-string">&quot;#AFDAEF&quot;</span> <span class="hljs-comment">/* 此处可以定义雪花颜色，若要白色可以改为#FFFFFF */</span><br>&#125;,<br>options= $.<span class="hljs-title function_">extend</span>(&#123;&#125;, defaults, options);<br><span class="hljs-keyword">var</span> interval= <span class="hljs-built_in">setInterval</span>( <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">var</span> startPositionLeft = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * documentWidth - <span class="hljs-number">100</span>,<br>startOpacity = <span class="hljs-number">0.5</span> + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>(),<br>sizeFlake = options.<span class="hljs-property">minSize</span> + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * options.<span class="hljs-property">maxSize</span>,<br>endPositionTop = documentHeight - <span class="hljs-number">200</span>,<br>endPositionLeft = startPositionLeft - <span class="hljs-number">500</span> + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">500</span>,<br>durationFall = documentHeight * <span class="hljs-number">10</span> + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">5000</span>;<br>$flake.<span class="hljs-title function_">clone</span>().<span class="hljs-title function_">appendTo</span>(<span class="hljs-string">&#x27;body&#x27;</span>).<span class="hljs-title function_">css</span>(&#123;<br><span class="hljs-attr">left</span>: startPositionLeft,<br><span class="hljs-attr">opacity</span>: startOpacity,<br><span class="hljs-string">&#x27;font-size&#x27;</span>: sizeFlake,<br><span class="hljs-attr">color</span>: options.<span class="hljs-property">flakeColor</span><br>&#125;).<span class="hljs-title function_">animate</span>(&#123;<br><span class="hljs-attr">top</span>: endPositionTop,<br><span class="hljs-attr">left</span>: endPositionLeft,<br><span class="hljs-attr">opacity</span>: <span class="hljs-number">0.2</span><br>&#125;,durationFall,<span class="hljs-string">&#x27;linear&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>$(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">remove</span>()<br>&#125;);<br>&#125;, options.<span class="hljs-property">newOn</span>);<br>    &#125;;<br>&#125;)(jQuery);<br>$(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    $.fn.<span class="hljs-title function_">snow</span>(&#123; <br>    <span class="hljs-attr">minSize</span>: <span class="hljs-number">5</span>, <span class="hljs-comment">/* 定义雪花最小尺寸 */</span><br>    <span class="hljs-attr">maxSize</span>: <span class="hljs-number">50</span>,<span class="hljs-comment">/* 定义雪花最大尺寸 */</span><br>    <span class="hljs-attr">newOn</span>: <span class="hljs-number">300</span>  <span class="hljs-comment">/* 定义密集程度，数字越小越密集 */</span><br>    &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><p>这是第一种特效，效果长这样：<br><img src="https://img-blog.csdnimg.cn/20190807103144792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NzU5MjI0,size_16,color_FFFFFF,t_70" alt="哎呀哈，图片炸了……"></p><h2 id="样式二"><a href="#样式二" class="headerlink" title="样式二"></a>样式二</h2><p>或者你可以使用第二种</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*样式二*/</span><br><span class="hljs-comment">/* 控制下雪 */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">snowFall</span>(<span class="hljs-params">snow</span>) &#123;<br>    <span class="hljs-comment">/* 可配置属性 */</span><br>    snow = snow || &#123;&#125;;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">maxFlake</span> = snow.<span class="hljs-property">maxFlake</span> || <span class="hljs-number">200</span>;   <span class="hljs-comment">/* 最多片数 */</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">flakeSize</span> = snow.<span class="hljs-property">flakeSize</span> || <span class="hljs-number">10</span>;  <span class="hljs-comment">/* 雪花形状 */</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">fallSpeed</span> = snow.<span class="hljs-property">fallSpeed</span> || <span class="hljs-number">1</span>;   <span class="hljs-comment">/* 坠落速度 */</span><br>&#125;<br><span class="hljs-comment">/* 兼容写法 */</span><br>requestAnimationFrame = <span class="hljs-variable language_">window</span>.<span class="hljs-property">requestAnimationFrame</span> ||<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">mozRequestAnimationFrame</span> ||<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">webkitRequestAnimationFrame</span> ||<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">msRequestAnimationFrame</span> ||<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">oRequestAnimationFrame</span> ||<br>    <span class="hljs-keyword">function</span>(<span class="hljs-params">callback</span>) &#123; <span class="hljs-built_in">setTimeout</span>(callback, <span class="hljs-number">1000</span> / <span class="hljs-number">60</span>); &#125;;<br><br>cancelAnimationFrame = <span class="hljs-variable language_">window</span>.<span class="hljs-property">cancelAnimationFrame</span> ||<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">mozCancelAnimationFrame</span> ||<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">webkitCancelAnimationFrame</span> ||<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">msCancelAnimationFrame</span> ||<br><span class="hljs-variable language_">window</span>.<span class="hljs-property">oCancelAnimationFrame</span>;<br><span class="hljs-comment">/* 开始下雪 */</span><br>snowFall.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">start</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">/* 创建画布 */</span><br>    snowCanvas.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>);<br>    <span class="hljs-comment">/* 创建雪花形状 */</span><br>    createFlakes.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>);<br>    <span class="hljs-comment">/* 画雪 */</span><br>    drawSnow.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>)<br>&#125;<br><span class="hljs-comment">/* 创建画布 */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">snowCanvas</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">/* 添加Dom结点 */</span><br>    <span class="hljs-keyword">var</span> snowcanvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;canvas&quot;</span>);<br>    snowcanvas.<span class="hljs-property">id</span> = <span class="hljs-string">&quot;snowfall&quot;</span>;<br>    snowcanvas.<span class="hljs-property">width</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>;<br>    snowcanvas.<span class="hljs-property">height</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">clientHeight</span>;<br>    snowcanvas.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&quot;style&quot;</span>, <span class="hljs-string">&quot;position:absolute; top: 0; left: 0; z-index: 1; pointer-events: none;&quot;</span>);<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&quot;body&quot;</span>)[<span class="hljs-number">0</span>].<span class="hljs-title function_">appendChild</span>(snowcanvas);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvas</span> = snowcanvas;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">ctx</span> = snowcanvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>);<br>    <span class="hljs-comment">/* 窗口大小改变的处理 */</span><br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">onresize</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        snowcanvas.<span class="hljs-property">width</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>;<br>        <span class="hljs-comment">/* snowcanvas.height = window.innerHeight */</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">/* 雪运动对象 */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">flakeMove</span>(<span class="hljs-params">canvasWidth, canvasHeight, flakeSize, fallSpeed</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * canvasWidth);   <span class="hljs-comment">/* x坐标 */</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * canvasHeight);  <span class="hljs-comment">/* y坐标 */</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">size</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * flakeSize + <span class="hljs-number">2</span>;          <span class="hljs-comment">/* 形状 */</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">maxSize</span> = flakeSize;                           <span class="hljs-comment">/* 最大形状 */</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">speed</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">1</span> + fallSpeed;         <span class="hljs-comment">/* 坠落速度 */</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">fallSpeed</span> = fallSpeed;                         <span class="hljs-comment">/* 坠落速度 */</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">velY</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">speed</span>;                             <span class="hljs-comment">/* Y方向速度 */</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">velX</span> = <span class="hljs-number">0</span>;                                      <span class="hljs-comment">/* X方向速度 */</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">stepSize</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() / <span class="hljs-number">30</span>;                 <span class="hljs-comment">/* 步长 */</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">step</span> = <span class="hljs-number">0</span>                                       <span class="hljs-comment">/* 步数 */</span><br>&#125;<br>flakeMove.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">update</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> x = <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span>,<br>        y = <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span>;<br>    <span class="hljs-comment">/* 左右摆动(余弦) */</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">velX</span> *= <span class="hljs-number">0.98</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">velY</span> &lt;= <span class="hljs-variable language_">this</span>.<span class="hljs-property">speed</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">velY</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">speed</span><br>    &#125;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">velX</span> += <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">cos</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">step</span> += <span class="hljs-number">.05</span>) * <span class="hljs-variable language_">this</span>.<span class="hljs-property">stepSize</span>;<br><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> += <span class="hljs-variable language_">this</span>.<span class="hljs-property">velY</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> += <span class="hljs-variable language_">this</span>.<span class="hljs-property">velX</span>;<br>    <span class="hljs-comment">/* 飞出边界的处理 */</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> &gt;= canvas.<span class="hljs-property">width</span> || <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> &lt;= <span class="hljs-number">0</span> || <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> &gt;= canvas.<span class="hljs-property">height</span> || <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> &lt;= <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">reset</span>(canvas.<span class="hljs-property">width</span>, canvas.<span class="hljs-property">height</span>)<br>    &#125;<br>&#125;;<br><span class="hljs-comment">/* 飞出边界-放置最顶端继续坠落 */</span><br>flakeMove.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">reset</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">width, height</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * width);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">size</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-variable language_">this</span>.<span class="hljs-property">maxSize</span> + <span class="hljs-number">2</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">speed</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">1</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">fallSpeed</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">velY</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">speed</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">velX</span> = <span class="hljs-number">0</span>;<br>&#125;;<br><span class="hljs-comment">// 渲染雪花-随机形状（此处可修改雪花颜色！！！）</span><br>flakeMove.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">render</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">ctx</span>) &#123;<br>    <span class="hljs-keyword">var</span> snowFlake = ctx.<span class="hljs-title function_">createRadialGradient</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span>, <span class="hljs-number">0</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">size</span>);<br>    snowFlake.<span class="hljs-title function_">addColorStop</span>(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;rgba(255, 255, 255, 0.9)&quot;</span>);  <span class="hljs-comment">/* 此处是雪花颜色，默认是白色 */</span><br>    snowFlake.<span class="hljs-title function_">addColorStop</span>(<span class="hljs-number">.5</span>, <span class="hljs-string">&quot;rgba(255, 255, 255, 0.5)&quot;</span>); <span class="hljs-comment">/* 若要改为其他颜色，请自行查 */</span><br>    snowFlake.<span class="hljs-title function_">addColorStop</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;rgba(255, 255, 255, 0)&quot;</span>);    <span class="hljs-comment">/* 找16进制的RGB 颜色代码。 */</span><br>    ctx.<span class="hljs-title function_">save</span>();<br>    ctx.<span class="hljs-property">fillStyle</span> = snowFlake;<br>    ctx.<span class="hljs-title function_">beginPath</span>();<br>    ctx.<span class="hljs-title function_">arc</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">size</span>, <span class="hljs-number">0</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">2</span>);<br>    ctx.<span class="hljs-title function_">fill</span>();<br>    ctx.<span class="hljs-title function_">restore</span>();<br>&#125;;<br><span class="hljs-comment">/* 创建雪花-定义形状 */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createFlakes</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> maxFlake = <span class="hljs-variable language_">this</span>.<span class="hljs-property">maxFlake</span>,<br>        flakes = <span class="hljs-variable language_">this</span>.<span class="hljs-property">flakes</span> = [],<br>        canvas = <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvas</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; maxFlake; i++) &#123;<br>        flakes.<span class="hljs-title function_">push</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_">flakeMove</span>(canvas.<span class="hljs-property">width</span>, canvas.<span class="hljs-property">height</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">flakeSize</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">fallSpeed</span>))<br>    &#125;<br>&#125;<br><span class="hljs-comment">/* 画雪 */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">drawSnow</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> maxFlake = <span class="hljs-variable language_">this</span>.<span class="hljs-property">maxFlake</span>,<br>        flakes = <span class="hljs-variable language_">this</span>.<span class="hljs-property">flakes</span>;<br>    ctx = <span class="hljs-variable language_">this</span>.<span class="hljs-property">ctx</span>, canvas = <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvas</span>, that = <span class="hljs-variable language_">this</span>;<br>    <span class="hljs-comment">/* 清空雪花 */</span><br>    ctx.<span class="hljs-title function_">clearRect</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, canvas.<span class="hljs-property">width</span>, canvas.<span class="hljs-property">height</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> e = <span class="hljs-number">0</span>; e &lt; maxFlake; e++) &#123;<br>        flakes[e].<span class="hljs-title function_">update</span>();<br>        flakes[e].<span class="hljs-title function_">render</span>(ctx);<br>    &#125;<br>    <span class="hljs-comment">/*  一帧一帧的画 */</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">loop</span> = <span class="hljs-title function_">requestAnimationFrame</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        drawSnow.<span class="hljs-title function_">apply</span>(that);<br>    &#125;);<br>&#125;<br><span class="hljs-comment">/* 调用及控制方法 */</span><br><span class="hljs-keyword">var</span> snow = <span class="hljs-keyword">new</span> <span class="hljs-title function_">snowFall</span>(&#123;<span class="hljs-attr">maxFlake</span>:<span class="hljs-number">60</span>&#125;);<br>snow.<span class="hljs-title function_">start</span>();<br></code></pre></td></tr></table></figure><p>效果图：<br><img src="https://img-blog.csdnimg.cn/20190807103041166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NzU5MjI0,size_16,color_FFFFFF,t_70" alt="看不见，怎么想都看不见吧"></p><h1 id="引用文件"><a href="#引用文件" class="headerlink" title="引用文件"></a>引用文件</h1><p>在<code>themes\$还是那个文件夹$\layout\layout.ejs</code>里添加：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 雪花特效 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;\js\snow.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果没有效果，确认网页是否引用了JQuery，如果没有请在上面的代码之前加入JQuery即可：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://libs.baidu.com/jquery/1.8.3/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://libs.baidu.com/jquery/1.8.3/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当然，直接这样添加的话，取消效果要去layout.ejs里手动撤掉代码。</p>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>美化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>给你的hexo博客添加可可爱爱的看板娘</title>
    <link href="/2021/12/10/hexo%E7%9C%8B%E6%9D%BF%E5%A8%98/"/>
    <url>/2021/12/10/hexo%E7%9C%8B%E6%9D%BF%E5%A8%98/</url>
    
    <content type="html"><![CDATA[<p>百度上一搜，很多都是cnblogs的，决定自己收集一下hexo上添加看板娘的方法</p><span id="more"></span><h1 id="添加看板娘"><a href="#添加看板娘" class="headerlink" title="添加看板娘"></a>添加看板娘</h1><h2 id="安装live2d插件"><a href="#安装live2d插件" class="headerlink" title="安装live2d插件"></a>安装live2d插件</h2><p>在博客根目录下输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">$ npm install --save hexo-helper-live2d<br></code></pre></td></tr></table></figure><p>即可安装  </p><h2 id="修改-config-yml"><a href="#修改-config-yml" class="headerlink" title="修改_config.yml"></a>修改_config.yml</h2><p>在<code>_config.yml</code>下添加如是json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs json"># live2d<br>live2d<span class="hljs-punctuation">:</span><br>   enable<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span># 是否开启<br>   scriptFrom<span class="hljs-punctuation">:</span> local<br>   pluginRootPath<span class="hljs-punctuation">:</span> live2dw/# 插件在站点上的相对路径<br>   pluginJsPath<span class="hljs-punctuation">:</span> lib/# js文件在插件根目录上的相对路径<br>   pluginModelPath<span class="hljs-punctuation">:</span> assets/# 模型文件在插件根目录上的相对路径（这仨一般不用改）<br>   tagMode<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>   debug<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span># 标签模式，是否替换live2d tag标签而非插入到所有页面中<br>   model<span class="hljs-punctuation">:</span><br>       use<span class="hljs-punctuation">:</span> live2d-widget-model-z16 # 这里填写你使用的看板娘模型的名字<br># use<span class="hljs-punctuation">:</span> name # live2d_models/下的目录名<br># use<span class="hljs-punctuation">:</span> ./folder/name # 相对于博客根目录的相对路径<br># https<span class="hljs-punctuation">:</span><span class="hljs-comment">//xxx.xxx.xxx/xxx # 使用url</span><br>       scale<span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br>       hHeadPos<span class="hljs-punctuation">:</span> <span class="hljs-number">0.5</span><br>       vHeadPos<span class="hljs-punctuation">:</span> <span class="hljs-number">0.618</span><br>   display<span class="hljs-punctuation">:</span><br>       superSample<span class="hljs-punctuation">:</span> <span class="hljs-number">2</span># <br>       width<span class="hljs-punctuation">:</span> <span class="hljs-number">150</span><br>       height<span class="hljs-punctuation">:</span> <span class="hljs-number">300</span><br>       position<span class="hljs-punctuation">:</span> right# 定位方式，right为以右下角为原点，向左向上建立x、y轴<br>       hOffset<span class="hljs-punctuation">:</span> <span class="hljs-number">0</span># 垂直方向的偏移<br>       vOffset<span class="hljs-punctuation">:</span> <span class="hljs-number">-20</span># 水平方向的偏移<br>   mobile<span class="hljs-punctuation">:</span><br>       show<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span># 是否在手机上显示<br>       scale<span class="hljs-punctuation">:</span> <span class="hljs-number">0.5</span><br>  react<span class="hljs-punctuation">:</span><br>      opacityDefault<span class="hljs-punctuation">:</span> <span class="hljs-number">0.7</span># 一般情况下的透明度<br>      opacityOnHover<span class="hljs-punctuation">:</span> <span class="hljs-number">0.2</span># 鼠标移到看板娘上时的透明度<br></code></pre></td></tr></table></figure><h2 id="安装你的看板娘模型"><a href="#安装你的看板娘模型" class="headerlink" title="安装你的看板娘模型"></a>安装你的看板娘模型</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">$ npm install 模型名称<br></code></pre></td></tr></table></figure><p>安装好之后在.&#x2F;_config.yml里修改<code>use</code>的参数，以启用看板娘模型。<br>Live2D看板娘模型大全：<a href="https://blog.csdn.net/wang_123_zy/article/details/87181892">Hexo添加Live2D看板娘+模型预览</a>  </p><h1 id="让看板娘能互动"><a href="#让看板娘能互动" class="headerlink" title="让看板娘能互动"></a>让看板娘能互动</h1><h6 id="还没弄明白"><a href="#还没弄明白" class="headerlink" title="还没弄明白"></a>还没弄明白</h6>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>美化</tag>
      
      <tag>看板娘</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大学那些琐碎事</title>
    <link href="/2021/11/14/%E5%A4%A7%E5%AD%A6/"/>
    <url>/2021/11/14/%E5%A4%A7%E5%AD%A6/</url>
    
    <content type="html"><![CDATA[<p>中学的老师和我们说：</p><blockquote><p>大学是你人生中最轻松的一段时光！<br>上了大学，你整天玩也没人管你。除了打游戏，就是谈恋爱。<br>大学你不学习也没人管你，生活非常闲。<br>…………</p></blockquote><p>当我进入大学后，我可一点都不觉得我的生活那里“闲”。<br>我感觉，我可能上了个假的大学。  </p><span id="more"></span><p><img src="https://i.loli.net/2021/11/14/1d5zvjgK4MNuHqw.jpg" alt="66012d206fc96673cc55fc93119fe2f1.jpeg"></p><h1 id="什么是大学生活"><a href="#什么是大学生活" class="headerlink" title="什么是大学生活"></a>什么是大学生活</h1><p>你给我翻译翻译，什么叫TMD大学生活？<br>大学生活：College life<br>大学生 活：College student alive<br>大 学生活：Greatly learn to live<br><del>大学 生 活：College give birth to life</del>  </p><h2 id="军训"><a href="#军训" class="headerlink" title="军训"></a>军训</h2><p>军训……差不多14天，忍一忍就过去了<br>我们军训期间，愣是一天雨都没下，晚训也是认认真真搞<code>训练</code><br>反观其他学校，他们的晚训似乎就是各种活动</p><h2 id="各种量化分"><a href="#各种量化分" class="headerlink" title="各种量化分"></a>各种量化分</h2><p>绩点、学分、德育分、体育分……<br>看起来就这四个名字，对吧？<br>可是想要拿够，那就不容易了  </p><h3 id="首先是学分"><a href="#首先是学分" class="headerlink" title="首先是学分"></a>首先是学分</h3><p>学分这个东西吧……<br>大概是我作为一个大一新生最在意的事情了<br>学分 &#x3D; 求学分(a*平时分 + b*期中分数 + c*期末分数)<br>每个老师都有不同的a b c<br>听一些学神学长说，由于他们大一打好了学分基础，因此他们大学四年都不愁学分<br>也不知道他们是如何学会复杂的高数<br>学长一致推荐<a href="https://space.bilibili.com/66607740?from=search&seid=10673502119822048357&spm_id_from=333.337.0.0">宋浩老师</a> 的高数线代课程<br>u1s1确实，他讲的比老师讲的好<br><em>我现在不太明白，那些“每次上课枪前排”的人，他们图个啥？</em>混个脸熟，让老师多给点平时分？  </p><p><code>2021年12月3日补充</code>：及时你天天抢前排老师也未必记得你。跟着老师走，一个是老师带路，不易迷路（尽管有的“导游”说起话来迷迷糊糊地），另一个是避免过多摸鱼。我一同学因为听不懂老师方言（比如正交矩阵-&gt;蒸饺矩阵）而放弃上课跟着老师学线代，准备跟着b站宋浩老师学线代，导致半个学期了线代几乎没学<br>因此<code>课前预习-&gt;课上复习-&gt;课后答疑+练题</code>是我发现的比较好的学习方式</p><h3 id="然后是德育分"><a href="#然后是德育分" class="headerlink" title="然后是德育分"></a>然后是德育分</h3><p>德育分评分取决于你参加的一些活动<br>比如听讲座，参加辩论赛……<br>如果你加入了学生会活着班委，那么德育分直接拉足    </p><p><code>2021年12月3日补充</code>：加入学校（学院）辩论队、学校（学院）运动队等等，凡是为公做事的都能拿到一些德育分。一遍造福他人，一遍获得回报，岂不美哉？胡不为也。<br>当然，如果你的学校可能氛围不太好，上述几条自然作废。不过呢，报名参加各种活动、听讲座等等都是可以获得德育分的。<br>我个人不太建议听各种讲座——有些讲座不加德育分（但是他们宣称能加德育分），有的讲座听半天纯粹是浪费时间，对你没有帮助</p><h4 id="辟谣——学生会"><a href="#辟谣——学生会" class="headerlink" title="辟谣——学生会"></a>辟谣——学生会</h4><p>我加入了我们学院的宣传部<br>学长学姐和蔼可亲<br>根本没有那种“官威”<br>个人猜测，有官威的学生会，或许是大学不太行？<br>资本引导下的互联网时代，评论区没有太多参考价值——一般来讲，主题是啥，评论就是啥</p><blockquote><p>视频：“我们学校食堂真垃圾”<br>评论1：诶对对对，我们学校食堂阿姨，那个手……<br>评论2：我看学校食堂和学校领导……</p></blockquote><p>看多了你就会觉得“我得个亲娘嘞，这食堂咋怎黑啊？”<br>再看点别的视频评论，就感觉“黑，真TM黑”<br>差不多是这样，反正多数是评论跟着视频走……  </p><p>所以啊，大多数学生会应当没有那么黑暗，我有一个鼓吹“学生会都TMD黑暗”的室友，积极地报名了“学生会社联部”（诚然，社联事实上不属于学生会，但也有上下级之分）  </p><h3 id="体育分和绩点"><a href="#体育分和绩点" class="headerlink" title="体育分和绩点"></a>体育分和绩点</h3><p>体育分就看你体育课、体测<br>绩点：保研要用到，关键数据。</p><h2 id="被期中考试吓趴下"><a href="#被期中考试吓趴下" class="headerlink" title="被期中考试吓趴下"></a>被期中考试吓趴下</h2><p><img src="https://i.loli.net/2021/11/14/sYRjEqrAC3BuD7y.jpg" alt="我经历过一模二模三模，也有过决战高考，如今却被一个期中考试吓趴下"><br>相信大多数uu都有这种体会，那就是面对大学期中考试的恐惧感<br>这是为什么呢？因为高中知识点简单，一般人都能理解，题目至少说也能骗一点过程分——蒙也能蒙个八九不离十<br>可是到了大学呢<br>由于知识困难<br><del>由于平日里摸鱼</del><br>因为涉及到学分<br>所以你就要多加准备<br>难道是，决定后的命运，比决定前更加珍贵了？<br>然而大学课本，你记住了，也不一定会用……<br><img src="https://i.loli.net/2021/11/14/elzaJY5Z9LHKruO.jpg" alt="e96d495413262c970b4a870099583d67.jpeg"></p><h2 id="卷！使劲儿卷！狠狠地卷！"><a href="#卷！使劲儿卷！狠狠地卷！" class="headerlink" title="卷！使劲儿卷！狠狠地卷！"></a>卷！使劲儿卷！狠狠地卷！</h2><blockquote><p>我就像卷心菜上的虫，同学们都在卷，而我却在爬</p></blockquote><p>你可能会遇到背着书包去打一天球的室友<br>你可能会遇到“我不行我不行”结果考得比你好的同学——上一个跟我这么说的已经去北大了，你以为我还会信你的鬼话？<br>诚然，我觉得<code>我们都在学习</code>是一种好风气，学风好了自然好<br>可是我们希望学习的目的不是打倒别人——诚然，学习好了确实能打倒别人<br>我们希望“先富带动后富”，学习好的人多帮一帮后进之人  </p><h2 id="想当研究生？"><a href="#想当研究生？" class="headerlink" title="想当研究生？"></a>想当研究生？</h2><p>想必各位uu进大学时都心怀梦想，毕竟……<br>上半年我做过必刷卷、金考卷、衡中卷、各地模拟题、经历过……<br>好了好了不要讲了，大家的想法都差不多，谁不想当将军？又有几人能当上将军？<br>将军很难当，但总有人当上，这个人很有可能就是“我”，这是我们前进的勇气。<br>想要当上将军，要学会的可能不只是如何学习，还要明白如何玩。<br>你不可能一点都不玩，你肯定要休息，“挥之不去”。<br>怎么学会玩？我还不太会，不如咱们现在就移步知乎？</p><h2 id="食堂和外卖"><a href="#食堂和外卖" class="headerlink" title="食堂和外卖"></a>食堂和外卖</h2><p>我们学校的食堂还好<br>竞争上摊位，没人有手抖<br>15块以内一定能吃饱，吃的也不差<br>只是没有馒头画卷肉夹馍<br>也找不到泡馍烩面肉呱嗒<br>因为疫情防控，校外外卖进不了学校，只能放在门口，或者卡bug穿铁门塞进来<br>不过嘞<br>有校内外卖<br>可以在x了么和美x上点食堂的饭，然后送到寝室楼门口，自己下去拿<br>经常是上第二节大课第二小节前把饭点好，这样回寝就能干饭  </p><p>我一直吃不惯南方大米<br>我还是喜欢吃北方大米<br>饱满不粘，历历可数，吸汤吸水<br>我也不知道为什么南方这边的大米饭让我不愿吃<br>也不知道是什么原因导致了这种差别<br>曾经喜爱的大米也成了一种乡思，一种别愁<br>不说了<br>食堂里有卖饺子的<br>赶紧去干几碗饺子！<br><code>2021年12月3日补充</code>：教职工食堂里还有卖馒头的！！！我觉得米饭不好吃是因为我吃的是学校食堂的米饭……外边的米饭好吃多了！！！</p><h2 id="英语破事多"><a href="#英语破事多" class="headerlink" title="英语破事多"></a>英语破事多</h2><p>什么U校园（Unipus）、iTest爱考试、期中前必须做完6套四级真题（这倒没啥）、上课回答问题累计4次、英语角参加次数、课堂测试、FiF口语训练……<br>破事儿很多，很杂，你还要抽时间去解决那些事情，一时没空解决的还要想着……<br>一年有三次四级考试，分别是12月、6月、9月</p><h2 id="对，大学一点都不闲"><a href="#对，大学一点都不闲" class="headerlink" title="对，大学一点都不闲"></a>对，大学一点都不闲</h2><p>大部分时间都是跟着课表，教师食堂宿舍三点共面，满校园“走南闯北”<br>我们每上半晌课就要横跨一个校园……<br>最后到学校最偏僻的角落，爬七层楼回寝<br>还有早自习和晚自习<br>有时候还会有四级模拟、高数期中模拟……<br>各种宣传教育班会，不是在说它不合理不合适，只是它确实会占用时间<br>有时候还有班级团建活动<br>苦在心中.jpg<br>一点都不闲，但一天到晚也不知道自己在忙些什么……  </p><h2 id="各种比赛和考证"><a href="#各种比赛和考证" class="headerlink" title="各种比赛和考证"></a>各种比赛和考证</h2><p>大学生创新创业大赛、电子设计大赛、计算机二级、英语四六级、教师资格证……乱七八糟各种比赛各种证书<br>考还是不考？什么时候有时间？有价值吗？以后用得上吗（对曰：<code>以后**可能**用得上</code>）？<br>回答这些问题需要的不是这些比赛怎么样，而是我们关于人生的智慧是什么样  </p><p><code>2021年12月3日补充</code>：<br>所以力所能及的证书一定要</p><blockquote><p>拿下！<br><del>——神里绫华（误）</del></p></blockquote><h1 id="玩！绝对不能耽误玩！"><a href="#玩！绝对不能耽误玩！" class="headerlink" title="玩！绝对不能耽误玩！"></a>玩！绝对不能耽误玩！</h1><p>原神！玩起来！<br>Phigros、Osu!、Muse Dash……音游玩起来！！！<br>最近又一次收了Leave All Behind</p><p><code>2021年12月3日追加</code>：为了和室友玩而入坑王者，被其他大佬虐到想要退坑，虽然但是，有一个强大的室友能带飞全队，还是留了下来。</p><h1 id="醒醒吧，心好了，啥都不叫事"><a href="#醒醒吧，心好了，啥都不叫事" class="headerlink" title="醒醒吧，心好了，啥都不叫事"></a>醒醒吧，心好了，啥都不叫事</h1><blockquote><p>反求诸己。——《孟子·公孙丑上》</p></blockquote><p>以及……<br>不要熬夜！<br>不要熬夜！！<br>不要熬夜！！！<br>不要因为室友而被动熬夜！！！！！</p><h1 id="大学暑假该干点什么"><a href="#大学暑假该干点什么" class="headerlink" title="大学暑假该干点什么"></a>大学暑假该干点什么</h1><h2 id="一些简单的tips"><a href="#一些简单的tips" class="headerlink" title="一些简单的tips"></a>一些简单的tips</h2><h3 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h3><p>如果你的专业和硬件关系比较近，那么你应该学习C语言<br>不然可以考虑先学一下python，毕竟好上手、好理解，当然当你转入其他语言的时候会显现少量的局限性（比如转C或许不理解什么是指针和链表）<br>想玩MC可以学一学Java（手动滑稽  </p><h1 id="遥远的高中港湾"><a href="#遥远的高中港湾" class="headerlink" title="遥远的高中港湾"></a>遥远的高中港湾</h1><p>我想我的高中了<br>尽管高中的我认为高中的生活实在是非常地黑暗……  </p>]]></content>
    
    
    
    <tags>
      
      <tag>杂谈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python学习笔记</title>
    <link href="/2021/08/16/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/08/16/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>大佬曰：把知识用自己的语言讲出来，你才算是学会了这个知识。我就用这种方式写一下自己的python学习笔记吧，编写博客边复习自己模糊的知识点。</p><span id="more"></span><h2 id="foo和bar"><a href="#foo和bar" class="headerlink" title="foo和bar"></a>foo和bar</h2><p>foo和bar就是外国人口中的张三李四……</p><h2 id="形参和实参"><a href="#形参和实参" class="headerlink" title="形参和实参"></a>形参和实参</h2><p>形参：具体的值<br>实参：定义函数时在括号里申明的变量<br>看到后觉得有个印象，但就是想不起来是什么（18年以前肯定是知道的）  </p><h2 id="global关键字"><a href="#global关键字" class="headerlink" title="global关键字"></a>global关键字</h2><p>声明在函数内：使用全局变量<br>声明在函数外：非内联的变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">jinkela = <span class="hljs-number">1800</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>():<br><span class="hljs-keyword">global</span> jinkela<br>jinkela *= <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><p>很好理解，就是 把 作为参数传递 并被调用 的函数 叫做回调函数  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">a</span>(<span class="hljs-params">f</span>):<br>f(<span class="hljs-string">&quot;Hello World&quot;</span>)<br>a(<span class="hljs-built_in">print</span>)<br></code></pre></td></tr></table></figure><p>输出结果为<code>Hello World</code>  </p><h2 id="闭包函数"><a href="#闭包函数" class="headerlink" title="闭包函数"></a>闭包函数</h2><p>被某个函数返回的内函数叫闭包函数，且这个函数使用了外函数的局部变量  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">mei</span>():<br>jinkela = <span class="hljs-string">&#x27;一代能顶两袋撒&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ri</span>():<br><span class="hljs-keyword">nonlocal</span> jinkela<br>jinkela += <span class="hljs-string">&#x27;亩产一千八&#x27;</span><br><span class="hljs-built_in">print</span>(jinkela)<br><span class="hljs-keyword">return</span> ri<br><span class="hljs-comment"># 如果要使用mei的返回结果：</span><br>res = mei() <span class="hljs-comment"># 坏了，res成了函数（的引用）了</span><br>res()<span class="hljs-comment"># 在申了在申了思密达</span><br>res()<br>res()<br>res()<br><span class="hljs-comment"># 但是如果你这样用好多次</span><br>mei()()<br><span class="hljs-comment"># 结果是不同的，读者可自行尝试</span><br><span class="hljs-comment">#############################</span><br><span class="hljs-comment"># 检测某函数是否为内函数</span><br><span class="hljs-built_in">print</span>(res.__closure__)<span class="hljs-comment"># cell</span><br><span class="hljs-built_in">print</span>(mei.__closure__)<span class="hljs-comment"># None</span><br></code></pre></td></tr></table></figure><h2 id="lambda-expression：匿名函数"><a href="#lambda-expression：匿名函数" class="headerlink" title="lambda expression：匿名函数"></a>lambda expression：匿名函数</h2><ul><li>不是代码块，是一行代码</li><li>只能使用形参，全局变量也不能用<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">f1 = <span class="hljs-keyword">lambda</span> x:x**<span class="hljs-number">233</span><br>f2 = <span class="hljs-keyword">lambda</span> x:<span class="hljs-number">666</span> <span class="hljs-keyword">if</span> x==<span class="hljs-string">&#x27;6&#x27;</span> <span class="hljs-keyword">else</span> <span class="hljs-number">114514</span><br></code></pre></td></tr></table></figure>用于避免简单功能用多行代码实现</li></ul><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><h3 id="迭代器的使用"><a href="#迭代器的使用" class="headerlink" title="迭代器的使用"></a>迭代器的使用</h3><p>C++里的迭代器是用来访问元素内部变量……之类的事情<br>python也是如此<br>那么python的迭代器怎么用呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">it = <span class="hljs-built_in">iter</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(it))<span class="hljs-comment"># 1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(it))<span class="hljs-comment"># 2</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(it))<span class="hljs-comment"># 3</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(it))<span class="hljs-comment"># 4</span><br></code></pre></td></tr></table></figure><h3 id="创建一个迭代器"><a href="#创建一个迭代器" class="headerlink" title="创建一个迭代器"></a>创建一个迭代器</h3><p>如何在自己写的class里使用呢？<br>用<code>__iter__()</code>、<code>__next__()</code>，其中<code>__iter__</code>应返回self  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">myClass</span>:<br>val = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>__iter__(self):<br>self.counter = <span class="hljs-number">0</span><br><span class="hljs-keyword">return</span> self<br>__next__(self):<br>self.counter += <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> self.counter &gt;= <span class="hljs-number">5</span><br><span class="hljs-keyword">raise</span> StopIteration  <span class="hljs-comment"># 停止继续迭代</span><br><span class="hljs-keyword">return</span> val[self.counter]<br></code></pre></td></tr></table></figure><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><p>当然你也可以使用生成器，让函数“变成”一个迭代器  </p><blockquote><p>在调用生成器运行的过程中，每次遇到 yield 时函数会暂停并保存当前所有的运行信息，返回 yield 的值, 并在下一次执行 next() 方法时从当前位置继续运行。<br>调用一个生成器函数，返回的是一个迭代器对象。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 该例子来自https://www.runoob.com/python3/python3-iterator-generator.html</span><br><span class="hljs-keyword">import</span> sys<br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fibonacci</span>(<span class="hljs-params">n</span>): <span class="hljs-comment"># 生成器函数 - 斐波那契</span><br>    a, b, counter = <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">if</span> (counter &gt; n): <br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">yield</span> a<br>        a, b = b, a + b<br>        counter += <span class="hljs-number">1</span><br>f = fibonacci(<span class="hljs-number">10</span>) <span class="hljs-comment"># f 是一个迭代器，由生成器返回生成</span><br> <br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-built_in">print</span> (<span class="hljs-built_in">next</span>(f), end=<span class="hljs-string">&quot; &quot;</span>)<br>    <span class="hljs-keyword">except</span> StopIteration:<br>        sys.exit()<br></code></pre></td></tr></table></figure><p>输出结果：</p><blockquote><p>0 1 1 2 3 5 8 13 21 34 55</p></blockquote><p>读者可以尝试稍作修改，理解一下没有yield时的输出结果。</p><h2 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h2><p>就是python解释器自带的函数  </p>]]></content>
    
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>控制台俄罗斯方块</title>
    <link href="/2021/08/15/%E6%8E%A7%E5%88%B6%E5%8F%B0%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97/"/>
    <url>/2021/08/15/%E6%8E%A7%E5%88%B6%E5%8F%B0%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97/</url>
    
    <content type="html"><![CDATA[<p>这是一个控制台项目，一切设计都要从字符角度考虑。<br>这次项目我终于敢放下顾虑，大胆解决问题了，其价值足以我写一篇博客来记录<br>俄罗斯方块不是什么很难的东西，也没人教过我怎么去构建这个项目。说明这个项目是真的简单。  </p><span id="more"></span><p>这个项目构思不是一瞬间完成的，是先有总的思路，然后考虑某个部分的内容，再接着去做其细节、写成代码，常常因为出现前面考虑不到而去修改前面的东西的情况。看来这种修改是稀松的，不用担心去修改前面的代码，<br>这种修改是一种进步，不用担心不用怕。<br>那咱就挑点重点写写吧<br><img src="https://img0.baidu.com/it/u=1233268571,2245711054&fm=26&fmt=auto&gp=0.jpg" alt="Console Tetris.png"></p><h2 id="阅前提示"><a href="#阅前提示" class="headerlink" title="阅前提示"></a>阅前提示</h2><p>建议先编译看看效果然后再来读博客。<a href="https://github.com/jensentsts/-/blob/main/Console%20Tetris.cpp">代码链接</a><br>（还有很多需要优化的地方……）  </p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="总框架"><a href="#总框架" class="headerlink" title="总框架"></a>总框架</h3><blockquote><p><code>void gameStart()</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Fake++">初始化<br>无脑死循环：<br>    处理键盘事件<br>更新游戏内的各种数据<br>unblockedSleep()<br>写入渲染器的缓冲区<br>渲染器渲染<br></code></pre></td></tr></table></figure><p>然后想到这个死循环有停下俩的时候，那就是：游戏失败或者是玩家退出，所以又加上了<code>gameOver</code>和<code>gameExit</code>这俩控制变量，然后在循环之后加上了例如分数记录之类的东西</p><h3 id="贴图实现"><a href="#贴图实现" class="headerlink" title="贴图实现"></a>贴图实现</h3><p>实际上我以前都觉得贴图应该存在一个二维数组里面，但这次我却明白贴图还有多种存储方式。比如我能把一个”山“样的下落物存储在一个一维数组里，把它的贴图当作一个矩形，记录他的宽度，然后一排一排地解析。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Fake++">降维打击前：<br> # <br>###<br>降维打击之后：<br># ### width:3 height:2<br></code></pre></td></tr></table></figure><p>大概是我第一次在显示这个问题上”活脑筋“，其价值足以我写一篇博客来记录  </p><h3 id="双缓冲渲染"><a href="#双缓冲渲染" class="headerlink" title="双缓冲渲染"></a>双缓冲渲染</h3><p>我把双缓冲渲染改成了三个部分：绘制（输出画面）、写入Buffer、Buffer更新<br>以前我会顾虑：到底在哪里使用双缓冲？<br>我突然就敢放下这个顾虑：”只在游戏部分使用不就行了，其他地方根本就不需要双缓冲。“  </p><h4 id="绘制（输出画面）"><a href="#绘制（输出画面）" class="headerlink" title="绘制（输出画面）"></a>绘制（输出画面）</h4><blockquote><p><code>void render()</code></p></blockquote><p>比较用于绘制的Buffer（<code>renderBuffer[DRAWING]</code>）和显示在屏幕上的信息（<code>renderBuffer[SHOWING]</code>），然后到相应的位置去输出不同的部分。用<code>gotoxy()</code>可以解决调用<code>system(&#39;cls&#39;)</code>带来的闪屏问题。</p><h4 id="写入Buffer"><a href="#写入Buffer" class="headerlink" title="写入Buffer"></a>写入Buffer</h4><blockquote><p><code>void renderDraw()</code></p></blockquote><p>这次把所有的绘制都封装到了一个函数<code>renderDraw()</code>里，以前的时候我总是会顾虑”逻辑运算完成了，在哪里绘制啊？？？？？？“。现在我通过gameStart()函数里的总流程，实现了贴图绘制的一个封装，就不用担心”这里是一个绘制，那里是一个绘制“导致混乱的问题、避免在这个问题上继续纠结了。<br><code>renderDraw()</code>会在(dropX,dropY)解析下落物的贴图，并写入<code>renderBuffer[DRAWING]</code>，然后把那些已经固定下来的方块一一对应绘制进buffer</p><h4 id="Buffer更新"><a href="#Buffer更新" class="headerlink" title="Buffer更新"></a>Buffer更新</h4><blockquote><p><code>void renderFresh()</code></p></blockquote><p>比较两个buffer[]，然后把旧的推进新的里去。</p><h3 id="选择选项"><a href="#选择选项" class="headerlink" title="选择选项"></a>选择选项</h3><blockquote><p><code>int makeChoice(char**, int[, char*])</code>函数  </p></blockquote><p>如果直接把做选择这个事情封闭起来，那么其它部分代码就不好实现，所以需要让makeChoice()有一个返回值，便于信息传递，而不是简简单单的去显示个动画。<br>首先，肯定要有个变量<code>choice</code>来记录选择……<br>做选择时会有多个选项，每个选项前都要有其被选中的标志，按下回车键确定，因此采用了分行输出每个选项，每个选项前留出空白，在空白区域用<code>-&gt;</code>表示这是当前选中的选项，以<code>-&gt;</code>的左右移动为其动画效果美化纯文字的界面。<br>所以首先要显示每个选项并留出空白  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; _amo; ++i)<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;   %s\n&quot;</span>, _choice[i]);<br></code></pre></td></tr></table></figure><p>然后就是考虑动效了。既然<code>-&gt;</code>要上下移动和左右移动——尽管不会同时进行——那么我们就得去确定它的移动坐标变化范围。显然该用WindowsAPI获取选项输出后的光标位置。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">HANDLE h = <span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE);<br>CONSOLE_SCREEN_BUFFER_INFO pos;<br><span class="hljs-built_in">GetConsoleScreenBufferInfo</span>(h, &amp;pos);<br></code></pre></td></tr></table></figure><p>简单把<code>-&gt;</code>输出到相应位置十分简单，这里就不讲了。我们直接考虑动效的几个步骤：</p><ol><li>清空旧的绘制图案  </li><li>绘制图案</li></ol><p>清空旧的绘制图案，有如下情况  </p><ul><li>用户改变了选中，旧的<code>-&gt;</code>要清除  </li><li><code>-&gt;</code>移动了，原来位置上的不能再显示了</li></ul><p>考虑到控制台覆盖先前字符的特性，<code>-&gt;</code>自动移动可以由新的图案直接输出覆盖，而用户改变选中，则需要我们把光标放到相应位置并输出足够的空格。当前动画播放到哪一帧，也需要去记录，就用<code>ani</code>吧。<br>而且，不管用户是否按键，我们都要去更新<code>-&gt;</code>的动画。所以我们不能阻塞进程并获取按键信息，<code>conio.h</code>的<code>kbhit()</code>以及我写的伪非阻塞Sleep<code>unblockedSleep()</code>就派上用场了。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Fake++">if kbhit() == 1:<br>    光标移动<br>覆盖旧-&gt;（无论按什么键什么都去覆盖一下，是为了代neng码tou简ge便lan<br>判断按键<br>按w：改变choice<br>按s：改变choice<br>按Enter：return choice<br>光标移动<br>在旧-&gt;上直接覆盖当前的帧的图案<br>unblockedSleep();// 这样能保证延时时间或对用户按键”随叫随到“的相应<br>ani++<br></code></pre></td></tr></table></figure><p>后来在Esc暂停菜单里我用<code>makeChoice()</code>来实现菜单选项，就又在里面加了个选择后”隐藏“菜单的功能，于是又在按下Enter键后的代码里加上了，让<code>makeChoice</code>自己清除自己的的代码<br>一开始考虑的设计是如<code> &gt;Start!</code>的样式，但是测试之后发现不如<code> -&gt;Start!</code>好康，于是就改成了这个  </p>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
      <tag>游戏</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小舱本纪</title>
    <link href="/2021/07/20/%E5%B0%8F%E8%88%B1%E6%9C%AC%E7%BA%AA/"/>
    <url>/2021/07/20/%E5%B0%8F%E8%88%B1%E6%9C%AC%E7%BA%AA/</url>
    
    <content type="html"><![CDATA[<p>小舱里都发生了什么事？</p><span id="more"></span><p>↓看到这张图片的人都能抽到神里↓<br><img src="https://upload-bbs.mihoyo.com/upload/2021/07/20/245327134/32e8d379ecdc173773694240dc5b3ebb_3943520889641554237.jpg?x-oss-process=image//resize,s_500/quality,q_80/auto-orient,0/interlace,1/format,jpg" alt="凌华~~~"></p><h1 id="诞生"><a href="#诞生" class="headerlink" title="诞生"></a>诞生</h1><p>2021年7月19日日暮，zf4h突然会想起自己最早接触的和计算机相关的“语言”是html和css<br>并且自己一直都有一个建站梦，而且2019年还在github上做过博客<br>尽管那个博客因zf4h的学业，不幸夭折，但那份记忆仍然在心底闪耀着独属于自己的光芒<br>恰逢高考之后的风平浪静<br>我的博客，<code>海舟的小舱</code>，诞生了。  </p><h1 id="主题更换"><a href="#主题更换" class="headerlink" title="主题更换"></a>主题更换</h1><ul><li>原来使用的是 <a href="https://github.com/HeskeyBaozi/hexo-theme-lite">Lite</a> ，因为它不支持LaTeX公式，所以，2021年8月16日午换成了 <a href="https://github.com/bollnh/hexo-theme-material">Material</a> 。</li><li>2022.9.16，换成现在的 <a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid</a> 啦！</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>长期更新</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo杂谈</title>
    <link href="/2021/07/20/hexo%E5%8D%9A%E5%AE%A2%E6%9D%82%E8%B0%88/"/>
    <url>/2021/07/20/hexo%E5%8D%9A%E5%AE%A2%E6%9D%82%E8%B0%88/</url>
    
    <content type="html"><![CDATA[<p>写一些写博客时踩过的坑，还有用hexo写博客时常用的东西  </p><span id="more"></span><p>神里镇文<br><img src="https://upload-bbs.mihoyo.com/upload/2021/07/20/184593067/2a03b66fdf1551d53ddbdf8e2fbbba90_3182517286345932096.jpg?x-oss-process=image//resize,s_500/quality,q_80/auto-orient,0/interlace,1/format,jpg"></p><h1 id="一些报错"><a href="#一些报错" class="headerlink" title="一些报错"></a>一些报错</h1><h2 id="Deployer-not-found-git"><a href="#Deployer-not-found-git" class="headerlink" title="Deployer not found: git"></a>Deployer not found: git</h2><p>已经在站点配置文件中写入了</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repository:</span> <span class="hljs-string">git@github.com:jensentsts/jensentsts.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure><p>但是执行<code>hexo d</code>报错<code>ERROR Deployer not found: git</code></p><p><strong>解决方案</strong><br>安装<code>hexo-deployer-git</code>插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>然后就可以愉快地<code>hexo d</code>啦~</p><h1 id="github的坑"><a href="#github的坑" class="headerlink" title="github的坑"></a>github的坑</h1><h2 id="必看！github的url区分大小写的坑"><a href="#必看！github的url区分大小写的坑" class="headerlink" title="必看！github的url区分大小写的坑"></a>必看！github的url区分大小写的坑</h2><p>比如我博客的url就是 <code>https://jensentsts.github.io/</code> 在<code>/</code>后填写的便是目录<br>理论上来讲，<code>/</code>后边的东西不区分大小写<br>但！是！<br>github是区分大小写的！例如<code>link</code>和<code>Link</code>就不是同一个东西<br>因此如果你用主题文件夹里的<code>_config.yml</code>把你的友链页面设为<code>links/index.md</code>，而你在<code>sources/</code>下的对应文件夹名称为<code>Links</code><br>你在<code>loaclhost:4000</code>里能够正常访问友链页面<br>然而当你在github上点击<code>友链</code>，使用<code>https://jensentsts.github.io/links/index.html</code> 去访问你的友链时，github不能给你返回对应的页面，会报404<br>如果你去你的github库里检查，会发现<code>links</code>正在好好地躺在你的库里<br><strong>解决方案</strong>：大小写完全一致，即在主题的<code>_config.yml</code>里的和在<code>sources/</code>下的名称完全一致</p><h2 id="现在的github使用main分支"><a href="#现在的github使用main分支" class="headerlink" title="现在的github使用main分支"></a>现在的github使用main分支</h2><p>写这一条的时间是2021年12月10日，注意信息的时效性<br>以前都是用<code>master</code>作为主分支的，现在默认生成的是<code>main</code>，注意修改你的<code>_config.yml</code></p><h1 id="这里是杂谈"><a href="#这里是杂谈" class="headerlink" title="这里是杂谈"></a>这里是杂谈</h1><h2 id="为文章添加多个标签"><a href="#为文章添加多个标签" class="headerlink" title="为文章添加多个标签"></a>为文章添加多个标签</h2><p>在你的markdown文件头部，也就是俩<code>---</code>之间的部分，添加如下代码：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">tags: [标签1, 标签2, 标签3]<br></code></pre></td></tr></table></figure><p>当然，这样也是可以的：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">tags:<br>-<span class="hljs-emphasis">_标签1_</span><br>-<span class="hljs-emphasis">_标签2_</span><br></code></pre></td></tr></table></figure><p>上面写的<code>_</code>是空格的意思，<code>-</code>和标签后面都必须有一个空格。</p><h2 id="截取文章摘要"><a href="#截取文章摘要" class="headerlink" title="截取文章摘要"></a>截取文章摘要</h2><p>手动在文章合适的位置添加<code>&lt;!--more--&gt;</code>。不同的主题写</p><h2 id="给文章置顶"><a href="#给文章置顶" class="headerlink" title="给文章置顶"></a>给文章置顶</h2><p>简单粗暴的方法：把date改成99999-12-31 23:59:59<br>然后就是使用现成的库  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm uninstall hexo-generator-index --save<br>$ npm install hexo-generator-index-pin-top --save<br></code></pre></td></tr></table></figure><p>然后在你的文章前面的<code>---</code>之间加上<code>top: true</code>即可，比如说：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: 友情链接<br><span class="hljs-section">top: true</span><br><span class="hljs-section">---</span><br></code></pre></td></tr></table></figure><p>如果想直接修改主题的文件，你也可以参考<a href="https://www.jianshu.com/p/42a4efcdf8d7">这篇文章</a></p><h2 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h2><p>我不用草稿……</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new draft 文章名称<br>hexo n draft 文章名称<br></code></pre></td></tr></table></figure><h2 id="记录你的更新时间"><a href="#记录你的更新时间" class="headerlink" title="记录你的更新时间"></a>记录你的更新时间</h2><p>依旧是在.md文件顶头的<code>---</code>之间写<code>updated: 年年年年-月月-日日 时时:分分:秒秒</code></p><h2 id="使用LaTeX"><a href="#使用LaTeX" class="headerlink" title="使用LaTeX"></a>使用LaTeX</h2><p><strong>首先要保证你的主题是支持LaTeX的！！！</strong>你得阅读主题的文档。如果支持，就去找用<code>kramed</code>或者是<code>pandoc</code>的使用<code>mathjax</code>的教程吧<br>我当时配置了两个小时都没成功，最后发现是Lite主题不支持LaTeX……<br>如果你的主题不支持LaTeX，但你又不想换，可以用知乎的开放API……也就是<code>https://www.zhihu.com/equation?tex=[你的LaTeX公式]</code>，效果：<img src="https://www.zhihu.com/equation?tex=%5Cfrac%7B1%7D%7B2%7D" alt="图片挂了QAQ……"><br>当然写进url的公式里的任何<code>\</code>都要转义成%5C<br>因为能支持，所以我才换了<a href="https://github.com/viosey/hexo-theme-material">material</a> 这个主题……。现在让我们来欣赏一下欧拉恒等式吧：<br>$$ e^{i\pi}+1&#x3D;0 $$<br><strong>如果没有写·per_page: true·，记得在.md文件顶部写<code>mathjax: true</code></strong></p><h2 id="插件推荐"><a href="#插件推荐" class="headerlink" title="插件推荐"></a>插件推荐</h2><p>有的主题可能不支持一些插件<br>列出来的yaml代码， 请在根目录下的_config.yml文件里新增该配置<br>专门针对SEO的优化请看<a href="https://www.zdynb.cn/2019/hexo-bi-bei-cha-jian.html#toc-heading-15">这篇文章</a>  </p><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><blockquote><p>npm i hexo-prism-plugin -s</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">prism_plugin:</span><br>  <span class="hljs-attr">mode:</span> <span class="hljs-string">&#x27;preprocess&#x27;</span>    <span class="hljs-comment"># realtime/preprocess</span><br>  <span class="hljs-attr">theme:</span> <span class="hljs-string">&#x27;tomorrow&#x27;</span>     <span class="hljs-comment"># 主题选项</span><br>  <span class="hljs-attr">line_number:</span> <span class="hljs-literal">false</span>    <span class="hljs-comment"># false</span><br>  <span class="hljs-attr">custom_css:</span><br></code></pre></td></tr></table></figure><p>可选主题：</p><blockquote><p>coy,dark,funky,okaidia,solarizedlight,tomorrow,twilight,a11y-dark,atom-dark,<br>base16-ateliersulphurpool.light,cb,darcula,dracula,duotone-dark,duotone-earth,<br>duotone-forest,duotone-light,duotone-sea,duotone-space,ghcolors,hopscotch,<br>material-dark,material-light,material-oceanic,pojoaque,shades-of-purple,<br>synthwave84,vs,xonokai,default,</p></blockquote><h3 id="中文链接转拼音"><a href="#中文链接转拼音" class="headerlink" title="中文链接转拼音"></a>中文链接转拼音</h3><blockquote><p>npm i hexo-permalink-pinyin –save</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">permalink_pinyin:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">separator:</span> <span class="hljs-string">&#x27;-&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="评论emoji表情支持"><a href="#评论emoji表情支持" class="headerlink" title="评论emoji表情支持"></a>评论emoji表情支持</h3><blockquote><p>npm i hexo-filter-github-emojis –save</p></blockquote><p>将markdown中的emoji语法转换为emoji表情  </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">githubEmojis:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">className:</span> <span class="hljs-string">github-emoji</span><br>  <span class="hljs-attr">inject:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">styles:</span><br>  <span class="hljs-attr">customEmojis:</span><br></code></pre></td></tr></table></figure><h3 id="压缩html、css、js、图片"><a href="#压缩html、css、js、图片" class="headerlink" title="压缩html、css、js、图片"></a>压缩html、css、js、图片</h3><blockquote><p>npm i hexo-all-minifier –save</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">all_minifier:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-attr">html_minifier:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">ignore_error:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">exclude:</span><br>  <br><span class="hljs-attr">css_minifier:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">exclude:</span> <br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;*.min.css&#x27;</span><br><br><span class="hljs-attr">js_minifier:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">mangle:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">output:</span><br>  <span class="hljs-attr">compress:</span><br>  <span class="hljs-attr">exclude:</span> <br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;*.min.js&#x27;</span><br><br><span class="hljs-attr">image_minifier:</span> <br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">interlaced:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">multipass:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">optimizationLevel:</span> <span class="hljs-number">2</span><br>  <span class="hljs-attr">pngquant:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">progressive:</span> <span class="hljs-literal">false</span><br><br></code></pre></td></tr></table></figure><h3 id="速度优化"><a href="#速度优化" class="headerlink" title="速度优化"></a>速度优化</h3><p>见博客：<a href="https://blog.csdn.net/fengdi_yuxi/article/details/94402350">Hexo博客之速度优化</a></p><h3 id="一些美化hexo博客的方法"><a href="#一些美化hexo博客的方法" class="headerlink" title="一些美化hexo博客的方法"></a>一些美化hexo博客的方法</h3><ul><li>添加看板娘：<a href="https://jensentsts.github.io/2021/12/10/hexo-kan-ban-niang/">给你的hexo博客添加可可爱爱的看板娘</a></li><li>添加雪花特效：<a href="https://jensentsts.github.io/2021/12/23/xue-hua-te-xiao/">冬天到啦，给你的博客添加雪花特效！</a></li><li>点击后出现文字：<a href="https://www.baidu.com/">我还没写</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>长期更新</tag>
      
      <tag>hexo</tag>
      
      <tag>杂谈</tag>
      
      <tag>坑</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何用hexo搭建博客</title>
    <link href="/2021/07/19/%E5%A6%82%E4%BD%95%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2021/07/19/%E5%A6%82%E4%BD%95%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>蒟蒻渣文笔<br>试着写一下我是如何在windows上用hexo搭建起自己的博客的。。。</p><span id="more"></span><p>建议搭配 <a href="https://jensentsts.github.io/2021/07/20/hexo%E5%8D%9A%E5%AE%A2%E6%9D%82%E8%B0%88/">hexo杂谈</a> 一起阅读。</p><h2 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h2><h3 id="搭建必需"><a href="#搭建必需" class="headerlink" title="搭建必需"></a>搭建必需</h3><blockquote><p>一个github账号<br><a href="https://gitforwindows.org/">git for windows</a> 直接进官网下最新版就行<br><a href="https://nodejs.org/zh-cn/">node.js</a> 同上  </p></blockquote><p>这两个软件都不算大，所以下载起来也不算慢。  </p><h3 id="github"><a href="#github" class="headerlink" title="github"></a>github</h3><h4 id="库"><a href="#库" class="headerlink" title="库"></a>库</h4><p>在github上新建一个名为<code>你的用户名.github.io</code>的库。比如我的用户名为<code>jensentsts</code>，那么我就新建了<code>jensentsts.github.io。</code><br>我们新建的库名必须是<code>你的用户名.github.io</code>，其它的均不会被github识别并建立github page</p><h4 id="SSH-keys"><a href="#SSH-keys" class="headerlink" title="SSH keys"></a>SSH keys</h4><p>SSH是一种网络协议，用于计算机之间的加密登录，比直接用用户名、密码登录要安全。<br>什么，你说手机验证码登录可能更安全？但我们这里是计算机通讯用的登录而不是普通的用户登录啊……<br>言归正传。<br>在此之前我没有配置SSH key，所以我用如下指令生成SSH key文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ssh-keygen -t rsa -C <span class="hljs-string">&quot;邮件地址&quot;</span><br></code></pre></td></tr></table></figure><p>我一开始把C给小写了，这就导致一开始没能成功生成SSH key文件……<br>然后再C盘打开<code>C:\用户\用户名\.ssh0</code>你会找到一个名为<code>id_rsa.pub0</code>的文件。用记事本（我用的是notepad++）打开它，然后复制里面的内容，在github的主页上，进入Settings里面的SSH and GPG keys，点New SSH key。随便取一个title，把那一堆内容复制进key里。<br>然后我们要测试一下SSH是否配置成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ssh -T git@github.com<br></code></pre></td></tr></table></figure><p>提示我们<code>Are you sure you want to continue connecting (yes/no)?</code>，输入yes，然后会看到</p><blockquote><p>Hi jensentsts! You’ve successfully authenticated, but GitHub does not provide shell access.  </p></blockquote><p>说明我们的SSH keys配置成功。然后：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git confg --global user.name <span class="hljs-string">&quot;你的github用户名&quot;</span><br>$ git confg --global user.email <span class="hljs-string">&quot;你的github注册邮箱&quot;</span><br></code></pre></td></tr></table></figure><h3 id="hexo-time"><a href="#hexo-time" class="headerlink" title="hexo time"></a>hexo time</h3><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>安好了git，再开始菜单里找到git bash并启动，然后就是一通npm……<br>npm是一个很常用的指令&amp;工具，随node.js的安装进入你的电脑.<br>下面我们要用npm把hexo安进git里  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install -g hexo<br></code></pre></td></tr></table></figure><p>在电脑里找一个存储你的博客相关内容的文件夹，比如<code>F:\blog</code>，首先cd到这个目录去</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> F:/blog<br></code></pre></td></tr></table></figure><p>然后初始化hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo init<br></code></pre></td></tr></table></figure><p>在此之后，如果你打开<code>F:\blog</code>你就会发现hexo已经为你创建了一堆博客文件。</p><h4 id="hexo创建了什么东西？"><a href="#hexo创建了什么东西？" class="headerlink" title="hexo创建了什么东西？"></a>hexo创建了什么东西？</h4><ul><li>public：存储渲染好的博客网页文件，比如html、css、js和包括图片在内的文件。</li><li>source：资源文件夹，存储了各页面下的markdwown文件。里面的_post就是博客文章0的文件夹.</li><li>scaffolds：模板文件夹，没啥用但是得留着。</li><li>themes：存储了主题，默认主题为landscape。</li><li>node_modules：存储了博客的各种插件，以后我们添加插件时可能会常常访问这个文件夹</li><li>_config.yml：存储博客相关的参数。</li><li>package.json：主要记录你的博客安装的各种东西的版本等信息，不用管</li></ul><p>没有什么特别需求的话，把你用markdown写好的文章丢进<code>./source/_post/</code>里面就好。<del>关于创建别的页面……请您去看别的博客把，我懒得写</del><br>我们可以用如下命令创建一个空白的markdown文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo n <span class="hljs-string">&quot;文章名称&quot;</span><br></code></pre></td></tr></table></figure><p>当然，<code>hexo n</code>是一个简化指令，完整指令是这个：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;文章名称&quot;</span><br></code></pre></td></tr></table></figure><p>完成后我们可以在<code>./source/_post/</code>下找到<code>文章名称.md</code>。聪明的你一定明白它是什么。</p><h4 id="配置-config-yml"><a href="#配置-config-yml" class="headerlink" title="配置_config.yml"></a>配置_config.yml</h4><p>首先用记事本或者是notepad++之类的纯文本编辑器打开<code>./_config.ynl</code></p><h5 id="修改网站名和博客主名"><a href="#修改网站名和博客主名" class="headerlink" title="修改网站名和博客主名"></a>修改网站名和博客主名</h5><p>在<code>./config.yml</code>里找到如下内容并修改</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">title:</span> 网站名<br><span class="hljs-meta"># 其它的一些东西</span><br><span class="hljs-symbol">author:</span> 博客主名<br></code></pre></td></tr></table></figure><h5 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h5><p>上指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> 主题github库的链接 themes/主题名称<br></code></pre></td></tr></table></figure><p>比如我用的就是hexo官网上的Lite主题，那么我的指令便是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> https://github.com/HeskeyBaozi/hexo-theme-lite/ themes/lite/<br></code></pre></td></tr></table></figure><p>然后修改<code>./_config.yml</code>中的<code>theme: landscape</code>改为<code>theme: 主题名称</code>，比如我的<code>theme: lite</code>。  </p><h5 id="修改语言"><a href="#修改语言" class="headerlink" title="修改语言"></a>修改语言</h5><p>有些博客分各种语言版本，所以你需要修改语言设置</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">language</span>: <span class="hljs-keyword">en</span> # <span class="hljs-keyword">en</span>是英语，或者改成是别的<br></code></pre></td></tr></table></figure><h4 id="最后一步"><a href="#最后一步" class="headerlink" title="最后一步"></a>最后一步</h4><p>别忘了，我们写的都是markdown文件，然而我们在浏览器中看到的都是解析好的html文件。<br>所以，我们还需要生成博客网页文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g<br></code></pre></td></tr></table></figure><p>这里的<code>g</code>是<code>generate</code>的简化。这时候我们会发现，在<code>./public/</code>下的<code>index.html</code>并不能打开，这是为什么呢？<br><del>我不知道</del>我们要启动hexo的服务，才能在浏览器上，通过访问<a href="http://localhost:4000/">http://localhost:4000/#/</a>，直接查看我们渲染好的博客。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo s<br></code></pre></td></tr></table></figure><p>同理，<code>s</code>是<code>server</code>的简化。</p><h3 id="上传！"><a href="#上传！" class="headerlink" title="上传！"></a>上传！</h3><h4 id="保留readme-md等文件"><a href="#保留readme-md等文件" class="headerlink" title="保留readme.md等文件"></a>保留readme.md等文件</h4><p>把你的readme.md放到<code>./source/</code>下？这样做确实可以。<br>但由于hexo每次生成时都会把所有.md文件转化为html，你还要手动删掉<code>./public/</code>下的readme.html，所以我的做法是直接把readme.md放到根目录下，每次提交时把readme.md丢进去。<br><del>当然，作为懒人，我现在不带readme.md，等哪天变勤快了，我再加上</del></p><h4 id="上传到github"><a href="#上传到github" class="headerlink" title="上传到github"></a>上传到github</h4><p>先安装一个插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>配置_config.yml中有关deploy的部分：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repository:</span> git@github.com:jensentsts/jensentsts.github.io.git<br><span class="hljs-symbol">  branch:</span> main<br></code></pre></td></tr></table></figure><p>有的教程因为使用了hexo2.x，所以写法和上面不同。请按照如上格式配置，记得把<code>jensentsts</code>替换成你的用户名。<br>分支应为main，GitHub在更新之后不再是master了<br>然后，发射！（<code>d</code>是<code>deploy</code>的简化）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo d<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><h3 id="文献"><a href="#文献" class="headerlink" title="文献"></a>文献</h3><p><a href="https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html">使用hexo+github搭建免费个人博客详细教程</a><br><a href="https://segmentfault.com/a/1190000018237272">简单认识Hexo的目录结构</a>  </p><h3 id="好用的markdown编辑器"><a href="#好用的markdown编辑器" class="headerlink" title="好用的markdown编辑器"></a>好用的markdown编辑器</h3><p><a href="https://www.luogu.com.cn/paste">洛谷云剪切板</a><br>没在洛谷博客上发主要是因为这样才能收获“自己动手，丰衣足食”的满足感</p>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>about</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<ul><li>长沙理工大学，电气专业</li><li>原神+方舟玩家</li><li>喜欢编程、电气、音游</li></ul>]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>links</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
</search>
