<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>doxygen注释规范</title>
    <link href="/2022/12/21/doxygen%E6%B3%A8%E9%87%8A%E8%A7%84%E8%8C%83/"/>
    <url>/2022/12/21/doxygen%E6%B3%A8%E9%87%8A%E8%A7%84%E8%8C%83/</url>
    
    <content type="html"><![CDATA[<p>水博客</p><span id="more"></span><h1 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h1><p>docxygen给定了一种对文档、函数等注释的基本格式，便于开发者和使用者更好地交代和理解模块、功能等的必要信息。<br>下面给出的模板中的关键字并不是固定的，需要哪个就写哪个。</p><h2 id="头文件注释模板"><a href="#头文件注释模板" class="headerlink" title="头文件注释模板"></a>头文件注释模板</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * @brief 摘要</span><br><span class="hljs-comment">  * @file 文件名</span><br><span class="hljs-comment">  * @author 作者</span><br><span class="hljs-comment">  * @version 版本</span><br><span class="hljs-comment">  * @date 文件日期</span><br><span class="hljs-comment">  * @note 注释</span><br><span class="hljs-comment">  * @since 从什么时候开始有这个东西的</span><br><span class="hljs-comment">  */</span><br></code></pre></td></tr></table></figure><h2 id="函数注释模板"><a href="#函数注释模板" class="headerlink" title="函数注释模板"></a>函数注释模板</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * @brief 功能</span><br><span class="hljs-comment">  * @param args 解释参数</span><br><span class="hljs-comment">  * @param argv 解释参数</span><br><span class="hljs-comment">  * @return 返回值意义</span><br><span class="hljs-comment">  * @retval 1 成功</span><br><span class="hljs-comment">  * @retval 0 失败</span><br><span class="hljs-comment">  * @retval -1 异常</span><br><span class="hljs-comment">  * @warning 警告</span><br><span class="hljs-comment">  * @see 例如参考xxx函数</span><br><span class="hljs-comment">  * @note 注释</span><br><span class="hljs-comment">  */</span><br></code></pre></td></tr></table></figure><h1 id="常见关键字"><a href="#常见关键字" class="headerlink" title="常见关键字"></a>常见关键字</h1><ul><li>author 作者信息</li><li>brief 对函数、模块等（其作用和功能的）简易说明</li><li>pre 使用代码项的前提条件</li><li>post 使用代码项之后的条件</li><li>param 函数参数说明</li><li>enum 引用了某个枚举<ul><li>@enum LCD::LCD_Color</li></ul></li><li>var 引用了某个变量<ul><li>@var LCD::LCD_Buffer</li></ul></li><li>class 引用了某个类<ul><li>@class Texture “inc&#x2F;texture.h”</li></ul></li><li>return 返回值情况<ul><li>@return 若成功则返回true，否则返回false</li></ul></li><li>retval 返回值类型<ul><li>@retval NULL 空数组</li><li>@retval !NULL 非空数组</li></ul></li><li>note 注解，比如对<code>@brief</code>的更进一步说明</li><li>todo 就是todo</li><li>attention 注意事项</li><li>warning 警告信息</li><li>exception 可能产生的异常</li><li>bug bug</li><li>code 在注释中开始说明一段代码，直到<code>@endcode</code>为止</li><li>endcode 注释中的代码段的结束</li><li>par 开始一个段落，例如写一段演示代码</li><li>file 文件名，doxygen能自动添加</li><li>date 日期</li><li>since 从哪个版本之后开始有这个模块、文件、函数……</li><li>deprecated 该模块、文件、函数可能在未来的版本中取消</li><li>name 分组名</li></ul><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://blog.csdn.net/weixin_39610366/article/details/111499344">doxygen 注释规范_Doxygen的注释规则</a></p><p><a href="http://blog.csdn.net/wangxvfeng101/article/details/7301115">Doxygen 使用说明</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>用Tweeny实现丝滑动效</title>
    <link href="/2022/12/21/%E7%94%A8Tweeny%E5%AE%9E%E7%8E%B0%E4%B8%9D%E6%BB%91%E5%8A%A8%E6%95%88/"/>
    <url>/2022/12/21/%E7%94%A8Tweeny%E5%AE%9E%E7%8E%B0%E4%B8%9D%E6%BB%91%E5%8A%A8%E6%95%88/</url>
    
    <content type="html"><![CDATA[<p>刘慈欣：“好的程序员不去造轮子。”<br>刘慈欣：“我没说过这句话。”<br>刘慈欣：“我说过这句话。”</p><span id="more"></span><p>说得简单一些……因为我不知道怎么说得专业些</p><h1 id="Tweeny"><a href="#Tweeny" class="headerlink" title="Tweeny"></a>Tweeny</h1><p>简单来说，<code>Tweeny</code>可以用来存储对象<code>transition</code>属性的起始状态、末状态、过渡时间、过渡方式等。<br>我这里是为了单片机开发，在github上找了个<a href="https://github.com/mobius3/tweeny">Tweeny的C++库</a>。</p><h1 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git clone https://github.com/mobius3/tweeny.git<br></code></pre></td></tr></table></figure><h1 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;tweeny/include/tweeny.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">gotoxy</span><span class="hljs-params">(SHORT x, SHORT y)</span></span><br><span class="hljs-function"></span>&#123;<br>    COORD coord;<br>    coord.X = x;<br>    coord.Y = y;<br>    HANDLE h = <span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE);<br>    <span class="hljs-built_in">SetConsoleCursorPosition</span>(h, coord);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 从这里开始看，忽略 Sleep() 和 gotoxy()</span><br>    <span class="hljs-keyword">auto</span> twe = tweeny::<span class="hljs-built_in">from</span>(<span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>).<span class="hljs-built_in">to</span>(<span class="hljs-string">&#x27;W&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>).<span class="hljs-built_in">during</span>(<span class="hljs-number">10</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;Hello&quot;</span>;<br>    <span class="hljs-comment">/*for (char c : twe.step(0))</span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">        cout &lt;&lt; c;</span><br><span class="hljs-comment">        Sleep(20);</span><br><span class="hljs-comment">    &#125;*/</span><br>    <span class="hljs-built_in">Sleep</span>(<span class="hljs-number">100</span>);         <span class="hljs-comment">// 花里胡哨</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i)<br>    &#123;<br>        <span class="hljs-built_in">gotoxy</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);   <span class="hljs-comment">// 花里胡哨</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : twe.<span class="hljs-built_in">step</span>(<span class="hljs-number">1</span>))<br>        &#123;<br>            cout &lt;&lt; c;<br>            <span class="hljs-built_in">Sleep</span>(<span class="hljs-number">20</span>);  <span class="hljs-comment">// 花里胡哨</span><br>        &#125;<br>        <span class="hljs-built_in">Sleep</span>(<span class="hljs-number">100</span>);     <span class="hljs-comment">// 花里胡哨</span><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在上面的代码中，我们实现了这样一个功能：</p><ol><li>输出<code>Hello</code></li><li><code>Hello</code>中的每一个字母开始不停地变化</li><li>最终，<code>Hello</code>变成了<code>World</code></li></ol><p>首先，我们创建了一个<code>tween</code>对象（它叫什么无所谓，auto就完事了_(:з」∠)_），并告诉他：这个过渡效果有5个元素，最开始分别是<code>&#39;H&#39; &#39;e&#39; &#39;l&#39; &#39;l&#39; &#39;o&#39;</code>，最终的值分别是<code>&#39;W&#39; &#39;o&#39; &#39;r&#39; &#39;l&#39; &#39;d&#39;</code>，整个过渡的过程使用<code>整数10</code>来度量。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> twe = tweeny::<span class="hljs-built_in">from</span>(<span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>).<span class="hljs-built_in">to</span>(<span class="hljs-string">&#x27;W&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>).<span class="hljs-built_in">during</span>(<span class="hljs-number">10</span>);<br></code></pre></td></tr></table></figure><p>让我们跳过<code>cout&lt;&lt;</code>下面那段被注释掉的代码。<br><code>cout&lt;&lt;&quot;Hello&quot;</code>将<code>Hello</code>打印到了屏幕上。<br>接下来，我们希望通过<code>差值步进</code>的方式打印每一次步进后的结果。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : twe.<span class="hljs-built_in">step</span>(<span class="hljs-number">1</span>))<br>&#123;<br>    cout &lt;&lt; c;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样的步进一共有10次，所以在外面加上一个循环</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i)<br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : twe.<span class="hljs-built_in">step</span>(<span class="hljs-number">1</span>))<br>    &#123;<br>        cout &lt;&lt; c;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>再搭配上<code>Sleep()</code>和<code>gotoxy()</code>，就能实现想要的效果啦。</p><p>不过，通过<code>cout&lt;&lt;&quot;Hello&quot;</code>的方式实在是太奇怪了，所以我们可以选择每次步进为0，输出最开始的结果，也就是被注释掉的那段代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : twe.<span class="hljs-built_in">step</span>(<span class="hljs-number">0</span>))<br>&#123;<br>    cout &lt;&lt; c;<br>    <span class="hljs-built_in">Sleep</span>(<span class="hljs-number">20</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Step-Further"><a href="#Step-Further" class="headerlink" title="Step Further"></a>Step Further</h1><h2 id="选择过渡函数"><a href="#选择过渡函数" class="headerlink" title="选择过渡函数"></a>选择过渡函数</h2><p>一个简单的线性函数可这样实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">linear</span><span class="hljs-params">(<span class="hljs-type">float</span> p, <span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> (b - a) * p + a;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用<code>via</code>将它添加到Tweeny对象</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> twe = tweeny::<span class="hljs-built_in">from</span>(<span class="hljs-number">0</span>).<span class="hljs-built_in">to</span>(<span class="hljs-number">100</span>).<span class="hljs-built_in">during</span>(<span class="hljs-number">1000</span>).<span class="hljs-built_in">via</span>(linear);<br></code></pre></td></tr></table></figure><p>Tweeny库提供了多种内置过渡函数，<del>但我也不知道从哪儿查看，应该是下面这个网站中的不少吧</del><br>好康的缓动曲线动画可在<a href="http://easings.net/">http://easings.net</a>查看。</p><h2 id="为每个元素单独设置属性"><a href="#为每个元素单独设置属性" class="headerlink" title="为每个元素单独设置属性"></a>为每个元素单独设置属性</h2><p>你只需要在函数里分别一一对应地给出。如果每个元素的属性值都相同，你可以只写一个值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> twe1 = tweeny::<span class="hljs-built_in">from</span>(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">100</span>).<span class="hljs-built_in">to</span>(<span class="hljs-number">10</span>, <span class="hljs-number">100</span>, <span class="hljs-number">1000</span>).<span class="hljs-built_in">during</span>(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>).<span class="hljs-built_in">via</span>(easing::exponentialIn, easing::exponentialInOut, easing::backOut);<br><span class="hljs-keyword">auto</span> twe2 = tweeny::<span class="hljs-built_in">from</span>(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">100</span>).<span class="hljs-built_in">to</span>(<span class="hljs-number">10</span>, <span class="hljs-number">100</span>, <span class="hljs-number">1000</span>).<span class="hljs-built_in">during</span>(<span class="hljs-number">100</span>).<span class="hljs-built_in">via</span>(easing::exponentialInOut);<br></code></pre></td></tr></table></figure><h2 id="添加多段过渡"><a href="#添加多段过渡" class="headerlink" title="添加多段过渡"></a>添加多段过渡</h2><p>多段过度（multipoint）</p><blockquote><p>To allow for that, each call to tween::to adds a new tweening point. Calls to tween::during and tween::via always refer to the last added point:</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> tween = tweeny::<span class="hljs-built_in">from</span>(<span class="hljs-number">0</span>)<br>              .<span class="hljs-built_in">to</span>(<span class="hljs-number">100</span>).<span class="hljs-built_in">during</span>(<span class="hljs-number">500</span>) <span class="hljs-comment">// 0 to 100 during 500</span><br>              .<span class="hljs-built_in">to</span>(<span class="hljs-number">200</span>).<span class="hljs-built_in">during</span>(<span class="hljs-number">100</span>).<span class="hljs-built_in">via</span>(easing::circularOut); <span class="hljs-comment">// 100 to 200 during 100 via circularOut</span><br></code></pre></td></tr></table></figure><h2 id="stepping-amp-seeking-amp-jumping"><a href="#stepping-amp-seeking-amp-jumping" class="headerlink" title="stepping &amp; seeking &amp; jumping"></a>stepping &amp; seeking &amp; jumping</h2><h3 id="step"><a href="#step" class="headerlink" title="step"></a>step</h3><p>就像刚才演示的那样。</p><blockquote><p> Passing a integral quantity (integers) to tween::step will step it in duration units. Passing a float value will step it by a percentage (ranging from 0.0f to 1.0f).</p></blockquote><h4 id="后撤步"><a href="#后撤步" class="headerlink" title="后撤步"></a>后撤步</h4><p><del>后撤步，7777</del><br>使用<code>tween::backward</code></p><h4 id="前进步"><a href="#前进步" class="headerlink" title="前进步"></a>前进步</h4><p>使用<code>tween:forward</code></p><h3 id="seek"><a href="#seek" class="headerlink" title="seek"></a>seek</h3><p>让你跳转到任意你想到达的插值处</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">auto</span> tween = tweeny::from(<span class="hljs-number">0</span>).to(<span class="hljs-number">100</span>).during(<span class="hljs-number">1000</span>);<br><span class="hljs-attribute">tween</span>.seek(<span class="hljs-number">0</span>.<span class="hljs-number">5</span>f);<br></code></pre></td></tr></table></figure><h3 id="jump"><a href="#jump" class="headerlink" title="jump"></a>jump</h3><p>当你使用了多段过度（multipoint），jump可以让你跳转到任意关键点（specific tween point）上</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> tween = tweeny::<span class="hljs-built_in">from</span>(<span class="hljs-number">0</span>).<span class="hljs-built_in">to</span>(<span class="hljs-number">100</span>).<span class="hljs-built_in">during</span>(<span class="hljs-number">100</span>).<span class="hljs-built_in">to</span>(<span class="hljs-number">200</span>).<span class="hljs-built_in">during</span>(<span class="hljs-number">100</span>);<br>tween.<span class="hljs-built_in">jump</span>(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><h2 id="返回值说明"><a href="#返回值说明" class="headerlink" title="返回值说明"></a>返回值说明</h2><p><code>tweeny::step()</code>、<code>tweeny::seek()</code>、<code>tweeny::jump()</code>都有返回值。</p><ul><li>如果你用的是单值（single value），那么它直接该返回什么就返回什么</li><li>如果有多个同类型的值（multiple values of the same type），那么它会返回一个<code>std::array</code>，例如<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> tween = tweeny::<span class="hljs-built_in">from</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>).<span class="hljs-built_in">to</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>).<span class="hljs-built_in">during</span>(<span class="hljs-number">100</span>);<br>std::array&lt;<span class="hljs-type">int</span>, 2&gt; v = tween.<span class="hljs-built_in">step</span>(<span class="hljs-number">10</span>);<br></code></pre></td></tr></table></figure></li><li>如果是不同的类型（multiple types），那么它会安徽一个<code>std::tuple</code>，例如<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> tween = tweeny::<span class="hljs-built_in">from</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1.0f</span>).<span class="hljs-built_in">to</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3.0f</span>).<span class="hljs-built_in">during</span>(<span class="hljs-number">100</span>);<br>std::tuple&lt;<span class="hljs-type">int</span>, <span class="hljs-type">float</span>&gt; v = tween.<span class="hljs-built_in">step</span>(<span class="hljs-number">10</span>);<br></code></pre></td></tr></table></figure></li></ul><p>总而言之，如果是多个元素，那么它的返回值一定可迭代。</p><h1 id="Callbacks"><a href="#Callbacks" class="headerlink" title="Callbacks"></a>Callbacks</h1><p>Tweeny允许用户为<code>step</code>添加回调函数（Callbacks），为特殊点配置可运行的程序。比如，当你播放视频时想要自动跳过片头片尾。<br>回调函数有三种形式：</p><ul><li>如果既需要当前值，又需要操控tween对象<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">stepped</span><span class="hljs-params">(tween&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; &amp; t, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span>;<br><span class="hljs-keyword">auto</span> tween = tweeny::<span class="hljs-built_in">from</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>).<span class="hljs-built_in">to</span>(<span class="hljs-number">100</span>, <span class="hljs-number">200</span>).<span class="hljs-built_in">during</span>(<span class="hljs-number">100</span>).<span class="hljs-built_in">onStep</span>(stepped);<br></code></pre></td></tr></table></figure></li><li>如果只需要操控tween<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">stepped</span><span class="hljs-params">(tween&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; &amp; t)</span></span>;<br><span class="hljs-keyword">auto</span> tween = tweeny::<span class="hljs-built_in">from</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>).<span class="hljs-built_in">to</span>(<span class="hljs-number">100</span>, <span class="hljs-number">200</span>).<span class="hljs-built_in">during</span>(<span class="hljs-number">100</span>).<span class="hljs-built_in">onStep</span>(stepped);<br></code></pre></td></tr></table></figure></li><li>如果只需要获取当前值<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">stepped</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span>;<br><span class="hljs-keyword">auto</span> tween = tweeny::<span class="hljs-built_in">from</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>).<span class="hljs-built_in">to</span>(<span class="hljs-number">100</span>, <span class="hljs-number">200</span>).<span class="hljs-built_in">during</span>(<span class="hljs-number">100</span>).<span class="hljs-built_in">onStep</span>(stepped);<br></code></pre></td></tr></table></figure>回调函数的返回类型通常是布尔型，若返回true，则该函数将从回调函数表中移除(callback list)；若返回false，则保留在队列(queue)中。（我也不知道为什么是队列(queue)，上边没提这事儿，估计和“回调函数列表”是一回事儿）<blockquote><p> The return type of a callback is always boolean. If it returns true, it will be <strong>dismissed</strong> and removed from the callback list. Returning false keeps the callback in the queue.<br>例如：</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">stepped</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x: %d, y: %d\n&quot;</span>, x, y);<br>  <span class="hljs-keyword">if</span> (x == y)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">auto</span> tween = tweeny::<span class="hljs-built_in">from</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>).<span class="hljs-built_in">to</span>(<span class="hljs-number">100</span>, <span class="hljs-number">200</span>).<span class="hljs-built_in">during</span>(<span class="hljs-number">100</span>).<span class="hljs-built_in">onStep</span>(stepped);<br></code></pre></td></tr></table></figure></li></ul><h1 id="Any-functions-usable"><a href="#Any-functions-usable" class="headerlink" title="Any functions usable"></a>Any functions usable</h1><p>只要与接口一致，哪里来的回调函数都能用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ftor</span><br>&#123;<br>  <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function">  </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>&#125;;<br><span class="hljs-keyword">auto</span> tween = tweeny::<span class="hljs-built_in">from</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>).<span class="hljs-built_in">to</span>(<span class="hljs-number">100</span>, <span class="hljs-number">200</span>).<span class="hljs-built_in">during</span>(<span class="hljs-number">100</span>);<br>tween.<span class="hljs-built_in">onStep</span>([](<span class="hljs-type">int</span>, <span class="hljs-type">int</span>) &#123; <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; &#125;); <span class="hljs-comment">// lambdas</span><br>tween.<span class="hljs-built_in">onStep</span>(<span class="hljs-built_in">ftor</span>()); <span class="hljs-comment">// functors</span><br></code></pre></td></tr></table></figure><h1 id="Final"><a href="#Final" class="headerlink" title="Final"></a>Final</h1><blockquote><p>I hope you have fun using Tweeny.</p></blockquote><p>附议。</p>]]></content>
    
    
    <categories>
      
      <category>嵌入式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
      <tag>嵌入式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>STM32定时中断2</title>
    <link href="/2022/12/04/STM32%E5%AE%9A%E6%97%B6%E4%B8%AD%E6%96%AD2/"/>
    <url>/2022/12/04/STM32%E5%AE%9A%E6%97%B6%E4%B8%AD%E6%96%AD2/</url>
    
    <content type="html"><![CDATA[<p>继续跟着 <a href="https://space.bilibili.com/383400717">江科大自化协</a> 学32</p><span id="more"></span><p><img src="/./img/post/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%AE%9A%E6%97%B6%E4%B8%AD%E6%96%AD1/%E5%AE%9A%E6%97%B6%E4%B8%AD%E6%96%AD%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84.png" alt="定时中断的基本结构"></p><h1 id="stm32f10x-tim-h"><a href="#stm32f10x-tim-h" class="headerlink" title="stm32f10x_tim.h"></a>stm32f10x_tim.h</h1><ul><li>TIM_DeInit(TIM_TypeDef*)</li><li>TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef*)</li><li>TIM_TimeBaseInit(TIM_TypeDef*, TIM_TimeBaseInitTypeDef*)：配置时基单元</li><li>TIM_Cmd(TIM_TypeDef*, FunctionalState)：使能&#x2F;失能计数器</li><li>TIM_ITConfig(TIM_TypeDef*, uint16_t, FunctionalState)：中断输出控制</li><li>TIM_InternalClockConfig(TIM_ TypeDef*)：选择内部时钟，</li><li>TIM_ITRXExternalClockConfig(TIM_ TypeDef* ,uint16_t)：选择ITRx其他定时器</li><li>TIM_TIXExternalClockConfig(TIM_ TypeDef* ,uint16_t ,uint16_t ,uint16_t)：选择TIx捕获通道的时钟</li><li>TIM_ETRClockMode1Config(TIM_ TypeDef* , uint16_t ,uint16_t, uint16_ t)：选择外部时钟模式1输入</li><li>TIM_ETRC1ockMode2Config(TIM_ TypeDef* ， uint16_t, uint16_t , uint16_t)：选择外部时钟模式2输入</li><li>一些用于清除中断标志位的函数</li></ul><p>其它的一些函数都是用来单独修改某些设置的，例如<code>TIM_PrescalerConfig()</code>写预分频值。</p><h1 id="示例一"><a href="#示例一" class="headerlink" title="示例一"></a>示例一</h1><p>我们首先来做一个简单的中断程序。<br>配置内部时钟-&gt;设置内部时钟模式-&gt;配置时基单元-&gt;中断输出控制-&gt;配置NVIC<br><img src="/./img/post/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%AE%9A%E6%97%B6%E4%B8%AD%E6%96%AD2/%E5%AE%9A%E6%97%B6%E5%99%A8%E5%AE%9A%E6%97%B6%E4%B8%AD%E6%96%AD.jpg" alt="定时器定时中断"></p><blockquote><p>main.c</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// #includes</span><br><br><span class="hljs-type">uint16_t</span> num;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<br>OLED_Init();<br>Timer_Init();<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)&#123;<br>OLED_ShowNum(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, num, <span class="hljs-number">5</span>);<br>OLED_ShowNum(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, TIM_GetCounter(TIM2), <span class="hljs-number">5</span>);<span class="hljs-comment">// 获取计数器的值</span><br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 中断函数</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">TIM2_IRQHandler</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<br><span class="hljs-keyword">if</span> (TIM_GetItStatus(TIM2, TIM_IT_Update) == SET)&#123;<br>num++;<br>TIM_ClearITPendingBit(TIM2, TIM_IT_Update);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>timer.c</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stm32f10x.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">Timer_Init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<br>RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);<br><span class="hljs-comment">// 定时器初始化</span><br>TIM_InternalClockConfig(TIM2);<span class="hljs-comment">// 选择内部时钟（定时器上电后默认用内部时钟,可省略）</span><br>TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;<br>TIM_TimeBaseInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;<span class="hljs-comment">// 指定时钟分频 - 滤波器的参数 &amp;&amp; 信号延迟 &amp;&amp; 极性</span><br>TIM_TimeBaseInitStructure.TIM_CounterMode = TIM_CounterMode_Up;<span class="hljs-comment">// 计数器模式（向上计数）</span><br>TIM_TimeBaseInitStructure.TIM_Period = <span class="hljs-number">10000</span> - <span class="hljs-number">1</span>;<span class="hljs-comment">// 自动重装器的值（“周期”），-1由公式得来</span><br>TIM_TimeBaseInitStructure.TIM_Prescaler = <span class="hljs-number">7200</span> - <span class="hljs-number">1</span>;<span class="hljs-comment">// 预分频器，-1由公式得来（在10KHz下记1w个数）</span><br>TIM_TimeBaseInitStructure.TIM_RepetitionCounter = <span class="hljs-number">0</span>;<span class="hljs-comment">// 重复计数器</span><br>TIM_TimeBaseInit(TIM2, &amp;TIM_TimeBaseInitStructure);<br><br>TIM_ClearFlag(TIM2, TIM_FLAG_Update);<span class="hljs-comment">// 手动清除更新中断标志位</span><br><br><span class="hljs-comment">// 使能中断</span><br>TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);<span class="hljs-comment">// 开启更新中断到NVIC的通路</span><br><span class="hljs-comment">// NVIC</span><br>NVIC_PeriorityGroupConfig(NVIC_PriorityGroup_2);<br>NVIC_InitTypeDef NVIC_InitStructure;<br>NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;<span class="hljs-comment">// 选择中断通道</span><br>NVIC_InitStructure.NVIC_IRQChanneCmd = ENABLE;<span class="hljs-comment">// 中断通道是使能还是失能</span><br>NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="hljs-number">2</span>;<span class="hljs-comment">// 抢占优先级</span><br>NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="hljs-number">1</span>;<span class="hljs-comment">// 响应优先级</span><br>NVIC_Init(&amp;NVIC_InitStructure);<br><span class="hljs-comment">// 启动定时器</span><br>TIM_Cmd(TIM2, ENABLE);<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">// 中断函数</span><br><span class="hljs-comment">void TIM2_IRQHandler(void)&#123;</span><br><span class="hljs-comment">if (TIM_GetItStatus(TIM2, TIM_IT_Update) == SET)&#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">TIM_ClearITPendingBit(TIM2, TIM_IT_Update);</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>这里有一些需要注意的问题</p><div class="note note-warning">            <p>TIM_TimeBaseInit()在调用的最后会生成一个更新事件，目的是更新我们初始化的值，但这样会导致上电后直接就进一次中断。<br>调用TIM_ClearFlag(TIMx, TIM_FLAG_Update);即可解决此问题</p>          </div><h1 id="示例二"><a href="#示例二" class="headerlink" title="示例二"></a>示例二</h1><p><img src="/./img/post/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%AE%9A%E6%97%B6%E4%B8%AD%E6%96%AD2/%E5%AE%9A%E6%97%B6%E5%99%A8%E5%A4%96%E9%83%A8%E6%97%B6%E9%92%9F.jpg" alt="定时器外部时钟"></p><blockquote><p>main.c</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// #includes</span><br><br><span class="hljs-type">uint16_t</span> num;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<br>OLED_Init();<br>Timer_Init();<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)&#123;<br>OLED_ShowNum(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, Timer_GetCounter(), <span class="hljs-number">5</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>timer.c</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stm32f10x.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">Timer_Init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<br>RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);<br>RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);<br><br>GPIO_InitTypeDef GPIO_InitStructure;<br>GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;<br>GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;<br>GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;<br>GPIO_Init(GPIOA, &amp;GPIO_InitStructure);<br><br><span class="hljs-comment">// 定时器初始化</span><br>TIM_ETRClockMode2Config(TIM2, TIM_ExtTRGPSC_OFF, TIM_ExtTRGPolarity_NonInverted, <span class="hljs-number">0x00</span>);<span class="hljs-comment">// 上升沿/高电平，不用滤波器</span><br>TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;<br>TIM_TimeBaseInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;<span class="hljs-comment">// 指定时钟分频 - 滤波器的参数 &amp;&amp; 信号延迟 &amp;&amp; 极性</span><br>TIM_TimeBaseInitStructure.TIM_CounterMode = TIM_CounterMode_Up;<span class="hljs-comment">// 计数器模式（向上计数）</span><br>TIM_TimeBaseInitStructure.TIM_Period = <span class="hljs-number">10</span> - <span class="hljs-number">1</span>;<span class="hljs-comment">// 自动重装器的值（“周期”），-1由公式得来</span><br>TIM_TimeBaseInitStructure.TIM_Prescaler = <span class="hljs-number">1</span> - <span class="hljs-number">1</span>;<span class="hljs-comment">// 预分频器，-1由公式得来（在10KHz下记1w个数）</span><br>TIM_TimeBaseInitStructure.TIM_RepetitionCounter = <span class="hljs-number">0</span>;<span class="hljs-comment">// 重复计数器</span><br>TIM_TimeBaseInit(TIM2, &amp;TIM_TimeBaseInitStructure);<br><br>TIM_ClearFlag(TIM2, TIM_FLAG_Update);<span class="hljs-comment">// 手动清除更新中断标志位</span><br><br><span class="hljs-comment">// 使能中断</span><br>TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);<span class="hljs-comment">// 开启更新中断到NVIC的通路</span><br><span class="hljs-comment">// NVIC</span><br>NVIC_PeriorityGroupConfig(NVIC_PriorityGroup_2);<br>NVIC_InitTypeDef NVIC_InitStructure;<br>NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;<span class="hljs-comment">// 选择中断通道</span><br>NVIC_InitStructure.NVIC_IRQChanneCmd = ENABLE;<span class="hljs-comment">// 中断通道是使能还是失能</span><br>NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="hljs-number">2</span>;<span class="hljs-comment">// 抢占优先级</span><br>NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="hljs-number">1</span>;<span class="hljs-comment">// 响应优先级</span><br>NVIC_Init(&amp;NVIC_InitStructure);<br><span class="hljs-comment">// 启动定时器</span><br>TIM_Cmd(TIM2, ENABLE);<br>&#125;<br><br><span class="hljs-type">uint16_t</span> <span class="hljs-title function_">Timer_GetCounter</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<br><span class="hljs-keyword">return</span> TIM_GetCounter(TIM2);<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">// 中断函数</span><br><span class="hljs-comment">void TIM2_IRQHandler(void)&#123;</span><br><span class="hljs-comment">if (TIM_GetItStatus(TIM2, TIM_IT_Update) == SET)&#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">TIM_ClearITPendingBit(TIM2, TIM_IT_Update);</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>嵌入式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>嵌入式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>STM32定时中断1</title>
    <link href="/2022/12/03/STM32%E5%AE%9A%E6%97%B6%E4%B8%AD%E6%96%AD1/"/>
    <url>/2022/12/03/STM32%E5%AE%9A%E6%97%B6%E4%B8%AD%E6%96%AD1/</url>
    
    <content type="html"><![CDATA[<p>继续跟着 <a href="https://space.bilibili.com/383400717">江科大自化协</a> 学习STM32。多图杀猫警告。</p><span id="more"></span><div class="note note-warning">            <p><strong>注意</strong>：<br>有的定时器使用APB1，有的定时器使用APB2</p>          </div><h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><p>TIM（Timer）定时器<br>16位计数器、预分频器（Pre-Scaler）、自动重装寄存器的时基单元，在72MHz计数时钟下可以实现最大59.65s的定时<br>如果觉得定时器时间不够，可以用定时器级联，最大定时时间将会变为$59.65*65536^2$<br>还不够？还可以再级联一个……最大定时时常变为<strong>几亿年</strong>……</p><p>定时器分为高级定时器、通用定时器、基本定时器三中类型：<br><img src="/./img/post/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%AE%9A%E6%97%B6%E4%B8%AD%E6%96%AD1/%E5%AE%9A%E6%97%B6%E5%99%A8%E7%B1%BB%E5%9E%8B.png" alt="定时器类型"><br>对于<code>STM32F103C8T6</code>而言，它拥有TIM1、TIM2、TIM3、TIM4<br><img src="/./img/post/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%AE%9A%E6%97%B6%E4%B8%AD%E6%96%AD1/%E5%AE%9A%E6%97%B6%E4%B8%AD%E6%96%AD%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84.png" alt="定时中断的基本结构"></p><h1 id="细谈定时器"><a href="#细谈定时器" class="headerlink" title="细谈定时器"></a>细谈定时器</h1><h2 id="如何看图"><a href="#如何看图" class="headerlink" title="如何看图"></a>如何看图</h2><p>带有“影子”的寄存器，都是带有缓冲寄存器的寄存器。</p><h3 id="缓冲寄存器？"><a href="#缓冲寄存器？" class="headerlink" title="缓冲寄存器？"></a>缓冲寄存器？</h3><p><code>缓冲寄存器</code>又名<code>影子寄存器</code><br>有了缓冲寄存器，只有当更新事件发生时，寄存器本体才会将自己的值更新为缓冲寄存器中写入的值。<br>用不用缓冲寄存器可以设置。<br>通过设置ARPE位，可以选择是否使用预装功能。</p><h2 id="基本定时器"><a href="#基本定时器" class="headerlink" title="基本定时器"></a>基本定时器</h2><p><img src="/./img/post/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%AE%9A%E6%97%B6%E4%B8%AD%E6%96%AD1/%E5%9F%BA%E6%9C%AC%E5%AE%9A%E6%97%B6%E5%99%A8.png" alt="基本定时器"><br>PSC、CNT、自动重装载寄存器构成了<strong>时基单元</strong>。时基单元由内部时钟（单片机上的晶振）提供信号，通过分频器不断输出高电平信号使得CNT自增加一。</p><div class="note note-warning">            <p>实际分频系数&#x3D;预分频器系数+1</p>          </div><p>CNT是16位的。<br>自动重装寄存器（ARR，Auto Reload Register）：写入的计数目标。<br>当CNT&#x3D;自动重装值时，CNT清零，并会产生一个中断，这个中断成为更新中断，发往NVIC。用带折线箭头的UI来表示这一中断信号。同时还会产生一个更新事件，可以触发内部其他电路的工作。<br>基本定时器的主从模式触发，能在不受程序的控制下运行。</p><p>例如，主模式触发DAC，可以利用更新事件，让更新信号传输到<strong>TRGO（Trigger Out）</strong>的位置，TRGO接到DAC的触发引脚上，进行转换。不需要软件参与，不干扰正常程序的运行，也不会影响到其它中断。</p><h2 id="通用定时器"><a href="#通用定时器" class="headerlink" title="通用定时器"></a>通用定时器</h2><p><img src="/./img/post/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%AE%9A%E6%97%B6%E4%B8%AD%E6%96%AD1/%E9%80%9A%E7%94%A8%E5%AE%9A%E6%97%B6%E5%99%A8.png" alt="通用定时器"><br>通用定时器的时基单元与基本定时器相同。<br>计数器的技术模式不止<strong>向上计数</strong>这一种。还有<strong>向下计数</strong>、<strong>中央对齐模式</strong>。</p><ul><li>向下计数：从自动重装寄存器的值开始，当高电平计数信号（时钟信号）输入时，计数器减一</li><li>中央对齐模式：（计数信号&#x2F;时钟信号不断输入时）CNT从0开始增加，到自动重装寄存器的值时触发中断和事件，然后开始减少，回到0时又会触发一次中断和事件，然后再开启下一轮循环。</li></ul><h3 id="定时中断、内外时钟源、触发输入"><a href="#定时中断、内外时钟源、触发输入" class="headerlink" title="定时中断、内外时钟源、触发输入"></a>定时中断、内外时钟源、触发输入</h3><p>如果选择外部时钟，那么时钟信号需要通过ETR引脚输入。也可以通过CH1引脚的边沿（Edge）获得时钟。<br>如果需要触发输入，那么应该用TRGI。当然，时钟级联也可以走这条通道。<br>如果要时钟级联：<br>初始化TIM3为主模式，将它的更新事件映射到TRGO上；然后初始化TIM2，选择ITR2，选择外部时钟模式1，并让对应TIM3的TRGO。<br>始终还可以通过TI1FPn获得（如TI1FP1）。TI1FP1（2）可以读取正交编码器的输出波形。</p><div class="note note-info">            <p>复杂的电路主要是为了扩展和方便一些特殊的使用场景<br>外部时钟通过ETR引脚输出即可</p>          </div><h3 id="输入捕获和输出比较寄存器"><a href="#输入捕获和输出比较寄存器" class="headerlink" title="输入捕获和输出比较寄存器"></a>输入捕获和输出比较寄存器</h3><p><code>捕获/比较n寄存器</code>左侧是输入捕获电路，右侧是输出比较电路。<br>有四个接口：CH1~CH4<br>输入捕获和输出比较不能同时使用，所以输出接口共用。</p><h2 id="高级定时器"><a href="#高级定时器" class="headerlink" title="高级定时器"></a>高级定时器</h2><p><img src="/./img/post/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%AE%9A%E6%97%B6%E4%B8%AD%E6%96%AD1/%E9%AB%98%E7%BA%A7%E5%AE%9A%E6%97%B6%E5%99%A8.png" alt="高级定时器"><br>和通用寄存器大部分相似。<br>加了个重复次数计数器，可以实现每隔几个计数周期去发生一次更新或中断。相当于对计数器的输出分了一次频。<br>右侧添加了几个互补的输出接口，能输出相反的PWM波。三相无刷电机狂喜。</p><p><strong>DTG（Dead Time Generate，死区生成器）</strong>：为了防止直通现象，在CHn开关的一瞬间，产生一定时长的死区，使得这对互补的引脚都关闭，防止直通现象。<br>刹车输入：给电机驱动提供安全保障，若BKIN输入，或内部时钟失效，则会自动切断输出，保护电机驱动。</p><h1 id="时序"><a href="#时序" class="headerlink" title="时序"></a>时序</h1><h2 id="预分频器时序"><a href="#预分频器时序" class="headerlink" title="预分频器时序"></a>预分频器时序</h2><p>即使预分频制寄存器从0变成了1，STM32的分频器也要等到触发更新事件后才会改变分频系数。<br>也就是说，当触发更新事件后，改变后的分频值才会起作用。<br><img src="/./img/post/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%AE%9A%E6%97%B6%E4%B8%AD%E6%96%AD1/%E9%A2%84%E5%88%86%E9%A2%91%E5%99%A8%E6%97%B6%E5%BA%8F.png" alt="预分频器时序"></p><p>计数器技术频率：<br>$$CK_{CNT} &#x3D; \frac{CK_{PSC}}{PSC+1}$$<br>就是前面的那条Warning</p><h2 id="计时器时序"><a href="#计时器时序" class="headerlink" title="计时器时序"></a>计时器时序</h2><div class="note note-warning">            <p>更新中断会带带有更新中断标志（UIF），记得Clear一下</p>          </div><p><img src="/./img/post/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%AE%9A%E6%97%B6%E4%B8%AD%E6%96%AD1/%E8%AE%A1%E6%97%B6%E5%99%A8%E6%97%B6%E5%BA%8F.png" alt="计时器时序"><br>计数器溢出频率：<br>$$CK_{CNT-OV} &#x3D; \frac{CK_{CNT}}{ARR+1} &#x3D; \frac{CK_{PSC}}{PSC+1} \div (ARR+1)$$<br>这就不得不要提一下计数器无预装时序和有预装时序了</p><h3 id="无预装时序"><a href="#无预装时序" class="headerlink" title="无预装时序"></a>无预装时序</h3><p>咕咕咕，我就放个图片<br><img src="/./img/post/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%AE%9A%E6%97%B6%E4%B8%AD%E6%96%AD1/%E6%97%A0%E9%A2%84%E8%A3%85%E6%97%B6%E5%BA%8F.png" alt="无预装时序"></p><h3 id="有预装时序"><a href="#有预装时序" class="headerlink" title="有预装时序"></a>有预装时序</h3><p>咕咕咕，我再放个图片<br><img src="/./img/post/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%AE%9A%E6%97%B6%E4%B8%AD%E6%96%AD1/%E6%9C%89%E9%A2%84%E8%A3%85%E6%97%B6%E5%BA%8F.png" alt="有预装时序"></p><h1 id="RCC时钟树"><a href="#RCC时钟树" class="headerlink" title="RCC时钟树"></a>RCC时钟树</h1><p>来看看RCC时……我滴妈耶！<br><img src="/./img/post/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%AE%9A%E6%97%B6%E4%B8%AD%E6%96%AD1/RCC%E6%97%B6%E9%92%9F%E6%A0%91.png" alt="RCC时钟树"><br>但是感谢ST，他们封装了函数<code>SystemInit()</code>！</p><h2 id="时钟安全系统"><a href="#时钟安全系统" class="headerlink" title="时钟安全系统"></a>时钟安全系统</h2><p>简称CSS（Clock Security System），负责切换时钟，监测外部时钟的运行状态，如果外部的失效，自动切换成内部的。<br>在刹车输入时，也有CSS的身影。</p><div class="note note-warning">            <p>如果你发现自己的计时器满了大概十倍左右，那么可能是外部72MHz晶振失效了，系统自动启用了内部的8MHz晶振</p>          </div><h2 id="时钟分频电路"><a href="#时钟分频电路" class="headerlink" title="时钟分频电路"></a>时钟分频电路</h2><p>72MHz进入AHB总线，AHB有个预分频器，在SystemInit里配置的分配系数为1，则AHB的时钟就是72MHz，然后进入RPB1总线，这里配置的分频系数是2，则这里的频率是72&#x2F;2&#x3D;36MHz。<br>但是！下面有个支路——若干APB与分频系数&#x3D;1，则频率不变，否则频率×2。这条支路单独为TIM2~7开通<br>因此，无论是何种计时器，频率都是72MHz（如果SystemInit中的默认配置没有改的话……）</p><h2 id="RCC-APBxxxPeriphClockCmd"><a href="#RCC-APBxxxPeriphClockCmd" class="headerlink" title="RCC_APBxxxPeriphClockCmd"></a>RCC_APBxxxPeriphClockCmd</h2><p>代码中的RCC_APB1&#x2F;2PeriphClockCmd作用的地方就是图中的<code>外设时钟使能</code>。</p><h2 id="其他部分"><a href="#其他部分" class="headerlink" title="其他部分"></a>其他部分</h2><p>还有给ADC、SDIO提供时钟的电路，在AHB后边那一堆的上部。</p>]]></content>
    
    
    <categories>
      
      <category>嵌入式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>嵌入式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>STM32常用资料</title>
    <link href="/2022/12/03/STM32%E5%B8%B8%E7%94%A8%E8%B5%84%E6%96%99/"/>
    <url>/2022/12/03/STM32%E5%B8%B8%E7%94%A8%E8%B5%84%E6%96%99/</url>
    
    <content type="html"><![CDATA[<p>写一篇，方便查。</p><span id="more"></span><p>有的来自UP主 <a href="https://space.bilibili.com/383400717">江科大自化协</a> 的课件。</p><h1 id="GPIO"><a href="#GPIO" class="headerlink" title="GPIO"></a>GPIO</h1><p><img src="/./img/post/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%B8%B8%E7%94%A8%E8%B5%84%E6%96%99/GPIO%E6%A8%A1%E5%BC%8F.png" alt="GPIO模式"><br><img src="/./img/post/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%B8%B8%E7%94%A8%E8%B5%84%E6%96%99/%E6%B5%AE%E7%A9%BA%E3%80%81%E4%B8%8A%E6%8B%89%E3%80%81%E4%B8%8B%E6%8B%89%E8%BE%93%E5%85%A5.png" alt="浮空、上拉、下拉输入"><br><img src="/./img/post/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%B8%B8%E7%94%A8%E8%B5%84%E6%96%99/%E5%A4%8D%E7%94%A8%E5%BC%80%E6%BC%8F%E3%80%81%E6%8E%A8%E6%8C%BD%E8%BE%93%E5%87%BA.png" alt="复用开漏、推挽输出"><br><img src="/./img/post/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%B8%B8%E7%94%A8%E8%B5%84%E6%96%99/%E5%BC%80%E6%BC%8F%E3%80%81%E6%8E%A8%E6%8C%BD%E8%BE%93%E5%87%BA.png" alt="开漏、推挽输出"><br><img src="/./img/post/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%B8%B8%E7%94%A8%E8%B5%84%E6%96%99/%E6%A8%A1%E6%8B%9F%E8%BE%93%E5%85%A5.png" alt="模拟输入"></p>]]></content>
    
    
    <categories>
      
      <category>嵌入式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>长期更新</tag>
      
      <tag>嵌入式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>stm32中断</title>
    <link href="/2022/12/03/stm32%E4%B8%AD%E6%96%AD%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/12/03/stm32%E4%B8%AD%E6%96%AD%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>比起51，32的中断类型更为丰富和细腻。</p><span id="more"></span><h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><h2 id="STM32中断"><a href="#STM32中断" class="headerlink" title="STM32中断"></a>STM32中断</h2><p>STM32的中断有$16$个优先等级，可以设置抢占优先级和响应优先级。理论上有$68$种中段线路，具体取决于手册给出。<br>当中断来临时，由硬件自动调用相关函数。中断的类型既有内核的中断，例如复位、硬件失效等；也有外设的中断，如看门狗、PVD等等。<br>中断向量表由编译器给出。<br>当有多个外设同时触发中断时，<strong>中断机制</strong>会将这些触发<strong>排队</strong>或是<strong>嵌套</strong>。</p><h2 id="NVIC"><a href="#NVIC" class="headerlink" title="NVIC"></a>NVIC</h2><p>管理32中断的系统：<strong>NVIC（嵌套中断向量控制器）</strong></p><div class="note note-info">            <p>统一分配中断优先级和管理中断。是内核的外设。<br>NVIC按优先级处理中断，告诉CPU当前应该处理哪个中断。<br>CPU不知道中断优先级——除非谁告诉了它。</p>          </div><p>NVIC既管理中断的“排队”，也负责中断的嵌套。<br>NVIC的中断优先级由优先级寄存器的$4$位$(0-15)$决定，这四位可以进行切分，分为高$n$位抢占优先级和低$4-n$位的响应优先级</p><p><img src="/./img/post/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E4%B8%AD%E6%96%AD%E7%AC%94%E8%AE%B0/NVIC%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84.png" alt="NVIC基本结构"></p><h2 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h2><p>抢占优先级和响应优先级相同的，按中断号进行排序</p><h3 id="抢占优先级"><a href="#抢占优先级" class="headerlink" title="抢占优先级"></a>抢占优先级</h3><div class="note note-info">            <p>pre-emption priority</p>          </div><p>抢占优先级高的可以中断嵌套</p><h3 id="响应优先级"><a href="#响应优先级" class="headerlink" title="响应优先级"></a>响应优先级</h3><div class="note note-info">            <p>subpriority</p>          </div><p>响应优先级高的可以优先排队</p><h1 id="EXTI简介"><a href="#EXTI简介" class="headerlink" title="EXTI简介"></a>EXTI简介</h1><p><strong>EXTI（Extern Interrupt）外部中断</strong>可以监测制定GPIO口的电平信号，档期制定的GPIO口产生电平变化时，EXTI将立即向NVIC发出终端申请，经过NVIC裁决后即可中断CPU主程序，使CPU执行EXTI对应的中断程序。</p><ul><li>支持的触发方式：上升沿&#x2F;下降沿&#x2F;双边沿&#x2F;软件触发</li><li>支持的GPIO口：所有的GPIO口，但相同的GPIO_Pin不能同时触发中断。例如PA0和PB0不能同时选为中断引脚。</li><li>通道数：16个GPIO_Pin，PVD输出，RTC闹钟、USB唤醒、以太网唤醒<br>在省电模式的停止模式下，需要借助外部中断唤醒STM32<br><img src="/./img/post/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E4%B8%AD%E6%96%AD%E7%AC%94%E8%AE%B0/EXTI.png" alt="EXTI电路图"></li></ul><h2 id="触发响应方式"><a href="#触发响应方式" class="headerlink" title="触发响应方式"></a>触发响应方式</h2><p>中断响应&#x2F;事件响应<br>如果选择事件响应，那么当引脚电平变化时，将不会触发中断，而是触发别的外设操作（例如由PVC触发ADC），属于外设之间的联合工作。</p><h2 id="EXTI基本结构"><a href="#EXTI基本结构" class="headerlink" title="EXTI基本结构"></a>EXTI基本结构</h2><p>GPIOn连接着<strong>AFIO（中断引脚选择）</strong>这个数据选择器，在各个Pin中选择一个连接到EXTI的通道上去。<br>再由EXTI边沿检测和控制电路上。<br>PVD、RTC、USB、ETH并接在EXTI边沿检测和控制电路上。<br>之后分为两种电路，一种连到NVIC上。外部中断的5<del>9和15</del>10会触发同一个中断函数<del>（ST偷工减料）</del>。<br>另有20条线路接到其它外设上，用来触发其它外设操作（事件响应）。<br>AFIO主要功能是引脚重映射、中断引脚选择等功能。<br>具体电路图如下：<br><img src="/./img/post/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E4%B8%AD%E6%96%AD%E7%AC%94%E8%AE%B0/AFIO%E5%A4%8D%E7%94%A8IO%E5%8F%A3.png" alt="AFIO"></p><h2 id="AFIO相关的函数"><a href="#AFIO相关的函数" class="headerlink" title="AFIO相关的函数"></a>AFIO相关的函数</h2><p>在<code>stm32f10x.h</code>中</p><ul><li>GPIO_AFIODeInit()：清除AFIO有关的设置</li><li>GPIO_PinLockConfig(GPIO_TypeDef*, uin16_t)：没啥大用</li><li>GPIO_EventOutputConfig(uint8_t, uint8_t)：配置AFIO事件输出功能</li><li>GPIO_EventOutputCmd(FunctionalState)：配置AFIO事件输出功能</li><li>GPIO_PinRemapConfig(uint32_t, FunctionalState)：进行引脚重映射</li><li>GPIO_EXTILineConfig(uint8_t, uint8_t)：配置AFIO的数据选择器，选择需要的中断引脚</li><li>GPIO_ETH_MediaInterfaceConfig(uint32_t)：与以太网外设有关</li></ul><p>在<code>stm32f10x_exti.h</code>中</p><ul><li>EXTI_DeInit()</li><li>EXTI_Init(EXTI_InitTypeDef*)</li><li>EXTI_StructInit(EXTI_InitTypeDef*)：获得配置信息结构体</li><li>EXTI_GenerateSWInterrupt(uint32_t)：软件触发外部中断，参数是一个指定的中断线</li><li>EXTI_GetFlagStatus(uint32_t)：获取指定的标志位</li><li>EXTI_ClearFlag(uin32_t)：清除标志位</li><li>EXTI_GetITStatus(uint32_t)：（在中断函数中）获取与中断有关的标志位</li><li>EXTI_ClearITPendingBit()：（在中断函数中）清除与中断有关的标志位<br>其中，<code>外设_Init()</code>、<code>外设_StructInit()</code>等在各种外设里都有类似的存在。</li></ul><h2 id="NVIC相关函数"><a href="#NVIC相关函数" class="headerlink" title="NVIC相关函数"></a>NVIC相关函数</h2><p>在<code>misc.h</code>中（<code>怎么被发配到杂项里去了</code>）</p><ul><li>NVIC_PriorityGroupConfig(uint32_t)：用于中断分组</li><li>NVIC_Init(NVIC_InitTypeDef)</li><li>NVIC_SetVectorTable(uint32_t, uin32_t)</li><li>NVIC_SystemLPConfig(uint8_t, FunctionalState)</li><li>SysTick_CLKSourceConfig()</li></ul><div class="note note-warning">            <p>中断分组方式整个芯片只能用一种，NVIC_PriorityGroupConfig()调用一次即可。<br>若多次调用，请保证所有的调用作出同样的分组。</p>          </div><h1 id="一些实例"><a href="#一些实例" class="headerlink" title="一些实例"></a>一些实例</h1><p>这里使用了 <a href="https://space.bilibili.com/383400717">江科大自化协</a> 的例子，通过OLED显示屏显示结果</p><h2 id="对射式红外传感器计次"><a href="#对射式红外传感器计次" class="headerlink" title="对射式红外传感器计次"></a>对射式红外传感器计次</h2><p>电路连接图如下<br><img src="/./img/post/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E4%B8%AD%E6%96%AD%E7%AC%94%E8%AE%B0/%E5%AF%B9%E5%B0%84%E5%BC%8F%E7%BA%A2%E5%A4%96%E4%BC%A0%E6%84%9F%E5%99%A8%E8%AE%A1%E6%AC%A1.jpg" alt="面包板接线图"><br>上代码！</p><blockquote><p>main.c</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stm32f10x.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;OLED.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;CountSensor.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;delay.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<br>OLED_Init();<br>CounterSensor_Init();<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)&#123;<br>OLED_ShowNum(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, CountSensor_Get());<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>CounterSensor.c</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stm32f10x.h&quot;</span></span><br><br><span class="hljs-type">uin16_t</span> CounterSensor_Count = <span class="hljs-number">0</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">CounterSensor_Init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<br>RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);<br>RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);<span class="hljs-comment">// AFIO属于APB2. 开启AFIO的时钟</span><br><span class="hljs-comment">// EXTI和NVIC的时钟一直开着</span><br><span class="hljs-comment">// RCC位于内核之外，管不到NVIC</span><br>GPIO_InitTypeDef GPIO_InitStructure;<br>GPIO_InitStructure.GPIO+Mode = GPIO_Mode_IPU;<br>GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;<br>GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;<br>GPIO_Init(GPIOB, &amp;GPIO_InitStructure);<br><br>GPIO_EXTILineConfig(GPIO_PortSourceGPIOB, GPIO_PinSource14);<span class="hljs-comment">// PB14</span><br><br>EXTI_InitTypeDef EXTI_InitStructure;<br>EXTI_InitStructure.EXTI_Line = EXTI_Line14;<br>EXTI_InitStructure.EXTI_LineCmd = ENABLE;<br>EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;<br>EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;<span class="hljs-comment">// 下降沿触发</span><br>EXTI_Init(&amp;EXTI_InitStructure);<br><br>NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);<span class="hljs-comment">// 注意：分组方式整个芯片只能用一种。最好放在main那里</span><br>NVIC_InitTypeDef NVIC_InitStructure;<br>NVIC_InitStructure.NVIC_IRQChannel = EXTI15_10_IRQn;<span class="hljs-comment">// 选择中断通道</span><br>NVIC_InitStructure.NVIC_IRQChanneCmd = ENABLE;<span class="hljs-comment">// 中断通道是使能还是失能</span><br>NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="hljs-number">1</span>;<span class="hljs-comment">// 抢占优先级</span><br>NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="hljs-number">1</span>;<span class="hljs-comment">// 响应优先级</span><br>NVIC_Init(&amp;NVIC_InitStructure);<br>&#125;<br><br><span class="hljs-type">uin16_t</span> <span class="hljs-title function_">CountSensor_Get</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<br><span class="hljs-keyword">return</span> CounterSensor_Count;<br>&#125;<br><br><span class="hljs-comment">// 中断函数名不能写错</span><br><span class="hljs-comment">// 建议去startup_stm32f10x_md.s启动文件里复制。</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">EXTI15_10_IRQHandler</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<br><span class="hljs-comment">// 中断标志位判断，确保是想要的中断进入此函数</span><br><span class="hljs-keyword">if</span> (EXTI_GetITStatus(EXTI_Line14) == SET)&#123;<br>CounterSensor_Count++;<br><span class="hljs-comment">// 中断程序结束后要手动清除标志位</span><br>EXTI_ClearITPendingBit)EXTI_Line14);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="旋转编码器计次"><a href="#旋转编码器计次" class="headerlink" title="旋转编码器计次"></a>旋转编码器计次</h2><p>电路连接图如下<br><img src="/./img/post/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E4%B8%AD%E6%96%AD%E7%AC%94%E8%AE%B0/%E6%97%8B%E8%BD%AC%E7%BC%96%E7%A0%81%E5%99%A8%E8%AE%A1%E6%AC%A1.jpg" alt="面包板接线图"><br>与 <a href="https://space.bilibili.com/383400717">江科大自化协</a> 的例子有所不同，我这里写的Encoder只写了个计数，并没有单位时间内计次功能。<br>上代码！</p><blockquote><p>main.c</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stm32f10x.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;OLED.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Encoder.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;delay.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<br>OLED_Init();<br>Encoder_Init();<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)&#123;<br>OLED_ShowNum(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, Encoder_Get());<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>Encoder.h</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stm32f10x.h&quot;</span></span><br><br><span class="hljs-type">int16_t</span> Encoder_Count;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Encoder_Init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<br>RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);<br>RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);<span class="hljs-comment">// AFIO属于APB2. 开启AFIO的时钟</span><br><span class="hljs-comment">// EXTI和NVIC的时钟一直开着</span><br><span class="hljs-comment">// RCC位于内核之外，管不到NVIC</span><br>GPIO_InitTypeDef GPIO_InitStructure;<br>GPIO_InitStructure.GPIO+Mode = GPIO_Mode_IPU;<br>GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1;<br>GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;<br>GPIO_Init(GPIOB, &amp;GPIO_InitStructure);<br><br>GPIO_EXTILineConfig(GPIO_PortSourceGPIOB, GPIO_PinSource0);<span class="hljs-comment">// PB0</span><br>GPIO_EXTILineConfig(GPIO_PortSourceGPIOB, GPIO_PinSource1);<span class="hljs-comment">// PB1</span><br><br>EXTI_InitTypeDef EXTI_InitStructure;<br>EXTI_InitStructure.EXTI_Line = EXTI_Line0 | EXTI_Line1;<br>EXTI_InitStructure.EXTI_LineCmd = ENABLE;<br>EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;<br>EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;<span class="hljs-comment">// 下降沿触发</span><br>EXTI_Init(&amp;EXTI_InitStructure);<br><br>NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);<span class="hljs-comment">// 注意：分组方式整个芯片只能用一种。最好放在main那里</span><br>NVIC_InitTypeDef NVIC_InitStructure;<br>NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;<span class="hljs-comment">// 选择中断通道</span><br>NVIC_InitStructure.NVIC_IRQChanneCmd = ENABLE;<span class="hljs-comment">// 中断通道是使能还是失能</span><br>NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="hljs-number">1</span>;<span class="hljs-comment">// 抢占优先级</span><br>NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="hljs-number">1</span>;<span class="hljs-comment">// 响应优先级</span><br>NVIC_Init(&amp;NVIC_InitStructure);<br>NVIC_InitStructure.NVIC_IRQChannel = EXTI1_IRQn;<span class="hljs-comment">// 选择中断通道</span><br>NVIC_InitStructure.NVIC_IRQChanneCmd = ENABLE;<span class="hljs-comment">// 中断通道是使能还是失能</span><br>NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="hljs-number">1</span>;<span class="hljs-comment">// 抢占优先级</span><br>NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="hljs-number">2</span>;<span class="hljs-comment">// 响应优先级</span><br>NVIC_Init(&amp;NVIC_InitStructure);<br>&#125;<br><br><span class="hljs-type">int16_t</span> <span class="hljs-title function_">Encoder_Get</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<br><span class="hljs-keyword">return</span> Encoder_Count;<br>&#125;<br><br><span class="hljs-comment">// 中断函数</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">EXTI0_IREHandler</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<br><span class="hljs-comment">// 只是让中断的模式固定所以判断一下</span><br><span class="hljs-keyword">if</span> (EXTI_GetITStatus(EXTI_Line0) == SET)&#123;<br><span class="hljs-keyword">if</span> (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_1) == <span class="hljs-number">0</span>)&#123;<br>Encoder_Count--;<br>&#125;<br>EXTI_ClearITPendingBit(EXTI_Line0);<br>&#125;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">EXTI1_IREHandler</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<br><span class="hljs-keyword">if</span> (EXTI_GetITStatus(EXTI_Line1) == SET)&#123;<br><span class="hljs-keyword">if</span> (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_0) == <span class="hljs-number">0</span>)&#123;<br>Encoder_Count++;<br>&#125;<br>EXTI_ClearITPendingBit(EXTI_Line1);<br>&#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h1 id="杂记"><a href="#杂记" class="headerlink" title="杂记"></a>杂记</h1><div class="note note-warning">            <p>中断里不要写耗时太长的代码</p>          </div><div class="note note-warning">            <p>最好不要在中断函数和主函数调用相同的函数或者操作同一个硬件</p>          </div><div class="note note-info">            <p>可以考虑：在终端中对变量进行操作，当中断返回时，对中断变量进行显示和操作</p>          </div>]]></content>
    
    
    <categories>
      
      <category>嵌入式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>嵌入式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一个小总结呀</title>
    <link href="/2022/11/27/%E4%B8%80%E4%B8%AA%E5%B0%8F%E6%80%BB%E7%BB%93%E5%91%80/"/>
    <url>/2022/11/27/%E4%B8%80%E4%B8%AA%E5%B0%8F%E6%80%BB%E7%BB%93%E5%91%80/</url>
    
    <content type="html"><![CDATA[<p>O(∩_∩)O哈哈~</p><span id="more"></span><p>最近刚刚参加了物电杯，趁热打铁，回顾一下比赛的过程鸭</p><h1 id="include-lt-REG52-H-gt"><a href="#include-lt-REG52-H-gt" class="headerlink" title="#include&lt;REG52.H&gt;"></a>#include&lt;REG52.H&gt;</h1><p>某天，我和zdr去上电机学的课……<br>“zfsh，你想不想来打物电杯？你负责写程序”<br>“彳亍啊。”<br>于是我就加入了他们，正好五个人。</p><div class="note note-primary">            <p>这位名为zdr的好基友，与我18年那时候用的网名<strong>坐凳人</strong>颇为相似<br>它们都是以<strong>ZDR</strong>为缩写，并且在读音上十分相近<br>真是缘分呐</p>          </div><h1 id="define-LED-ON-1"><a href="#define-LED-ON-1" class="headerlink" title="#define LED_ON 1"></a>#define LED_ON 1</h1><p>我问：“该怎么做呢？”<br>zdr说：“是这样的：”</p><p>我们要做的项目是DCDC电源。<br>要求是这样的：</p><div class="note note-success">            <p>输入 +48V DC，输出-12~12V DC。</p>          </div><p>我们的思路是这样的：</p><div class="note note-success">            <p>用 PWM 调制 Buck 电路实现电压调节；通过电位器构建的H桥进行正负极转换；由 ADC 采样调节 PWM 的频率，从而实现稳压输出。<br>用数码管输出电压值，按键或者是旋转编码器等调节电压。这个后面再定吧。</p>          </div><h1 id="sbit-LED-x3D-P0-0"><a href="#sbit-LED-x3D-P0-0" class="headerlink" title="sbit LED &#x3D; P0^0;"></a>sbit LED &#x3D; P0^0;</h1><p>“感觉可以啊，来分下工吧。(〃’▽’〃)”</p><p>经过理论分析，这样做没毛病，zdr也实现了纹波消除电路。在轻松愉快的氛围里，我们分好了工。</p><ul><li>zdr负责电路绘制</li><li>sjl负责撰写文案</li><li>wlh负责铝制外壳制作</li><li>self负责程序</li><li><del>当然啦，还有一只tyh，这次他好像没有分配什么任务（手动滑稽）</del></li></ul><h1 id="void-main"><a href="#void-main" class="headerlink" title="void main(){"></a>void main(){</h1><div class="note note-warning">            <p>“电路你来做吧”，我说。<br>“好”，zdr同意了。<br>“那<strong>引脚</strong>怎么定，是你来定还是我来？”<br>zdr发出了他标志性的反应：“呃……”<br>“那要不你来，<strong>你看着怎么方便怎么定义</strong>”<br>“行。”</p>          </div><p>我们愉快地分好了任务。在催更下——实际上只是调侃地说——他画好了电路板。<br>我在得到原理图后，根据pdf上的引脚，从驱动到功能，非常愉快地实现了代码。<br>“你没给我弄个中断啊？”<br>“呃，觉得引脚不够用了，就没再接。”<br>“啊，那样一些功能实现起来会比较麻烦啊。<br>“哦哦，我想到办法了，可以<strong>替代补救</strong>一下。”<br>第三天，板子也到了，以zdr的焊接技术，这次稳赢。<br>感‌​​​‌‌‌‌​​​​​​‌​‌‌​觉好宁静，<del>W<em>W5</em>Wb<strong>g&#x3D;</strong>&#x3D;</del>上也没有<del>V1</del>c1<del>V<strong>2Jn</strong>JTNE<strong>JT</strong>NE</del>的人，一切是多么的<del>Y<strong>n</strong>Vn</del>啊，要是能一直这样下去就好了。大家都能得奖，<del>dHlo</del>也在努力着。</p><h1 id="LED-x3D-V1c1V2JnJTNEJTNE-x2F-x2F-开灯"><a href="#LED-x3D-V1c1V2JnJTNEJTNE-x2F-x2F-开灯" class="headerlink" title="LED &#x3D; V1c1V2JnJTNEJTNE; &#x2F;&#x2F; 开灯"></a>LED &#x3D; V1c1V2JnJTNEJTNE; &#x2F;&#x2F; 开灯</h1><h2 id="怪殇始"><a href="#怪殇始" class="headerlink" title="怪殇始();"></a>怪殇始();</h2><p>zdr总共设计了四块板子，他先焊好了第一块板子，上面带着52单片机。<br>“干得漂亮，让我来<strong>下载程序</strong>吧。”<br>我接过板子，连好了线，把 usb 转 ttl 查到电脑上，在stc-isp中点击了<strong>下载</strong>。</p><div class="note note-info">            <p>正在检测单片机……</p>          </div><p>…………<br>就没有然后了。<br>“怎么下不了啊？”<br>他也不知道为什么。我们两个人试了一晚上，包括直接接上5V VCC、冷启动、热启动、不接VCC（<del>不启动？</del>）、反复插拔VCC……但是就是下载不了。</p><h2 id="Day-2"><a href="#Day-2" class="headerlink" title="Day_2();"></a>Day_2();</h2><p>第二天满课，晚上在学长的帮助下，我们意识到了，zdr之前在板子上也焊了个CH340，于是本该由CH340直接连接MCU的电路变成了由CH340到CH340再到MCU，并且有两个晶振同时工作。<br>肯定下不上去啊！<br>手头没有单独的MCU了，我们赶紧买了个最小系统板。<br>“没关系，大不了我可以飞线。”<br>“啊——”（叹气）“那你先把其它板子焊好吧”<br>“彳亍。”</p><h2 id="Day-3"><a href="#Day-3" class="headerlink" title="Day_3();"></a>Day_3();</h2><p>第三天，最小系统板还没到，但是我俩的脑洞到了。<br>我们将CH340的TXD和RXD直接接到MCU的引脚上去。<br>首先在开发板上实验一下——<strong>成功</strong>了！<br>我们俩欣喜若狂，收好开发板，将杜邦线直接怼到52单片机的引脚上去。<br>下载！</p><div class="note note-info">            <p>正在检测单片机……</p>          </div><p>…………<br>又没有然后了。<br>“为什么啊……”</p><h1 id="while-1-x2F-x2F-TODO-Debug-here-x2F"><a href="#while-1-x2F-x2F-TODO-Debug-here-x2F" class="headerlink" title="while(1); &#x2F;&#x2F; TODO: Debug here &#x2F;*"></a>while(1); &#x2F;&#x2F; TODO: Debug here &#x2F;*</h1><h2 id="他来飞线"><a href="#他来飞线" class="headerlink" title="他来飞线"></a>他来飞线</h2><p>两天后，也就是这个星期六，最小系统板到了。我取了快递，到了实验室，就把程序烧了进去。<br>“zdr，我去上形势政策课去了，飞线就靠你了。<strong>按照之前的结构做就行</strong>”<br>“嗯，你去就行。”<br>“等你的好消息。”</p><h2 id="我来代码"><a href="#我来代码" class="headerlink" title="我来代码"></a>我来代码</h2><p>我下课回来，四块板子已经连好了。zdr蹲在电源旁测试。<br>“怎么样，好了吗？”<br>“没有，它<strong>不显示数字</strong>，并且没有输出。”<br>我看着呆呆的工作状态指示灯，镇定地思考着为什么。<br>“那好，我去修改下代码。”</p><p>我修改了代码，调整了一些逻辑。<br>“烧录吧。”我想，这次肯定能顺利烧录了吧？</p><div class="note note-info">            <p>正在检测单片机……</p>          </div><p>依旧没有然后了。<br>“怎么回事？今天上午还能正常烧录的。”<br>“我也不知道。”<br>我满脸疑惑，发到一个群里去问了问大佬。大佬建议我们<em>把飞线一个个拆掉，然后一条一条连上去</em>。显然时间是不够用的。<br>在这个时候，工作状态指示灯也不亮。<br>“程序下不进去，灯也不亮。”我戳了戳工作状态指示灯的飞线……WOC它烧进去了！！！这里有裸露的导线，过载灯和工作灯的飞线连到一起了！<strong>一定是<em>这里</em>的问题</strong>！</p><h2 id="再试一试！！！"><a href="#再试一试！！！" class="headerlink" title="再试一试！！！"></a>再试一试！！！</h2><p>我们把四块电路连好，希望这次可以成功。<br>“哒，哒”<br>继电器发出了连接的声音。<br>“诶这里发热很厉害。”<br>“指示灯在闪！！！”<br>“诶呦有输出了！！！”</p><h2 id="可是电路板不愿意-x2F"><a href="#可是电路板不愿意-x2F" class="headerlink" title="可是电路板不愿意*&#x2F;"></a>可是电路板不愿意*&#x2F;</h2><p>但是数码管不显示数字。按键也不能修改输出电压。<br>我又修改了代码。<br>“怎么还是不行？”<br>“长按按键有反应了。”<br>“为什么按键反应这么慢？”<br>“怎么又没输出了？”<br>“为什么上电之后MCU不运行？”<br>…………<br>下载也愈发艰难，以前戳戳那两根导线就可以了，现在需要轻轻“揉一揉”那团没梳过的黑发。<br>那晚，我反复修改代码，但这堆问题就是不能解决。<br>“要不……阉割一点需求？可能是哪里焊得有问题？”<br>“好吧，那只能这样了。”<br>“行，我今晚熬夜重构一下。”</p><h1 id=""><a href="#" class="headerlink" title="}"></a>}</h1><p>大约今天上午九点，雨初歇，我来到了实验室。<br>“我自己来试试吧。”<br>我下载了编译后的.hex文件——无意中发现，像拍拍老电视那样去轻轻拍拍这堆电路，就能下载了。<br>测试！<br>失败。<br>测试！<br>失败。<br>阉割，测试！<br>失败。<br>…………<br>zdr也来了，地线被我拍掉了，他重新焊了上去。<br>继续阉割！现在工作指示灯常亮。<br>……然而，电路的输出电压也没有了。不知道为什么，单片机供电不稳定，工作指示灯一闪一闪，此时数码管也没有任何显示。我试着按了一下前面的按钮，结果MCU通上电了，工作指示灯亮了，数码管显示了。<br>“诶诶诶！可以试试。”<br>zdr按了按调压按钮，但是MCU不鸟他。<br>我按下了Output按钮，但是MCU也不鸟我。<br>完了，现在连输出都没有了。<br>它，是如此冷酷无情——却又怪我俩，或者说只怪我吧。<br>“等等，我发现，你在设计的时候把Output接到EA上去了，换句话说，时钟同中断或电压输出，你只能二选一！”<br>“啊这呃……”<br>午饭时间到。午饭结束。<br>我作出了终极阉割，彻底放弃PWM调制，只输出高电平，并且让数码管显示一个定死的目标输出电压。<br>可这时，MCU说什么也不肯下载新的程序。<br>“还好，至少这不是最坏的结果。”</p><h1 id="File-gt-20221127-log"><a href="#File-gt-20221127-log" class="headerlink" title="File -&gt; 20221127.log"></a>File -&gt; 20221127.log</h1><p>在这次的物电杯里，暴露了这些问题：</p><div class="note note-light">            <p>电路设计没有设计好中断引脚。如EA、INT0等的失误</p>          </div><div class="note note-light">            <p>程序设计没有跑仿真（并没有去设计仿真）</p>          </div><div class="note note-light">            <p>程序设计和电路设计没给debug留出足够的机会</p>          </div><div class="note note-light">            <p>对程序下载的方式不够熟悉</p>          </div><div class="note note-light">            <p>没有抓住飞线的机会及时更正错误</p>          </div><div class="note note-light">            <p>考虑不周：唯独没有准备备用的MCU元件</p>          </div><div class="note note-warning">            <p>程序设计与电路设计沟通不畅，必要信息未能及时交流</p>          </div><div class="note note-secondary">            <p>后续补充</p>          </div><h1 id="File-gt-Readme-md"><a href="#File-gt-Readme-md" class="headerlink" title="File -&gt; Readme.md"></a>File -&gt; Readme.md</h1><p>今天下午，经历了无数次尝试之后，最小系统板终于乖乖地收下了我们的程序，并且仍然没能像预期那样运行。不过此时我已经习惯了，这已经是最棒的结果了。<br>我们“踉踉跄跄”地拍好了视频，然后发到了评委邮箱。<br>回顾这次走过的路，虽说结果不尽人意，却也差强人意。我们并非一无所成，也从未一无所获。在这些方面，比起大佬，我们如毫末之芥，但我们已在不凡的道路上行稳渐远。我们之间的差距，仅剩我们的第一次胜利。<br>这只是物电杯而已。设想一下，如果不是物电杯，我愿意这样试错吗？<br>继续前进吧，我们将舟适三山，羽化而登仙！</p>]]></content>
    
    
    <categories>
      
      <category>回顾总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>嵌入式</tag>
      
      <tag>回顾总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android萌新入坑Day2</title>
    <link href="/2022/09/20/Android%E8%90%8C%E6%96%B0%E5%85%A5%E5%9D%91Day2/"/>
    <url>/2022/09/20/Android%E8%90%8C%E6%96%B0%E5%85%A5%E5%9D%91Day2/</url>
    
    <content type="html"><![CDATA[<p>Android萌新入坑第二天！虽然说是第二天，但是第一天和第二天是重叠在一起。</p><span id="more"></span><h1 id="App开发语言"><a href="#App开发语言" class="headerlink" title="App开发语言"></a>App开发语言</h1><p>App开发主要有两大技术路线：<strong>原生开发</strong>和<strong>混合开发</strong>。<br>Android官方编程语言包括<strong>Java</strong>和<strong>Kotlin</strong>。<br>各有各的优势。最好还是用Java学习开发。kotlin与Java可以互相调用。<br>有时候会用到C&#x2F;C++，利用JNI可以实现很多高效率运行的代码。<br>也会用到XML，标签内部属性以<code>android:</code>开头。<br>现在都是命令式ui→声明式ui<br>数据库：SQLite</p><h1 id="工程"><a href="#工程" class="headerlink" title="工程"></a>工程</h1><p>先做了解，后面会慢慢熟悉这些</p><h2 id="目录介绍"><a href="#目录介绍" class="headerlink" title="目录介绍"></a>目录介绍</h2><p><img src="/img/post/Android%E5%85%A5%E9%97%A8/Day2/%E5%B7%A5%E7%A8%8B%E7%9B%AE%E5%BD%95%E4%BB%8B%E7%BB%8D.png" alt="工程目录一览"><br>该目录下面有两个分类：一个是app，代表app模块；另一个是Gradle Scripts。其中，app下面又有3个子目录，其功能说明如下：</p><ul><li>drawable目录存放描述文件与图片文件；</li><li>layout目录存放App页面的布局文件；</li><li>mipmap目录存放App的启动图标；</li><li>values目录存放一些常量定义文件，例如字符串常量strings.xml、像素常量dimens.xml、颜色常量colors.xml、样式风格定义styles.xml等。</li></ul><p>Gradle Scripts下面主要是工程的编译配置文件，主要有：</p><ul><li>build gradle，该文件分为项目及与模块级两种，用于描述App工程的编译规则</li><li>proguard-rules.pro，改文件用于描述java代码的混淆规则</li><li>gradle.properties，改文件用于编译工程的命令行参数</li><li>settings.gradle，改文件配置了需要编译哪些模块。初识内容为<code>include &#39;.app&#39;</code>，表示只编译app模块</li><li>local.properties，项目的本地配置文件，在工程编译时自动生成，用于描述开发者电脑的环境配置，包括SDK的本地路径，NDK的本地路径等。</li></ul><p>Gradle是一个项目自动化构建工具，帮助开发者实现依赖、打包、步数、法宝、各种渠道的差异管理等工作。类似于java里的maven</p><h2 id="配置编译文件"><a href="#配置编译文件" class="headerlink" title="配置编译文件"></a>配置编译文件</h2><p><code>groovy</code>-&gt;gradle的语言<br>在build.gradle中，我们可以找到如下代码：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs groovy">plugins &#123;<br>    id <span class="hljs-string">&#x27;com.android.application&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码里写了app需要那些包</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs groovy">namespace <span class="hljs-string">&#x27;com.example.myapplication&#x27;</span><br>compileSdk <span class="hljs-number">32</span><br><br>defaultConfig &#123;<br>    applicationId <span class="hljs-string">&quot;com.example.myapplication&quot;</span><br>    minSdk <span class="hljs-number">28</span><br>    targetSdk <span class="hljs-number">32</span><br>    versionCode <span class="hljs-number">1</span><br>    versionName <span class="hljs-string">&quot;1.0&quot;</span><br><br>    testInstrumentationRunner <span class="hljs-string">&quot;androidx.test.runner.AndroidJUnitRunner&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在这段代码中：</p><ul><li><code>complieSdk</code>是指定编译用的版本号</li><li><code>applicationId</code>是App的包名</li><li><code>minSdk</code>指定APP适合运行的最小SDK版本号</li><li><code>targetSdk</code>指定目标设备的SDK版本号</li><li><code>versionCode</code>指定APP的应用版本号</li><li><code>versionName</code>指定APP的应用版本名称</li><li><code>testInstrumentationRunner</code>是开发人员用的，以后再说（</li></ul><p>不同版本的gradle配置也不尽相同。</p><h2 id="清单文件"><a href="#清单文件" class="headerlink" title="清单文件"></a>清单文件</h2><p>AndroidManifest.xml存在于每个应用的根目录，文件名一模一样，包含了APP的配置信息，系统里面需要根据里面的内容运行APP的代码，显示界面。</p><ul><li><code>android:allowBackup</code>：是否允许应用备份。刷机或数据包丢失时，可通过<code>adb backup</code>和<code>adb restore</code>来进行对应用数据的备份和恢复。</li><li><code>android:icon</code>：制定APP在手机屏幕上显示的图标</li><li><code>android:label</code>：指定APP在手机屏幕上显示的名称</li><li><code>android:roundIcon</code>：指定APP的圆角图标</li><li><code>android:supportsRd</code>：是否支持阿拉伯语、波斯语这种从右往左文字序列排序。</li><li><code>android:theme</code>：指定APP的显示风格</li></ul><h2 id="什么是Activity"><a href="#什么是Activity" class="headerlink" title="什么是Activity"></a>什么是Activity</h2><p>Activity是一个应用程序组件（“屏幕组件”），提供一个屏幕，用户可以用来交互以完成某项任务。<br>我的理解就是，它是一个“容器”，类似于一个body，一个App内能由好多个body，由程序控制谁在显示</p><h2 id="界面显示与处理逻辑"><a href="#界面显示与处理逻辑" class="headerlink" title="界面显示与处理逻辑"></a>界面显示与处理逻辑</h2><p>XML标记描绘应用界面，Java代码书写程序逻辑<br>提升代码的复用性<br><code>xmlns</code>：xml namespace</p><h2 id="获取TextView对象并修改内容"><a href="#获取TextView对象并修改内容" class="headerlink" title="获取TextView对象并修改内容"></a>获取TextView对象并修改内容</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">TextView</span> <span class="hljs-variable">tv</span> <span class="hljs-operator">=</span> findViewById(R.id.tv);<span class="hljs-comment">// R.id.[你的TextView对象的id]</span><br>tv.setText(<span class="hljs-string">&quot;Good morning&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="Activity创建与跳转"><a href="#Activity创建与跳转" class="headerlink" title="Activity创建与跳转"></a>Activity创建与跳转</h2><ol><li>在<code>layout目录</code>下创建XML文件</li><li>创建与XML文件对应的Java代码</li><li>在<code>AndroidManifest.xml</code>中注册页面配置</li></ol><h3 id="创建布局文件"><a href="#创建布局文件" class="headerlink" title="创建布局文件"></a>创建布局文件</h3><h4 id="新建文件"><a href="#新建文件" class="headerlink" title="新建文件"></a>新建文件</h4><p>右键-&gt;New-&gt;XML-&gt;Layout XML File<br><img src="/img/post/Android%E5%85%A5%E9%97%A8/Day2/%E5%88%9B%E5%BB%BA%E5%B8%83%E5%B1%80%E6%96%87%E4%BB%B6.png" alt="创建布局文件"><br><img src="/img/post/Android%E5%85%A5%E9%97%A8/Day2/%E5%B8%83%E5%B1%80%E6%96%87%E4%BB%B6%E5%88%9B%E5%BB%BA1.png" alt="新布局文件设置"></p><h4 id="代码环节"><a href="#代码环节" class="headerlink" title="代码环节"></a>代码环节</h4><p>然后选择编辑模式为代码。这个小单元在编辑页面右上角的部分<br><img src="/img/post/Android%E5%85%A5%E9%97%A8/Day2/%E9%80%89%E6%8B%A9%E7%BC%96%E8%BE%91%E6%A8%A1%E5%BC%8F.png" alt="Code/Split/Design"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">&quot;vertical&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;@string/text2&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这段代码中，我们写了一个线性布局：</p><ul><li>它的长宽与父元素匹配</li><li>它的方向是垂直方向</li><li>它布局在居中位置上<br>并为它添加了一个TextView文本对象：</li><li>宽高与内容自动适配（css留下了眼泪）</li><li>它的文本是string中的text2的值<br>在<code>strings.xml</code>里添加<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">string</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;text2&quot;</span>&gt;</span>嗨嗨嗨<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br></code></pre></td></tr></table></figure>虽然可以直接在<code>android:text=&quot;xxx&quot;</code>中写内容，但是为了便于开发，还是写在<code>strings.xml</code>里比较好啦……</li></ul><p>在<code>AndroidManifest.xml</code>中加入如下代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">activity</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;.MainActivity2&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><div class="note note-warning">            <p><strong>注意</strong><br>笔者忘记加入这行代码，以致于后面点击Button时程序总是崩溃。</p>          </div><h3 id="新的Activity"><a href="#新的Activity" class="headerlink" title="新的Activity"></a>新的Activity</h3><h4 id="新建文件-1"><a href="#新建文件-1" class="headerlink" title="新建文件"></a>新建文件</h4><p><img src="/img/post/Android%E5%85%A5%E9%97%A8/Day2/%E6%96%B0%E5%BB%BAactivity.png" alt="新建Activity"><br>Later…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>直接打oncreate让Android Studio自动补全剩下的东西就好了。</p><h4 id="能不能再方便一些？"><a href="#能不能再方便一些？" class="headerlink" title="能不能再方便一些？"></a>能不能再方便一些？</h4><p>当然可以！<br>New-&gt;Activity-&gt;Empty Activity即可新建一个空的Activity.</p><h3 id="Activity跳转"><a href="#Activity跳转" class="headerlink" title="Activity跳转"></a>Activity跳转</h3><p>接下来，我们将要实现的是两个Activity之间的跳转。回到前面的<code>activity_main.xml</code>，用类似添加TextView的方法添加一个button</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Button</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;收款码&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>在MainActivity.java的OnCreate()函数中添加如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Button</span> <span class="hljs-variable">button</span> <span class="hljs-operator">=</span> findViewById(R.id.button);<br>button.setOnClickListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">View</span>.OnClickListener()&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View view)</span> &#123;<br><span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>();<br>intent.setClass(MainActivity.<span class="hljs-built_in">this</span>, MainActivity2.class);<br>startactivity(intent);<br>&#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>intent里设置了一个“上下文”（估计后面会讲）</p><h1 id="杂记"><a href="#杂记" class="headerlink" title="杂记"></a>杂记</h1><p><code>ctrl+alt+l</code>：格式化代码<br><code>ctrl+shift+o</code>：自动导入包<br><code>ctrl+shift+空格</code>：自动补全代码</p><h1 id="想对自己说的话"><a href="#想对自己说的话" class="headerlink" title="想对自己说的话"></a>想对自己说的话</h1><p>我写的博客肯定没人看，哈哈，那就写给自己看！<br>我曾有七天掌握C语言基础的“辉煌”<br>也有成绩总是上不去的堕落<br>（轻吹茶氤，品茗而叹）<br>上古本来没有绿色植被，直到数亿年前才有了丝丝绿意<br>上古本来没有花朵，直到千万年前地球上才有了第一朵花。<br>上古本来没有文明，直到数万数千年前，才有了矛与盾。<br>如果不能持久，便难以造物。人因为父母而能降生，苦也罢，乐也罢，这一路是他们赐予的。<br>或许其他的家庭，他们当中有他们口中“缺德的父母”。<br>反正，我的父母绝对不是。<br>要回报他们。<br>想来，对我来说，各种方法都不足为报，只剩一条路，那就是学习。<br>学习要有紧迫感，不过不是时时刻刻都要犯神经似的“紧绷着”，你可以放松，可以娱乐，可以睡觉。<br>Android对于我来说，就像魔法一般。因为这算是我第一次接触成体系的“可视化界面”。<br>七年前的我能羡慕死现在的条件，不要辜负了他的目光，不要忘记每一刻的真诚。<br>我爱编程，虽然她不爱我，但她不是人。<br>正如如今很多DD在追皮套人一样，我追的，是编程，是那个最虚拟的世界。<br><strong>曾先生、南先生、倪先生</strong>，无比勤勉，应当铭记他们的勤奋和无畏，同时也要注意到无畏与勤奋的同时也能保持智慧。<br>生活并不总会应允我的梦想与需求。<br>那就随遇而安吧。<br>——而我却还要努力生长，向阳而旺。<br>Android学习或许对自己的未来帮助不大，不过希望你已经坚持下来了。<br>风光霁月，水木蕃然。有人立渚</p><div class="note note-warning">            <p><strong>敬告诸位</strong>：</p><p>我调用自己脑内的API，可以省略很多要向其他人交代的信息，某些有点偏执的话语只是想和自己强调事物的需要注意的一些侧面。<br>省略的信息，包括但不限于：皮套人的中之人是值得尊敬的人（其余略）<br><strong>我写给我自己的话，完全由我自己做主</strong>。</p><p>——舟泛四海敬上，于2022.9.20晚</p>          </div><h1 id="勘误"><a href="#勘误" class="headerlink" title="勘误"></a>勘误</h1><p>暂无……</p>]]></content>
    
    
    <categories>
      
      <category>Android笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android萌新入坑Day1</title>
    <link href="/2022/09/20/Android%E8%90%8C%E6%96%B0%E5%85%A5%E5%9D%91Day1/"/>
    <url>/2022/09/20/Android%E8%90%8C%E6%96%B0%E5%85%A5%E5%9D%91Day1/</url>
    
    <content type="html"><![CDATA[<p>买了个小米5pad，在作为生产力的同时感觉很多方面不尽人意，特别是那它当一个数位板的时候。所以打算入坑Android，期望自己有朝一日能用上自己开发的安卓软件。</p><span id="more"></span><p>我跟的是 <a href="https://www.bilibili.com/video/BV19U4y1R7zV">2022 最新 Android 基础教程，从开发入门到项目实战，看它就够了，更新中</a> 。<br><img src="/img/post/Android%E5%85%A5%E9%97%A8/Day1/%E7%94%98%E9%9B%A8.jpg" alt="甘雨镇博"></p><h1 id="About-Android"><a href="#About-Android" class="headerlink" title="About Android"></a>About Android</h1><p>列几个关键词即可：</p><ul><li>基于Linux内核</li><li>Google</li><li>Java</li></ul><h1 id="安装Android-Studio"><a href="#安装Android-Studio" class="headerlink" title="安装Android Studio"></a>安装Android Studio</h1><p>访问 <a href="https://developer.android.google.cn/studio/index.html">Google Android Studio</a> 下载Android Studio，设置一下安装路径等。<br>并且安装SDK（Software Development Kits，软件开发工具），需要科学上网。<br>以及proxy，暂且不知道干什么用。<br><img src="/img/post/Android%E5%85%A5%E9%97%A8/Day1/AndroidStudio.png" alt="Android Studio启动中……"></p><h1 id="第一个项目"><a href="#第一个项目" class="headerlink" title="第一个项目"></a>第一个项目</h1><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p>选择<code>Empty Activity</code><br>进去之后，Android Studio会自动打开<code>MainActivity.kit</code>和<code>activity_main.xml</code>两个文件。</p><h2 id="创建虚拟设备"><a href="#创建虚拟设备" class="headerlink" title="创建虚拟设备"></a>创建虚拟设备</h2><h3 id="开启CPU虚拟化支持"><a href="#开启CPU虚拟化支持" class="headerlink" title="开启CPU虚拟化支持"></a>开启CPU虚拟化支持</h3><p>想在一个操作系统上运行另一个操作系统，比如内置模拟器，需要开启虚拟化支持<br>进BIOS操作，具体方法自行百度（咕咕咕</p><h3 id="创建内置模拟器"><a href="#创建内置模拟器" class="headerlink" title="创建内置模拟器"></a>创建内置模拟器</h3><p>我们的代码需要在设备上运行，有两种<br>一种是物理机，直接上你的实体设备即可<br>另一种是虚拟机，你可以在Android Studio中直接添加虚拟设备（Virtual device），它能很方便地让你在电脑上直接运行你的项目<br>并且能够摆脱实体的限制——你可以创建各种型号、各种运行环境的虚拟设备<br>——直接在原生Android系统上运行程序！<br>在Android Studio右边的<code>Device Manager</code>中，点击<code>Virtual</code>，接着点<code>Create device</code>来创建我们的虚拟设备。</p><p>左侧是设备类型，右侧是你的设备设置以及它的详细信息。跟随教程点击<code>Next</code>，<br><img src="/img/post/Android%E5%85%A5%E9%97%A8/Day1/%E8%AE%BE%E5%A4%87%E5%9E%8B%E5%8F%B7.png" alt="选择设备类型"></p><p>接着我们要选择系统镜像。教程上用了Android 11，就先跟着他走吧，以后在考虑平板上的Android 12与11有多大的差别。<br>如果你的电脑上还没有安装相关的镜像，就先点击发行名称旁边的下载按钮安装吧。<br><img src="/img/post/Android%E5%85%A5%E9%97%A8/Day1/%E7%B3%BB%E7%BB%9F%E9%95%9C%E5%83%8F.png" alt="选择设系统镜像"></p><p>最后一步是确认你的虚拟设备的配置。貌似可以选择初始的朝向，横屏或者竖屏。这个还用不上，直接Finish。<br><img src="/img/post/Android%E5%85%A5%E9%97%A8/Day1/%E9%85%8D%E7%BD%AE%E7%A1%AE%E8%AE%A4.png" alt="虚拟设备设置确认"></p><p>现在，在<code>Device Manager</code>里，我们可以看到刚刚创建好的虚拟设备啦！<br><img src="/img/post/Android%E5%85%A5%E9%97%A8/Day1/%E5%90%AF%E5%8A%A8%E6%A8%A1%E6%8B%9F%E5%99%A8.png" alt="虚拟设备创建完成！"></p><h2 id="解决AVD启动报错问题"><a href="#解决AVD启动报错问题" class="headerlink" title="解决AVD启动报错问题"></a>解决AVD启动报错问题</h2><div class="note note-warning">            <p><strong>报错提示</strong><br>The emulator process for AVD Pixel_5_API_30 has terminated.</p>          </div><p>说来离谱，百度上出来的解决方案没有一个解决掉我的问题。<br>后来，我换了一个SDK路径，然后删掉了<code>users/local/appdata/android</code>中的全部文件，再重新<code>Create device</code>，并且重新安装了Android 11虚拟环境，我的虚拟设备就能启动了……</p><h2 id="运行第一个项目"><a href="#运行第一个项目" class="headerlink" title="运行第一个项目"></a>运行第一个项目</h2><p>点击<del>播放按钮</del>运行按钮<br><img src="/img/post/Android%E5%85%A5%E9%97%A8/Day1/Run.png" alt="Run"></p><p>将程序发布、运行到虚拟的手机上面，就可以查看运行效果啦！<br><img src="/img/post/Android%E5%85%A5%E9%97%A8/Day1/%E8%BF%90%E8%A1%8C%E6%95%88%E6%9E%9C.png" alt="My First Android Project"></p><h2 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h2><p>Android采用Log工具打印日志，它将各类日志分为五个等级：</p><div class="note note-primary">            <p><strong>Log.e</strong>：表示错误信息，比如可能导致程序崩溃的异常<br><strong>Log.w</strong>：表示警告信息<br><strong>Log.i</strong>：表示一般消息<br><strong>Log.d</strong>：表示调试信息，可把程序运行时的变量值打印出来，方便跟踪调试<br><strong>Log.v</strong>：表示冗余信息</p>          </div><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.myapplication;<br><br><span class="hljs-keyword">import</span> androidx.appcompat.app.AppCompatActivity;<br><br><span class="hljs-keyword">import</span> android.os.Bundle;<br><span class="hljs-keyword">import</span> android.util.Log;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br>        Log.e(<span class="hljs-string">&quot;Hello&quot;</span>, <span class="hljs-string">&quot;World&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>Logcat</code>（Log猫？）中可以查看输出日志。上方的搜索了里搜索标签<code>Hello</code>，<br><img src="/img/post/Android%E5%85%A5%E9%97%A8/Day1/%E6%90%9C%E7%B4%A2%E6%A0%8F.png" alt="搜索栏"><br>就能看到对应的输出<code>Hello: World</code><br>你也可以通过Logcat Filter查看输出<br><img src="/img/post/Android%E5%85%A5%E9%97%A8/Day1/LogcatFilter.png" alt="Logcat Filter"></p><h2 id="更进一步"><a href="#更进一步" class="headerlink" title="更进一步"></a>更进一步</h2><h3 id="配置硬件加速"><a href="#配置硬件加速" class="headerlink" title="配置硬件加速"></a>配置硬件加速</h3><p>见官方文档：<a href="https://developer.android.google.cn/studio/run/emulator-acceleration">为 Android 模拟器配置硬件加速</a></p><h3 id="使用真机调试运行"><a href="#使用真机调试运行" class="headerlink" title="使用真机调试运行"></a>使用真机调试运行</h3><p>在开发者模式里开启USB调试，然后数据线连<del>真姬</del>，电脑会自动安装驱动（不成功的话就安装手机助手），手机选“文件传输模式”（“传输文件”、“管理文件”……）<br>最好允许通过USB安装文件，并且“始终允许使用这台计算机进行调试”。在<del>播放键</del>运行按钮旁边的菜单里选择你的手机，然后点击运行。可能会出现安装页面，安装！这样，你的App就能发布到手机上并且运行啦！</p><p>在真机上运行，程序运行起来会更快一些。并且例如重力感应、加速度等功能只能在真机上面测试。</p><h3 id="电脑与手机连接过程的一点点细节"><a href="#电脑与手机连接过程的一点点细节" class="headerlink" title="电脑与手机连接过程的一点点细节"></a>电脑与手机连接过程的一点点细节</h3><p>PC与Android OS通过什么连接起来呢？<br><strong>ADB</strong>（Android Debug Bridge）！</p><div class="note note-warning">            <p>如果使用了手机助手，那么Adb的通道（？）就会被占用，因此手机电脑成功连接之后就应该卸载手机助手。</p>          </div><h1 id="勘误"><a href="#勘误" class="headerlink" title="勘误"></a>勘误</h1><p>暂无</p>]]></content>
    
    
    <categories>
      
      <category>Android笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>说说CC4.0协议</title>
    <link href="/2022/09/17/%E8%AF%B4%E8%AF%B4CC4.0%E5%8D%8F%E8%AE%AE/"/>
    <url>/2022/09/17/%E8%AF%B4%E8%AF%B4CC4.0%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<p>什么是CC协议呢？</p><span id="more"></span><p>CC协议是<code>A Creative Commons License</code>的缩写，中文名称<code>知识共享许可协议</code>由美国非营利性组织Creative Commons发布。4.0版本于2013年11月25日发布。<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="[知识共享许可协议_百度百科](https://baike.baidu.com/item/%E7%9F%A5%E8%AF%86%E5%85%B1%E4%BA%AB%E8%AE%B8%E5%8F%AF%E5%8D%8F%E8%AE%AE/23190065?fr=aladdin#3)">[4]</span></a></sup></p><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>只要你遵守后面介绍的具体协议，许可人就无权收回你的这些权利</p><div class="note note-primary">            <p><strong>共享</strong>：在任何媒介以任何形式复制、发行本作品<br><strong>演绎</strong>：修改、转换或以本作品为基础进行创作</p>          </div><h1 id="协议内容"><a href="#协议内容" class="headerlink" title="协议内容"></a>协议内容</h1><p>CC4.0许可协议含有4中条例，协议的具体版本由这些条例组合而成。<br>此部分内容取自Wikipedia中关于“知识共享许可协议”的说明，有所修改，具体链接为 <a href="https://zh.wikipedia.org/wiki/">https://zh.wikipedia.org/wiki/</a> 知识共享许可协议。其采用CC-BY-SA授权。</p><h2 id="BY：署名"><a href="#BY：署名" class="headerlink" title="BY：署名"></a>BY：署名</h2><p><img src="https://creativecommons.org/images/deed/attribution_icon_blue_x2.png" alt="BY：署名"><br><strong>署名</strong>（Attribution, by）您（用户）可以复制、发行、展览、表演、放映、广播或通过信息网络传播本作品。您必须按照作者或者许可人指定的方式对作品进行署名。</p><p><strong>官网解释</strong>：您（用户）必须给出适当的署名，并提供指向本许可协议（指你使用的CC协议）的链接，同时标明是否（对原始作品）作了修改。您可以用任何合理的方式来署名，但是不得以任何方式暗示许可人为您或您的使用背书。<br>这里的“背书”来源于银行的票据业务，是指使用人不能明示或暗示观众：“我使用了许可人的作品，许可人支持我的创作，并且可以用许可人的声誉确保我的使用行为可信可靠”。</p><p>具体来说，署名需要包括以下内容：</p><div class="note note-primary">            <p><strong>包含任何版权声明（如适用）</strong>。如果作品自身带有作者的版权声明，版权声明必须保持不变，或在一种合理的方式下重新分发给媒介。<br><strong>引用作者的名字，网名或用户ID等</strong>。如果作品发布在互联网上，如果存在作者的个人档案页面，应附上页面的链接。<br><strong>引用作品的标题或名称（如适用）</strong>，前提是存在标题或名称。如果作品发布在互联网上，应在重新分发时应附上原作品的标题或者名称。<br><strong>引用作品的CC许可协议</strong>。如果作品发布在互联网上，应引用作者的CC许可协议，且应附有到CC网站的链接。（网址和跳转链接均可）<br>如果<strong>作品是一个派生作品或改编作品</strong>，除了以上几点外，<strong>还应该说明这是一个派生作品</strong>，如“这是 <em>作者</em> 的 <em>作品</em> 的芬兰语翻译版本”或“剧本在 <em>作者</em> 的 <em>原作品</em> 基础上改编”。</p>          </div><h2 id="NC：非商业性使用"><a href="#NC：非商业性使用" class="headerlink" title="NC：非商业性使用"></a>NC：非商业性使用</h2><p><img src="https://creativecommons.org/images/deed/nc_blue_x2.png" alt="NC：非商业性使用"><br><strong>非商业性使用</strong>（Noncommercial，nc）您可以自由复制、散布、展示及演出本作品；您不得为商业目的而使用本作品。</p><p>带有NC的均不能用于商业目的。但在原作者允许的情况下，仍可以用于商业目的。</p><h2 id="SA：相同方式共享"><a href="#SA：相同方式共享" class="headerlink" title="SA：相同方式共享"></a>SA：相同方式共享</h2><p><img src="https://creativecommons.org/images/deed/sa_blue_x2.png" alt="SA：相同方式共享"><br><strong>相同方式共享</strong>（ShareAlike，sa）您可以自由复制、散布、展示及演出本作品；若您改变、转变或更改本作品，仅在遵守与本作品相同的许可条款下，您才能散布由本作品产生的派生作品。</p><p>带有SA的协议要求传播时也要遵循同样的CC协议，比如原作者注明了NC非商业性，则你在使用其作品进行内容创作时也当注明请其他人遵循CC协议中的NC规定，并且要带有SA标记以告诉其他人也应当遵循此CC协议。</p><h2 id="ND：禁止演绎"><a href="#ND：禁止演绎" class="headerlink" title="ND：禁止演绎"></a>ND：禁止演绎</h2><p><img src="https://creativecommons.org/images/deed/nd_blue_x2.png" alt="ND：禁止演绎"><br>禁止演绎（英语：No Derivative Works，nd)您可以自由复制、散布、展示及演出本作品；您不得改变、转变或更改本作品。</p><p>只能原原本本地传播本作品，不得对内容进行任何修改。（除非构成合理运用，否则要经过作者允许）</p><h1 id="可选的组合"><a href="#可选的组合" class="headerlink" title="可选的组合"></a>可选的组合</h1><p>总共有11种有效组合，其中包含了不包括任何条款的一种组合。缺乏BY的条款“没人使用”，总共有6种常用的版权规定组合：</p><ul><li>CC BY</li><li>CC BY-SA</li><li>CC BY-NC</li><li>CC BY-NC-SA</li><li>CC BY-ND</li><li>CC BY-NC-ND</li></ul><div class="note note-warning">            <p><strong>注意</strong><br>ND与SA互斥，不能同时出现</p>          </div><p>这些组合的权利与要求都写在上面的具体组成条例之中，将不同条例的权利与要求组合起来即为对应的协议权利与要求。如果组合中没有该条例，则表明组合的权利与要求内容与该条例相反。例如没有表明NC即为可商用，没有表明ND即为可二次创作。<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[bilibili 靈雲Reign 科普：知识共享许可协议(CC) 4.0协议](https://www.bilibili.com/read/cv6986215/)">[2]</span></a></sup><br>你可以根据自己的需求，合理地选择自己需要的协议。不少的Hexo主题都具备在文末自动添加CC协议提示的功能，你可以在主题文档里查找相关帮助。</p><p>除了上述六种之外，还有一种CC协议，其名<strong>CC0</strong>。</p><h2 id="CC0？那是什么？"><a href="#CC0？那是什么？" class="headerlink" title="CC0？那是什么？"></a>CC0？那是什么？</h2><p><strong>CC0</strong>是CC协议以外的一种版权声明协议。采用该协议即宣布作者<strong>放弃该创作的一切版权</strong>，该创作<strong>进入公有领域</strong>。<br>采用此协议后，该创作则可以被不加限制的引用、转载、二次改编、再发表、运用于商业用途，使用者可以不标示该创作的来源和作者。</p><div class="note note-warning">            <p><strong>注意</strong><br>中国大陆地区并不允许著作者放弃自己的版权，任何情况下引用版权作品的最低限度是标明作者。因此CC0并没有中国大陆的版本。<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="[为什么你没授权就能用大大的作品？？—“知识共享”（CC协议）简单介绍](https://www.bilibili.com/read/cv2536622)">[3]</span></a></sup></p>          </div><p>采用这份协议更像是一种“宇宙安全声明”，即“我不会追究任何人的使用，无论使用于何种用途”，然而这并不具备法律效益。</p><h1 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h1><p>在创作共享许可下的作品在著作权法中生效。包括：书籍，戏剧，电影，音乐，文章，图片，博客和网站。不建议软件在CC许可下发布。</p><p>该协议在规定使用者的义务的同时，也赋予了使用者应有的权利。创作共享许可非独占或不可撤销，任何作品或在共享许可下获得的作品副本可根据该许可继续使用。</p><div class="note note-warning">            <p><strong>CC协议并不剥夺创作者的版权或获得报酬的权利。</strong><br>即使你使用了CC BY协议或者其他不含有NC的协议对你的作品进行授权，使用者同样也可以联系你并向你支付报酬。<br>当你采用CC BY协议在网上发布了自己的作品后，也不代表你没有索取或获得因商业使用而支付的报酬的权利。<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="[为什么你没授权就能用大大的作品？？—“知识共享”（CC协议）简单介绍](https://www.bilibili.com/read/cv2536622)">[3]</span></a></sup></p>          </div><h1 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h1><p>还挺广泛的</p><ul><li>维基百科、百度百科、萌娘百科等众多Wiki平台</li><li>本篇博客</li><li>国内网站善用佳软采用了CC0协议</li></ul><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://creativecommons.org/">Creative Commons官网</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://www.bilibili.com/read/cv6986215/">bilibili 靈雲Reign 科普：知识共享许可协议(CC) 4.0协议</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://www.bilibili.com/read/cv2536622">为什么你没授权就能用大大的作品？？—“知识共享”（CC协议）简单介绍</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://baike.baidu.com/item/%E7%9F%A5%E8%AF%86%E5%85%B1%E4%BA%AB%E8%AE%B8%E5%8F%AF%E5%8D%8F%E8%AE%AE/23190065?fr=aladdin#3">知识共享许可协议_百度百科</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>杂谈</tag>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅谈微推，带你走进微推编辑的世界！</title>
    <link href="/2022/09/16/%E6%B5%85%E8%B0%88%E5%BE%AE%E6%8E%A8/"/>
    <url>/2022/09/16/%E6%B5%85%E8%B0%88%E5%BE%AE%E6%8E%A8/</url>
    
    <content type="html"><![CDATA[<p>在宣传部当了一年的打工人，记录一些经验以供参考。“道可道，非恒道”。知识与能力有限，恳请各位多多包涵。</p><span id="more"></span><h1 id="基本格式要求"><a href="#基本格式要求" class="headerlink" title="基本格式要求"></a>基本格式要求</h1><p>这个是我们 <a href="https://mp.weixin.qq.com/s/XmCRal9bIryb0p0vEkh_zA">电光火时</a> 的基础格式要求：</p><div class="note note-info">            <p><strong>基础字号：</strong>14<br><strong>字间距：</strong>2<br><strong>页边距：</strong>12<br><strong>加上固定的版头版尾</strong><br><strong>独立的图片，宽度要选90%</strong><br>大段段落两端对齐<br>标题与文字之间、图片上下、大段段落之间加一行空行<br>开头结尾居中，长短句错落有致，建议加分割线或者小图片与正文部分分割<br>设计颜色统一<br>图片多多</p>          </div><p>嘛，我们用的是 <a href="https://xiumi.us/#/">秀米</a> ，不得不说秀米操作挺容易上手的，对于我一个稍微了解一些Web和Office的人来说，可以直接使用。<br>为什么我要提一句Web呢？这个我们后面会讲……</p><h1 id="怎样高效率排版？"><a href="#怎样高效率排版？" class="headerlink" title="怎样高效率排版？"></a>怎样高效率排版？</h1><h2 id="一般做法"><a href="#一般做法" class="headerlink" title="一般做法"></a>一般做法</h2><p>一般来说，我收到的原稿都是这样的：<br>标题、开头结尾、正文以及图片已经准备好，现在你要做的是在秀米上把它们排出来，然后交给负责这个的副部去审核。副部审过了给部长，再给老师，最后往微信公众号上去发。<br>首先你要浏览一遍他们发给你的文档——毕竟你的副部应该也没有阅读过里面的内容——以便你熟悉你要排版的文章的基本结构。<br>通常，正文的格式是这样的……</p><div class="note note-primary">            <p><strong>标题</strong><br>一堆字，还有一些图，图片偶尔不够多<br><em>可能会有的过渡段</em><br><strong>标题</strong><br>一堆字，还有一些图，图片偶尔不够多<br><em>可能会有的过渡段</em><br>（重复上述结构……）</p>          </div><p>下面我们来看看那堆字里面，一些可能的情况</p><h3 id="具体内容分类"><a href="#具体内容分类" class="headerlink" title="具体内容分类"></a>具体内容分类</h3><h4 id="人物介绍"><a href="#人物介绍" class="headerlink" title="人物介绍"></a>人物介绍</h4><p><img src="/img/post/%E5%BE%AE%E6%8E%A8%E5%85%A5%E9%97%A8/%E7%A7%80%E7%B1%B3%E4%BA%BA%E7%89%A9%E4%BB%8B%E7%BB%8D.jpg" alt="以我最近做的某篇微推为例……"><br>通常是由人物照片、姓名、班级、简介组成，我们可以在秀米上找到人物介绍相关的卡片，然后修改模板中的内容。</p><div class="note note-warning">            <p><strong>注意</strong><br>人物介绍时应该让图片和介绍交错，比如上面的人物图片在左介绍在右，那么下面一个人的人物图片就要在右而介绍在左。<br>防止排版呆板，不够生动灵活</p>          </div><p>当然，也可以是这样的：<br><img src="/img/post/%E5%BE%AE%E6%8E%A8%E5%85%A5%E9%97%A8/%E7%A7%80%E7%B1%B3%E4%BA%BA%E7%89%A9%E4%BB%8B%E7%BB%8D2.jpg" alt="以别人最近做的某篇微推为例……"><br>这篇微推是向新人们介绍他们的下班党员，如此排版会让人觉得亲近可爱。</p><div class="note note-warning">            <p><strong>注意</strong><br>本身就很生动灵活了，不需要再去交错。</p>          </div><h4 id="分段阐述"><a href="#分段阐述" class="headerlink" title="分段阐述"></a>分段阐述</h4><p><img src="/img/post/%E5%BE%AE%E6%8E%A8%E5%85%A5%E9%97%A8/%E5%88%86%E6%AE%B5%E9%98%90%E8%BF%B0.jpg" alt="还是以我最近做的某篇微推为例……"><br>比较好的格式是这样的</p><div class="note note-primary">            <p>1、标题<br>一张图片（或者两张图片并列、四张图片两两并列）<br>长段文字（标记重点）<br>一张图片（或者两张图片并列、四张图片两两并列）<br>长段文字（标记重点）</p>          </div><h4 id="感言"><a href="#感言" class="headerlink" title="感言"></a>感言</h4><p>这个比较灵活，可以根据你找到的合适的模板来，也可以魔改秀米给出的模板。<br>比较好的格式，像这样：</p><h4 id="个人专门介绍"><a href="#个人专门介绍" class="headerlink" title="个人专门介绍"></a>个人专门介绍</h4><p><img src="/img/post/%E5%BE%AE%E6%8E%A8%E5%85%A5%E9%97%A8/%E4%B8%AA%E4%BA%BA%E4%B8%93%E9%97%A8%E4%BB%8B%E7%BB%8D.jpg" alt="以一位朋友为例……"><br>可能涉及ta的任职经历、获奖经历等等，这些要注意左端对齐，一行一条，最好不要超行<br>由于设备不同，不同手机的阅读效果可能不尽相同，有的手机上难免会出现超行换行的情况</p><h3 id="处理两图并列"><a href="#处理两图并列" class="headerlink" title="处理两图并列"></a>处理两图并列</h3><p>在<code>布局-&gt;基础布局</code>里找到第二个布局（名为”二列布局“），把它拖到编辑器里去<br>然后双击其中一栏，在图库里点一下你想用的图片<br>记得调整一下图片的宽度，我的推荐是每个图片95%</p><h2 id="排版秘诀"><a href="#排版秘诀" class="headerlink" title="排版秘诀"></a>排版秘诀</h2><p>先抛出一个问题：<strong>秀米给出的主题不好用，怎么办？</strong><br>自己调！<br>那要是不知道怎么调呢？<br>别急，我有一个简单朴素却又异常好用的方法！</p><div class="note note-primary">            <p>图片圆角+卡片圆角+文字标重点+合理配色</p>          </div><p>图片圆角和卡片圆角，仅我一家会用，现在他们都还以为是我用了某些特殊的主题:)<br>比如在Web里，我们就经常用到圆角，微信推送不就是网页么，顺藤摸瓜，我们会发现秀米在这里也为圆角做了设计。<br>其他人到是用过圆角图片，他的做法是：收藏我的排版里的圆角图片，放进自己的微推里，然后修改图片<br>但是他不会调整圆角半径:)<br>原理很简单：点击已经插入了的图片，在上方图片编辑栏里找到“边框”并点击，然后修改弧度的值。<br><img src="/img/post/%E5%BE%AE%E6%8E%A8%E5%85%A5%E9%97%A8/%E7%A7%80%E7%B1%B3%E5%9C%86%E8%A7%92%E5%9B%BE%E7%89%87.jpg" alt="真的很简单"><br>独立大图片（如图所示的就是所谓“独立大图片”）我通常使用12~16px，两图并列通常用8~12px，卡片内部的独立大图用12px，并列良图用8px。<br>“大图片”的弧度 &gt; 两图并列的每一个图片自己的弧度<br>独立大图片宽度用90%，两图并列的每个图片宽度用95%</p><div class="note note-warning">            <p><strong>注意</strong><br>通篇下来，圆角要保持一致，比如所有的独立大图片都应该是16px，不能有的是16px有的是12px，包括卡片等等，其它的同理。<br>如果你的卡片或者卡片里的图片用了圆角，或者是某些独立大图片用了圆角，那么其它的东西（卡片、卡片内图片、独立大图片等）最好也应该设置圆角。</p>          </div><h1 id="写原创微推"><a href="#写原创微推" class="headerlink" title="写原创微推"></a>写原创微推</h1><p>咕咕咕……改天再写啦……<br>哈哈，开个玩笑别当真φ(&gt;ω&lt;*)<br>难在选题，这个我也不好说，看灵感，看素材<br>写出整篇来是第二个难题，不过，大不了你可以写一些“大白话”作为补充<br>开头结尾，我总是希望自己写的高端一些。普通的也没问题。</p>]]></content>
    
    
    
    <tags>
      
      <tag>杂谈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dosbox下使用debug</title>
    <link href="/2022/04/03/dosbox%E4%B8%8B%E4%BD%BF%E7%94%A8debug/"/>
    <url>/2022/04/03/dosbox%E4%B8%8B%E4%BD%BF%E7%94%A8debug/</url>
    
    <content type="html"><![CDATA[<p>debug是DOS环境下调试程序的得力助手。</p><span id="more"></span><h1 id="进入debug"><a href="#进入debug" class="headerlink" title="进入debug"></a>进入debug</h1><p>首先<code>mount C 路径</code>然后<code>C:</code>在DOSBOX中设定并选择C盘作为路径</p><p><img src="https://s2.loli.net/2022/04/03/efKzjOXPS9VYwxc.png" alt="设定C盘.png"></p><p>然后输入<code>debug</code>并敲回车，就可以进入debug程序。这样启动的debug程序只是能对整个内存空间进行操作，并不会载入我们想要调试的程序。</p><p>当然，也可以<code>debug 需要调试的程序的路径</code>来调试程序</p><p><img src="https://s2.loli.net/2022/04/03/VEoYeXbnqSg3GdL.png" alt="debug调试程序.png"></p><h1 id="开始用指令调试程序"><a href="#开始用指令调试程序" class="headerlink" title="开始用指令调试程序"></a>开始用指令调试程序</h1><p>在debug里，指令不区分大小写，debug的命令只有一个字母，后面的其他值可以加空格也可以不加空格。</p><p>比如<code>rax</code>和<code>r ax</code>等价</p><p>在写的时候发现了一篇讲得很详细的文章<a href="https://blog.csdn.net/never_late/article/details/111193302">https://blog.csdn.net/never_late&#x2F;article&#x2F;details&#x2F;111193302</a>，，，</p><h2 id="r命令"><a href="#r命令" class="headerlink" title="r命令"></a>r命令</h2><p><strong>直接输入：</strong>查看寄存器的值和当前cs:ip所指向的内存处的指令。</p><p><img src="https://s2.loli.net/2022/04/03/fKeqVjl8U9FCX6m.png" alt="r命令.png"></p><p><strong>r+寄存器名：</strong>查询并编辑寄存器的值</p><p>比如输入rax并回车后，首先会显示ax的取值，接着需要你输入一个小于等于4位的十六进制数字并按回车，修改ax的值。如果不想改变其值，直接按下回车即可。</p><p><img src="https://s2.loli.net/2022/04/03/T1PaY2xGK7p4gE8.png" alt="rax并修改值.png"></p><h2 id="u命令"><a href="#u命令" class="headerlink" title="u命令"></a>u命令</h2><p><strong>直接输入：</strong>查看cs:ip处的一段反汇编代码</p><p><img src="https://s2.loli.net/2022/04/03/nM2dPVL5K7OCgQA.png" alt="u命令直接输入.png"></p><p><strong>u+偏移地址&#x2F;段地址:偏移地址：</strong>查看目标地址处的一段反汇编代码。如果只写偏移地址，就会显示cs:偏移地址处的一段反汇编代码</p><p><img src="https://s2.loli.net/2022/04/03/euMyNtbQTsi7hIX.png" alt="u命令.png"></p><h2 id="t命令"><a href="#t命令" class="headerlink" title="t命令"></a>t命令</h2><p><strong>直接输入：</strong>执行一行代码（汇编代码），相当于高级语言调试里的逐语句、单步跟踪</p><p><strong>t+数字：</strong>执行若干行代码，行数取决于你的输入</p><p>当然了，使用t命令会使寄存器ip的值的变化</p><h2 id="d命令"><a href="#d命令" class="headerlink" title="d命令"></a>d命令</h2><p><strong>直接输入：</strong>从ds:0开始显示内存中的数据。会在右侧显示程序对应的ASCII值，如果对应的字符无法显示则显示<code>.</code></p><p>多次使用d命令，可以改变查看的内存的偏移地址，以查看后面的数据</p><p><strong>d+数字：</strong>从当前偏移地址+数字的位置开始向后显示内存中的数据</p><p><strong>d+起始地址：</strong>显然，很自然，不难得到，略。</p><p><strong>d+起始地址 终止地址：</strong>显然，很自然，不难得到，略。</p><p><strong>d+起始地址 长度：</strong>显然，很自然，不难得到，略。</p><p><img src="https://s2.loli.net/2022/04/03/ndT5pzN8uUtViF6.png" alt="d命令.png"></p><h2 id="a命令"><a href="#a命令" class="headerlink" title="a命令"></a>a命令</h2><p><strong>直接输入：</strong>编辑cs:ip处的代码</p><p><strong>a+偏移地址&#x2F;段地址:偏移地址</strong>：修改制定位置处的代码。</p><p>就是在对应的地址上边写汇编，并且只能使用十六进制的数字。按下回车后你的汇编指令会被直接翻译成二进制并放到相应的位置上去。什么也不输入按下回车才会结束编辑。</p><h2 id="e命令"><a href="#e命令" class="headerlink" title="e命令"></a>e命令</h2><p>与a类似，直接修改内存中的数值。</p><h2 id="g命令"><a href="#g命令" class="headerlink" title="g命令"></a>g命令</h2><p>Go！</p><p>执行程序</p><p>可以设置断点：<code>g=地址</code>，将在指定地址处触发断点</p><h2 id="f命令"><a href="#f命令" class="headerlink" title="f命令"></a>f命令</h2><p>fill.</p><p>使用指定的值覆盖制定位置中的值</p><p>f+范围+填充列表</p><p><img src="https://s2.loli.net/2022/04/03/M6Yn1EpLPXBvrcH.png" alt="f命令.png"></p><h2 id="q命令"><a href="#q命令" class="headerlink" title="q命令"></a>q命令</h2><p>退出debug</p><h1 id="咕咕咕……"><a href="#咕咕咕……" class="headerlink" title="咕咕咕……"></a>咕咕咕……</h1><p>鸽了鸽了</p>]]></content>
    
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>汇编</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>草记 | 创新创业大赛专家指导会</title>
    <link href="/2022/03/29/%E8%8D%89%E8%AE%B0-%E5%88%9B%E6%96%B0%E5%88%9B%E4%B8%9A%E5%A4%A7%E8%B5%9B%E4%B8%93%E5%AE%B6%E6%8C%87%E5%AF%BC%E4%BC%9A/"/>
    <url>/2022/03/29/%E8%8D%89%E8%AE%B0-%E5%88%9B%E6%96%B0%E5%88%9B%E4%B8%9A%E5%A4%A7%E8%B5%9B%E4%B8%93%E5%AE%B6%E6%8C%87%E5%AF%BC%E4%BC%9A/</url>
    
    <content type="html"><![CDATA[<p>跟着他说的大概记了一些</p><hr><blockquote><p>创造是最重要的</p></blockquote><p>四个关键字：创新、创业、创意、创造</p><p>四创的融合</p><p>可以延续上一届学长留下来的成果“一直传承下来”</p><p>可以用别人的软件等</p><p>但是<em>互联网+大赛</em>更加看重自己的创意创造。（已经创立的公司可以进行授权）</p><br/><p><img src="https://s2.loli.net/2022/03/29/rP7KJfgZBGw59Lo.png" alt="这里是截图..."></p><p><img src="https://s2.loli.net/2022/03/29/cBXKG1YqvFhoM7N.png" alt="这里还是截图..."></p><br/><p><strong>会查重</strong>，要注意查重率</p><p>维普查重</p><br/><p>创青春 - 国赛直通车：特别优质的项目可以通过这个，（八项活动都参加，取得较好成绩）</p><p>细节：“你自己去看”</p><br/><p>评审项目的人：</p><p>更多是企业的人、政府（例如环保类）、行业领军人物（马化腾、乡村振兴的人）</p><br/><blockquote><p>站在社会的视角去看项目能不能行得通</p></blockquote><br/><p>不能<strong>侵犯</strong>他人知识产权，不得<strong>借用</strong>他人项目参赛</p><p>授权方法：写一个授权书；找一个第三方的证明（比如找长理背书）</p><blockquote><p>剽窃盗用 -&gt; 取消资格</p></blockquote><p>已经获奖的不能再次报名</p><p>比如关注营业执照的<strong>法人</strong>是否符合相关要求</p><p>在报名时要递交所有关于具有法律效益的软件权利的<br>法人代表的签字和公司的授权<br>个人专利也要授权</p><p>已经工商注册的公司，单位概况等需要递交</p><p>营业执照复印件、税务登记证、股权结构balabala……</p><p>企查查、天眼查</p><br/><hr><br/><p>注意一些说法是否符合当下的说法</p><blockquote><p>脱贫攻坚 -&gt; 巩固脱贫成果</p></blockquote><br/><p>区域合作、文创项目</p><p>湖南省<strong>三高四新战略</strong></p><p>做项目的时候<strong>一定要把三高四新战略加进去</strong></p><p>稍微老一点的：<strong>长株潭一体化</strong></p><br/><p>指导老师&lt;&#x3D;3，团队人数&lt;&#x3D;10</p><p>跨校组队：例如找湖大，报同一个项目时确定是谁去报</p><p>去找不同专业不同学院的人（否则是致命一击）</p><p><strong>一定要有懂得营销的学生</strong></p><p><strong>一定要有懂得营销的学生</strong></p><p><strong>一定要有懂得营销的学生</strong></p><br/><p>已经注册的公司参赛会有优势</p><p>但是要是项目的法人代表最好。</p><br/><p>不是文字越多越好，不可以太多，要精简，比如项目概况可以一页弄完</p><p>关注商业策划书的逻辑，比如背景-&gt;做了什么-&gt;产品是什么-&gt;服务-&gt;……</p><br/><p>评委不关心产品用什么设备生产，只关注产品如何生产</p><p>没有卖，就预测一下销售情况</p><p>发现是假的，就会扣分</p><p>要分析就具体地写一些内容</p><br/><p>社会实践性</p><p>注重时间、过程材料的收集</p><p>综合图标指引，使得评委知道研发了什么</p><br/><p>长理的许多项目不乏技术，但是缺乏商业的</p><p>“投资圈”APP</p><p><a href="http://www.xytzq.cn/">www.xytzq.cn</a></p><br/><h1 id="PPT"><a href="#PPT" class="headerlink" title="PPT"></a>PPT</h1><p>20页以内</p><br/><p>不要太过于对宏观、大行业的分析、痛点，可以选择简述</p><br/><p>PPT要专业，不要搞太多文字</p><br/><h1 id="技术研发"><a href="#技术研发" class="headerlink" title="技术研发"></a>技术研发</h1><p><strong>创新</strong>、<strong>创新</strong>、<strong>创新</strong>！</p><p><strong>创新</strong>、<strong>创新</strong>、<strong>创新</strong>！</p><p><strong>创新</strong>、<strong>创新</strong>、<strong>创新</strong>！</p><p>先总后细，先讲大的产品，再讲细的</p><p>项目类核心技术的描述、同类产品的对比</p><p>没有核心技术：商业模式（比如茶颜悦色，他们的文创、销售模式、服务方式，虽然没有核心技术但是商业模式好）</p><br/><h1 id="文档结构"><a href="#文档结构" class="headerlink" title="文档结构"></a>文档结构</h1><ol><li>项目简介</li><li>痛点分析</li><li>团队事件过程材料</li><li>技术研发产品</li><li>团队介绍，如何协作</li><li>财务分析、成本、利润预测、可预测的收入</li><li>社会价值社会依依</li><li>未来展望</li><li>附件</li></ol><p><strong>讲清楚营销手段到底怎么做</strong></p><p>营销很重要</p><p>要有口号</p>]]></content>
    
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>人力资源机器1-6满星攻略</title>
    <link href="/2022/02/09/%E4%BA%BA%E5%8A%9B%E8%B5%84%E6%BA%90%E6%9C%BA%E5%99%A81-6%E6%BB%A1%E6%98%9F%E6%94%BB%E7%95%A5/"/>
    <url>/2022/02/09/%E4%BA%BA%E5%8A%9B%E8%B5%84%E6%BA%90%E6%9C%BA%E5%99%A81-6%E6%BB%A1%E6%98%9F%E6%94%BB%E7%95%A5/</url>
    
    <content type="html"><![CDATA[<p>《人力资源机器》（原名：<em>Human Resource Machine</em>，又译：<em>程序员升职记</em>）这款游戏，所使用的游戏规则接近于计算机的汇编，可视化了底层代码，去其繁，益其乐。无论是入坑编程还是初试算法思想都是非常好的选择。当然，仅仅是作为一款益智游戏也是蛮不错的。从一名基层员工，一步一步从基层爬上巅峰，是不是特别地有意思？</p><span id="more"></span><h1 id="简单地介绍一下"><a href="#简单地介绍一下" class="headerlink" title="简单地介绍一下"></a>简单地介绍一下</h1><p>在HRM里，你将会扮演<span title="实际上，我也不太清楚是不是叫这个名字">Human Resource Machine公司</span>的一名职员，从基层开始锻炼，一步一步走上职场巅峰（然后被解雇？）。将命令合理地组合，处理上司给你的数据然后输出正确的结果，从而通关，让电梯上升一层。在通关的同时也会有一些剧情（对，HRM这小游戏有一点剧情）。</p><h2 id="玩法"><a href="#玩法" class="headerlink" title="玩法"></a>玩法</h2><p><img src="https://s2.loli.net/2022/02/09/3crykzHmIqLCPeV.png" alt="HRM，操作界面.png"></p><p>游戏的场景在一间办公室里，最左侧是输入（INBOX），右边是输出（OUTBOX），中间是地砖（相当于寄存器&#x2F;RAM），你需要在界面最右侧的指令栏里，通过点击+拖拽组合你的指令，然后点击界面下方的“运行”（上司打断道：听清楚，这叫播放！），你所扮演的员工将会按照程序完成任务。随着剧情的推进，办公室里的场景也有一些细节上的变化，它们正等待着你的仔细观察。</p><p><strong>通关方法：</strong>只需要输出结果正确即可通关。当然了，你需要编写合适的程序从而保障任务得以顺利完成，并且上司会暗中拿同样类型但是不同的输入数据去监测你的程序，一旦不能通过某组测试数据，我们也是无法通关的。</p><p><strong>强迫症诊断标准：</strong>游戏里还有挑战内容，通过较少的步数，使用更少的指令完成任务，可以分别获得一星的奖励。当然，有些任务可能无法一箭双雕，需要通过不同代码分别获得两颗星的奖励。</p><p><strong>便捷操作：</strong>游戏提供了撤销、复制、粘贴、清除等功能，并且你还能在你的代码和地砖上写注释！真的是非常贴心。</p><p><img src="https://s2.loli.net/2022/02/09/i93wDePZjqlxWA6.png" alt="HRM，电梯.png"></p><p><strong>电梯：</strong>不完成前一层的任务，就无法进入下一层，或者是获得别的分支。就像生活一样，不克服困难，怎能进入下一个阶段？</p><h2 id="指令都有哪些？"><a href="#指令都有哪些？" class="headerlink" title="指令都有哪些？"></a>指令都有哪些？</h2><p>我们会在指令首次出现的层里一一介绍。</p><h2 id="我的体验"><a href="#我的体验" class="headerlink" title="我的体验"></a>我的体验</h2><p>与编程不同的是，在HRM里没有常量，包括每一层地砖上自带的数字，你可以随意使用和修改。加减乘除，各种运算，也比以往有了更加灵活的处理方式，在多次尝试（或者查攻略）之后你会发现那种处理方式到底有多么令人称赞。</p><p>花了很久的时间一点一点改进，一点一点优化，终于拿了HRM的全部满星。怎能不写一篇攻略来庆祝一下？</p><p><img src="https://s2.loli.net/2022/02/09/Zkdrq94soOLbJl5.jpg" alt="QQ图片20220201000008.jpg"></p><h1 id="攻略"><a href="#攻略" class="headerlink" title="攻略"></a>攻略</h1><p>HRM的输入和输出的数量是确定的。也就是说，你可以连续写<code>inbox</code>和<code>outbox</code>若干次，从而完成任务。</p><p>在我写的攻略系列中，你可能会看到的代码有以下几种类型：</p><ul><li>最朴素的解法：暴力代码</li><li>同时满星的代码：AK代码</li><li>步数超了，但是指令条数达成目标的代码：TLE代码</li><li>指令条数超了，但是步数没超的代码：MLE代码</li></ul><h2 id="一些基本的要素"><a href="#一些基本的要素" class="headerlink" title="一些基本的要素"></a>一些基本的要素</h2><p>所有的东西都可以与游戏画面一一对应。当你不理解攻略中的某些操作的时候，再来看看这里会比较好。</p><ul><li><code>手</code>：<del>就是手</del>员工的手，手上可能拿着一样东西，从而让这样东西参与到程序中来；也可能空手。简言之：可拿可不拿，只能拿一样东西，拿新的东西会替换掉旧的东西。据说，这是比Minecraft的史蒂夫的麒麟臂更强的手，它可以在短时间内拿起任何东西，也可以抛出手上的任何东西，然后把它们摔碎！（误）每当你拿取新的东西时，手上原有的东西就会被员工抛出，然后在地上摔碎。当然了，如果此前你手上没有东西，那么显然员工只会把新的东西好好地放在手上。</li><li><code>inbox</code>：<code>inbox</code>就是界面左边的传送带。传送带上有一些<code>物品</code>，<code>物品</code>可能是数字，也可能是单个的字符。你可以每次从<code>inbox</code>内拿出一件物品，然后放在手上。如果此前手上已经有了东西，那么新拿的东西会替换掉旧的东西</li><li><code>outbox</code>：<code>outbox</code>就是界面右边的传送带，你将把手上的物品放上去。当然，员工空手时是不能向传送带放东西的，把物品放上去之后，员工的手就空了。</li><li><code>地砖</code>：地砖就是画面中间的那些方格，每个方格都有唯一的一个数字编号（即地址），你可以通过地址来访问它们。地砖相当于寄存器或者是ROM，它们都能存放唯一的物品。你可以从地砖上复制一份物品，也可以用手上的物品去替换它原有的内容。</li></ul><h2 id="电梯1层-收发室"><a href="#电梯1层-收发室" class="headerlink" title="电梯1层-收发室"></a>电梯1层-收发室</h2><h3 id="新指令！"><a href="#新指令！" class="headerlink" title="新指令！"></a>新指令！</h3><p><code>→inbox</code>：从<code>inbox</code>里面拿出一件<code>物品</code>，放在<code>手</code>上。我们也简称这条指令为<code>inbox</code>。</p><p><code>outbox→</code>：把你手上的东西放进<code>outbox</code>里。同样地，简称这条指令为<code>outbox</code>。</p><h3 id="思路是……"><a href="#思路是……" class="headerlink" title="思路是……"></a>思路是……</h3><p>解：略，请读者自证（手动滑稽）</p><p><strong>AK代码：</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-comment">-- HUMAN RESOURCE MACHINE PROGRAM --</span><br><br>    INBOX   <br>    OUTBOX  <br>    INBOX   <br>    OUTBOX  <br>    INBOX   <br>    OUTBOX  <br><br></code></pre></td></tr></table></figure><h2 id="电梯2层-繁忙的收发室"><a href="#电梯2层-繁忙的收发室" class="headerlink" title="电梯2层-繁忙的收发室"></a>电梯2层-繁忙的收发室</h2><h3 id="新指令！-1"><a href="#新指令！-1" class="headerlink" title="新指令！"></a>新指令！</h3><p><code>jump</code>：当程序运行遇到到<code>jump</code>时，程序就会跳转到箭头所指位置，然后继续执行后面的命令。运用<code>jump</code>，我们可以实现跳转，也可以实现复读机一样的循环。</p><h3 id="思路是……-1"><a href="#思路是……-1" class="headerlink" title="思路是……"></a>思路是……</h3><p>这关告诉了我们如何使用<code>jump</code>创建一个循环，就是跑到前边去，把自己以前执行过的命令再执行一遍。这关有两种思路，一种是直接反复使用INBOX和OUTBOX打暴力；另一种，也是最一般的思路，就是把一对<code>inbox</code>和<code>outbox</code>放在循环里</p><p><strong>TLE代码：</strong></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-comment">-- HUMAN RESOURCE MACHINE PROGRAM --</span><br><br><span class="hljs-keyword">a</span>:<br>    INBOX   <br>    OUTBOX  <br>    JUMP     <span class="hljs-keyword">a</span><br><br></code></pre></td></tr></table></figure><p>MLE代码是想告诉我们，在这个游戏机制之下，想要获得满星，有可能要写非常复杂的代码。这个思想在后面会发挥很大的作用。<strong>MLE代码：</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-comment">-- HUMAN RESOURCE MACHINE PROGRAM --</span><br><br>    INBOX   <br>    OUTBOX  <br>    INBOX   <br>    OUTBOX  <br>    INBOX   <br>    OUTBOX  <br>    INBOX   <br>    OUTBOX  <br>    INBOX   <br>    OUTBOX  <br>    INBOX   <br>    OUTBOX  <br>    INBOX   <br>    OUTBOX  <br>    INBOX   <br>    OUTBOX  <br>    INBOX   <br>    OUTBOX  <br>    INBOX   <br>    OUTBOX  <br>    INBOX   <br>    OUTBOX  <br>    INBOX   <br>    OUTBOX  <br>    INBOX   <br>    OUTBOX  <br><br></code></pre></td></tr></table></figure><h2 id="电梯3层-复印楼层"><a href="#电梯3层-复印楼层" class="headerlink" title="电梯3层-复印楼层"></a>电梯3层-复印楼层</h2><h3 id="新指令！-2"><a href="#新指令！-2" class="headerlink" title="新指令！"></a>新指令！</h3><p><code>copyfrom</code>：将地砖上的物品复制到你的手上。使用它会替换你手上原有的内容。</p><h3 id="思路是……-2"><a href="#思路是……-2" class="headerlink" title="思路是……"></a>思路是……</h3><p>这层就是要教给我们怎么使用<code>copyfrom</code>。而且要我们直接输出”BUG“，非常好玩儿。</p><p>思路：分别直接复制B、U、G，复制完成后就直接输出就好。</p><p><strong>AK代码：</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-comment">-- HUMAN RESOURCE MACHINE PROGRAM --</span><br><br>    COPYFROM <span class="hljs-number">4</span><br>    OUTBOX  <br>    COPYFROM <span class="hljs-number">0</span><br>    OUTBOX  <br>    COPYFROM <span class="hljs-number">3</span><br>    OUTBOX  <br><br></code></pre></td></tr></table></figure><h2 id="电梯4层-解扰码器"><a href="#电梯4层-解扰码器" class="headerlink" title="电梯4层-解扰码器"></a>电梯4层-解扰码器</h2><h3 id="新指令！-3"><a href="#新指令！-3" class="headerlink" title="新指令！"></a>新指令！</h3><p><code>copyto</code>：既然能<code>copyfrom</code>，那么反过来就能<code>copyto</code>。顾名思义，把手上的内容复制到地砖上。使用它会替换地砖原有的内容。</p><h3 id="思路是……-3"><a href="#思路是……-3" class="headerlink" title="思路是……"></a>思路是……</h3><p>告诉我们如何使用<code>copyto</code>。</p><p>AK代码的思路是，如果输入的两个东西分别是甲、乙，那么输出的时候就是乙、甲。先取一个输出，然后记录一下（<code>copyto</code>到地砖上），再取第二个输入，直接把第二个输出出去，然后再把第一个拿起来（<code>copyfrom</code>），输出出去。</p><p><strong>AK代码：</strong></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-comment">-- HUMAN RESOURCE MACHINE PROGRAM --</span><br><br><span class="hljs-keyword">a</span>:<br>    INBOX   <br>    COPYTO   <span class="hljs-number">0</span><br>    INBOX   <br>    OUTBOX  <br>    COPYFROM <span class="hljs-number">0</span><br>    OUTBOX  <br>    JUMP     <span class="hljs-keyword">a</span><br><br></code></pre></td></tr></table></figure><h2 id="电梯5层-咖啡时间"><a href="#电梯5层-咖啡时间" class="headerlink" title="电梯5层-咖啡时间"></a>电梯5层-咖啡时间</h2><p>剧情关，没有任务，以后会把剧情放在一块儿写。</p><h2 id="电梯6层-多雨之夏"><a href="#电梯6层-多雨之夏" class="headerlink" title="电梯6层-多雨之夏"></a>电梯6层-多雨之夏</h2><h3 id="新指令！-4"><a href="#新指令！-4" class="headerlink" title="新指令！"></a>新指令！</h3><p><code>add</code>：无论你拿着什么值，都会讲地砖上制定地砖的内容加上你手中的值，结果再返回到你的手中。</p><h3 id="思路是……-4"><a href="#思路是……-4" class="headerlink" title="思路是……"></a>思路是……</h3><p>幼儿园级别的题</p><p><strong>AK代码：</strong></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-comment">-- HUMAN RESOURCE MACHINE PROGRAM --</span><br><br><span class="hljs-keyword">a</span>:<br>    INBOX   <br>    COPYTO   <span class="hljs-number">0</span><br>    INBOX   <br>    ADD      <span class="hljs-number">0</span><br>    OUTBOX  <br>    JUMP     <span class="hljs-keyword">a</span><br><br></code></pre></td></tr></table></figure><h1 id="勘误"><a href="#勘误" class="headerlink" title="勘误"></a>勘误</h1><p>等我把Github Commits弄好就好了</p>]]></content>
    
    
    <categories>
      
      <category>游戏攻略</category>
      
    </categories>
    
    
    <tags>
      
      <tag>游戏</tag>
      
      <tag>人力资源机器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jsoncpp的安装与使用</title>
    <link href="/2022/02/02/jsoncpp%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/02/02/jsoncpp%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>一个小工程需要在C++中使用json，于是我找到了库jsoncpp。第一次在Visual Studio中安装和使用jsoncpp库的时踩了一些坑，花了半天的时间解决了问题。写一篇博客来分享jsoncpp的安装与使用方法。</p><span id="more"></span><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="写在开始之前"><a href="#写在开始之前" class="headerlink" title="写在开始之前"></a>写在开始之前</h2><p>我的jsoncpp库的版本：jsoncpp-1.8.4</p><p>示例项目的名称：jsontest</p><p>路径：D:\proj\jsoncppTEST\</p><h2 id="必看！必看！必看！"><a href="#必看！必看！必看！" class="headerlink" title="必看！必看！必看！"></a>必看！必看！必看！</h2><p>安装过程中将会用到<a href="https://git-scm.com/downloads">git bash</a></p><p>在安装jsoncpp之前，确保你的Visual Studio安装了<em>英文语言包</em>，否则最后一步将会无法执行。如果没有安装英文语言包，请在<em>Visual Studio修改程序</em>（在<em>程序和功能</em>里面找）里面添加这个语言包。</p><p>直接在github上下载jsoncpp，然后想百(CS)度(DN)上说的那样去做是没法成功的。</p><p>那么百(CS)度(DN)上怎么说的？</p><blockquote><p>首先下载jsoncpp这个库</p><p>打开jsoncpp\makefiles\vs71\jsoncpp.sln，然后编译以生成json_vc71_libmtd.lib（工程把json_vc71_libmtd.lib生成到了jsoncpp\build\vs71\debug\lib_json下）</p><p>然后把jsoncpp\include\json\下的文件以及json_vc71_libmtd.lib复制到工程目录下</p><p>把这些文件添加到工程中，并且修改项目属性，修改方法为balabalabalabala…</p><p>然后就大功告成</p></blockquote><p>如果这样做，那么恭喜你，VS会亲切地告诉你：</p><p><img src="https://s2.loli.net/2022/02/02/irdQqgKj4zsP1yV.png" alt="jsoncpp的安装与使用-亲切地告诉你.png"></p><p>（当然这里使用的是另一个项目）</p><h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><p>根据<a href="https://github.com/open-source-parsers/jsoncpp">github上的jsoncpp库</a>的官方说明文档<a href="https://github.com/open-source-parsers/jsoncpp/blob/master/README.md">README.md</a>，首先我们打开（或者新建一个）VS项目，然后<em>在终端打开</em></p><p><img src="https://s2.loli.net/2022/02/02/GaryAnkw5xz3vZg.png" alt="jsoncpp的安装与使用-在终端打开.png"></p><p>接着我们会发现左下角多了一个选项卡：开发者PowerShell</p><p><img src="https://s2.loli.net/2022/02/02/aDQrg6OTIWxVzmX.png" alt="jsoncpp的安装与使用-开发者PowerShell.png"></p><p>现在我们在Powershell里面依次执行以下命令（一条一条复制上去然后一条一条运行）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/Microsoft/vcpkg.git<br><span class="hljs-built_in">cd</span> vcpkg<br>./bootstrap-vcpkg.sh<br>./vcpkg integrate install<br>./vcpkg install jsoncpp<br></code></pre></td></tr></table></figure><p>这里再写一遍：如果你的Visual Studio没有安装<em>英文语言包</em>，那么请在<em>Visual Studio修改程序</em>（在<em>程序和功能</em>里面找）里面添加这个语言包。</p><p>这样就可以了，是不是很简单啊（不枉费我半天时间）</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="关于json"><a href="#关于json" class="headerlink" title="关于json"></a>关于json</h2><p>json诞生自js，因为二者十分相似，所以相互支持起来非常方便。不过我们在C++中也需要使用json，所以又有大佬专门为C++开发了jsoncpp</p><h3 id="json的食用方法"><a href="#json的食用方法" class="headerlink" title="json的食用方法"></a>json的食用方法</h3><p>json中仅支持两种结构</p><ul><li>name-&gt;value，键值对（pair）的集合，一般称为对象(object)</li><li>值的有序表，一般称为数组(array)</li></ul><h4 id="键值对pair"><a href="#键值对pair" class="headerlink" title="键值对pair"></a>键值对pair</h4><p>一个pair的结构通常是：<code>string : value</code>，pair的对应关系用<code>:</code>表示，左边的为name，右边的是其对应的值value</p><p>一般key使用字符串。也可以使用数字，但是不推荐</p><p>value可以是json支持的任何类型，如object、array、string、number、true&#x2F;false，null</p><h4 id="对象object"><a href="#对象object" class="headerlink" title="对象object"></a>对象object</h4><p>object可以认为是多个pair的集合，其语法为</p><ul><li>以<code>&#123;</code>作为object起始</li><li>以<code>&#125;</code>作为object结束</li><li>不同pair之间使用<code>,</code>分割</li></ul><p>object中存储的数据是无序的</p><p>例如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;jensentsts&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;score&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">114514</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="数组array"><a href="#数组array" class="headerlink" title="数组array"></a>数组array</h4><p>array是value的有序集合，其语法为</p><ul><li>以<code>[</code>作为array起始</li><li>以<code>]</code>作为array结束</li><li>不同array元素之间使用<code>,</code>分割</li></ul><p>建议在array中使用统一的类型，否则解析起来比较麻烦</p><p>例如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;jensentsts&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;score&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">114514</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;LiHua&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;score&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">-1</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>当然这样写也是合法的：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;jensentsts&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">233</span><span class="hljs-punctuation">,</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;year&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1919810</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>与C++一样，使用<code>//</code>或者是<code>/*</code>与<code>*/</code>来写注释</p><p>例如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// 衬衫的价格为</span><br><span class="hljs-comment">/* 9镑15便士 */</span><br></code></pre></td></tr></table></figure><h3 id="全部加起来，结果写出来"><a href="#全部加起来，结果写出来" class="headerlink" title="全部加起来，结果写出来"></a>全部加起来，结果写出来</h3><p>例如（这是我的VS Code配置）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// https://code.visualstudio.com/docs/cpp/launch-json-reference</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.2.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;configurations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;(gdb) Launch&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 配置名称，将会在启动配置的下拉菜单中显示</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cppdbg&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 配置类型，对于C/C++可认为此处只能是cppdbg，由cpptools提供；不同编程语言不同</span><br>        <span class="hljs-attr">&quot;request&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;launch&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 可以为launch（启动）或attach（附加）</span><br>        <span class="hljs-attr">&quot;program&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 将要进行调试的程序的路径</span><br>        <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 程序调试时传递给程序的命令行参数，一般设为空</span><br>        <span class="hljs-attr">&quot;stopAtEntry&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 设为true时程序将暂停在程序入口处，相当于在main上打断点</span><br>        <span class="hljs-attr">&quot;cwd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 调试程序时的工作目录，此为工作区文件夹；改成$&#123;fileDirname&#125;可变为文件所在目录</span><br>        <span class="hljs-attr">&quot;environment&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 环境变量</span><br>        <span class="hljs-attr">&quot;externalConsole&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 使用单独的cmd窗口，与其它IDE一致；为false时使用内置终端</span><br>        <span class="hljs-attr">&quot;internalConsoleOptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;neverOpen&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 如果不设为neverOpen，调试时会跳到“调试控制台”选项卡，你应该不需要对gdb手动输命令吧？</span><br>        <span class="hljs-attr">&quot;MIMode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;gdb&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 指定连接的调试器，可以为gdb或lldb。但我没试过lldb</span><br>        <span class="hljs-attr">&quot;miDebuggerPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;gdb.exe&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 调试器路径，Windows下后缀不能省略，Linux下则不要</span><br>        <span class="hljs-attr">&quot;setupCommands&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 模板自带，好像可以更好地显示STL容器的内容，具体作用自行Google</span><br>                <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Enable pretty-printing for gdb&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;-enable-pretty-printing&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;ignoreFailures&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;preLaunchTask&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Compile&quot;</span> <span class="hljs-comment">// 调试前执行的任务，一般为编译程序。与tasks.json的label相对应</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="jsoncpp头文件"><a href="#jsoncpp头文件" class="headerlink" title="jsoncpp头文件"></a>jsoncpp头文件</h2><p>使用jsoncpp的任何功能，只需要引入一个头文件就好：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c_cpp">#include &lt;json/json.h&gt;<br></code></pre></td></tr></table></figure><h2 id="JSON解析"><a href="#JSON解析" class="headerlink" title="JSON解析"></a>JSON解析</h2><h3 id="解析json字符串"><a href="#解析json字符串" class="headerlink" title="解析json字符串"></a>解析json字符串</h3><p>我们将会使用Json::Reader来解析JSON数据，用Json::Value来存储JSON解析出来的各种值。</p><p>先<code>Json::Reader reader;</code>然后调用<code>reader.parse()</code>解析JSON数据。如果解析成功，返回<code>false</code>；否则返回<code>true</code>。</p><p>我们将要处理的json数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;jensentsts&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;score&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">114514</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c_cpp">Json::Reader reader;<br>Json::Value root;<br>std::string jsonString = &quot;&#123;\&quot;name\&quot;: \&quot;jensentsts\&quot;, \&quot;score\&quot;: 114514&#125;&quot;;<br>if (reader.parse(jsonString/*或者jsonString.c_str()*/, root))&#123;<br>  std::cerr &lt;&lt; &quot;parse failed!&quot; &lt;&lt; std::endl;<br>&#125;<br>else&#123;<br>  // 类型一定要正确选择，否则会抛出异常<br>  std::cout &lt;&lt; root[&quot;name&quot;].asString() &lt;&lt; std::endl;    // 选择为string类型并输出<br>  std::cout &lt;&lt; root[&quot;score&quot;].asInt() &lt;&lt; std::endl;      // 选择为int类型并输出<br>&#125;<br></code></pre></td></tr></table></figure><p>当然了，还可以这样写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c_cpp">Json::Reader reader;<br>Json::Value root;<br>const char jsonString[] = &quot;&#123;\&quot;name\&quot;: \&quot;jensentsts\&quot;, \&quot;score\&quot;: 114514&#125;&quot;;<br>if (!reader.parse(jsonString, jsonString + sizeof(jsonString), root))&#123;<br>  // 这样就是在字符串之中读取部分文本并且解析<br>  // 类型一定要正确选择，否则会抛出异常<br>  std::cout &lt;&lt; root[&quot;name&quot;].asString() &lt;&lt; std::endl;    // 选择为string类型并输出<br>  std::cout &lt;&lt; root[&quot;score&quot;].asInt() &lt;&lt; std::endl;      // 选择为int类型并输出<br>&#125;<br>else&#123;<br>  std::cerr &lt;&lt; &quot;parse failed!&quot; &lt;&lt; std::endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>同样的输出结果：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">jensentsts</span><br><span class="hljs-keyword"></span><span class="hljs-number">114514</span><br></code></pre></td></tr></table></figure><h3 id="从json文件中读取并解析"><a href="#从json文件中读取并解析" class="headerlink" title="从json文件中读取并解析"></a>从json文件中读取并解析</h3><p>以下代码修改自<em>参考资料1</em></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// &quot;checkjson.json&quot;中的数据</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;tocy&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;age&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1000</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>下面的代码将其读入并解析</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c_cpp">ifstream ifs(&quot;checkjson.json&quot;);<br>assert(ifs.is_open());<br>Json::Reader reader;<br>Json::Value root;<br>if (reader.parse(ifs, root, false))&#123;<br>  std::cerr &lt;&lt; &quot;parse failed!&quot; &lt;&lt; std::endl;<br>&#125;<br>else&#123;<br>  std::string name = root[&quot;name&quot;].asString();<br>  int age = root[&quot;age&quot;].asInt();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="解析array数据"><a href="#解析array数据" class="headerlink" title="解析array数据"></a>解析array数据</h3><p>我们将要解析的json数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Tony&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;salary&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">100</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Kit&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;salary&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">233</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c_cpp">std::string json = &quot;[\&quot;Here is data below.\&quot;, &#123;\&quot;Tony\&quot;: \&quot;\&quot;, \&quot;salary\&quot;: 100&#125;, &#123;\&quot;name\&quot;: \&quot;Kit\&quot;, \&quot;salary\&quot;: 233&#125;]&quot;<br>Json::Reader reader;<br>Json::Value root;<br>if (!reader.parse(json, root))&#123;<br>  // 在json中，第一项是string，第二、三项是object，下面我们将分别输出它们<br>  std::cout &lt;&lt; root[0] &lt;&lt; std::endl;<br>  size_t count = root.size();<br>  for (size_t i = 1; i &lt; count; ++i)&#123;<br>    std::cout &lt;&lt; root[i][&quot;name&quot;].asString() &lt;&lt; &quot;\&#x27;s salary is &quot; &lt;&lt; root[i][&quot;salary&quot;].asInt() &lt;&lt; &quot;.&quot; &lt;&lt; std::endl;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada">Here <span class="hljs-keyword">is</span> data below.<br>Tony<span class="hljs-symbol">&#x27;s</span> salary <span class="hljs-keyword">is</span> <span class="hljs-number">100</span>.<br>Kit<span class="hljs-symbol">&#x27;s</span> salary <span class="hljs-keyword">is</span> <span class="hljs-number">233</span>.<br></code></pre></td></tr></table></figure><h3 id="全部加起来，结果写出来-1"><a href="#全部加起来，结果写出来-1" class="headerlink" title="全部加起来，结果写出来"></a>全部加起来，结果写出来</h3><p>我们将要解析的json数据（放在了<code>jkl.json</code>中）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;package-name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;jinkela&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.0.0&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;artists&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Mei&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;from&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;America&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Ri&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;from&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Japan&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Fei&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;from&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Aferica&quot;</span><span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;prop&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;jinkela&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;kind&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;fertilizer&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;cost&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">450</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>__ __ __ __：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c_cpp">void packageInstaller()&#123;<br>  Json::Reader reader;<br>  Json::Value root;<br>  ifstream ifs(&quot;jkl.json&quot;);<br>  if (!ifs.is_open())&#123;<br>    std::cerr &lt;&lt; &quot;Cannot open the file.&quot; &lt;&lt; std::endl;<br>    return;<br>  &#125;<br>  if (reader.parse(ifs, root))&#123;<br>    std::cerr &lt;&lt; &quot;Failed to parse JSON.&quot; &lt;&lt; std::endl;<br>    return;<br>  &#125;<br>  std::clog &lt;&lt; &quot;Stage Package Installer loaded.&quot; &lt;&lt; std::endl;<br>  std::clog &lt;&lt; &quot;Package name: &quot; &lt;&lt; root[&quot;package-name&quot;].asString() &lt;&lt; std::endl;<br>  std::clog &lt;&lt; &quot;Package version: &quot; &lt;&lt; root[&quot;version&quot;].asString() &lt;&lt; std::endl;<br>  size_t count = root[&quot;artists&quot;].size();<br>  // &quot;artists&quot;<br>  for (size_t i = 0; i &lt; count; ++i)&#123;<br>    std::clog &lt;&lt; &quot;Artist &quot; &lt;&lt; i &lt;&lt; &quot;is &quot; &lt;&lt; root[&quot;artists&quot;][i][&quot;name&quot;].asString() &lt;&lt; std::endl;<br>    std::clog &lt;&lt; &quot;\twho is from &quot; &lt;&lt; root[&quot;artists&quot;][i][&quot;from&quot;].asString() &lt;&lt; std::endl;<br>  &#125;<br>  // &quot;prop&quot;<br>  Json::Value prop = root[&quot;prop&quot;];<br>  std::clog &lt;&lt; &quot;The prop they need:&quot; &lt;&lt; std::endl;<br>  std::clog &lt;&lt; &quot;name: &quot; &lt;&lt; prop[&quot;name&quot;].asString() &lt;&lt; std::endl;<br>  std::clog &lt;&lt; &quot;kind: &quot; &lt;&lt; prop[&quot;kind&quot;].asString() &lt;&lt;std::endl;<br>  std::clog &lt;&lt; &quot;cost: &quot; &lt;&lt; prop[&quot;cost&quot;].asInt() &lt;&lt; std::endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ada">Stage <span class="hljs-keyword">Package</span> <span class="hljs-title">Installer loaded.</span><br><span class="hljs-keyword">Package</span> <span class="hljs-title">name: jinkela</span><br><span class="hljs-keyword">Package</span> <span class="hljs-title">version: 1.0.0</span><br>Artist <span class="hljs-number">0</span><span class="hljs-keyword">is</span> Mei<br>        who <span class="hljs-keyword">is</span> from America<br>Artist <span class="hljs-number">1</span><span class="hljs-keyword">is</span> Ri<br>        who <span class="hljs-keyword">is</span> from Japan<br>Artist <span class="hljs-number">2</span><span class="hljs-keyword">is</span> Fei<br>        who <span class="hljs-keyword">is</span> from Aferica<br>The prop they need:<br>name: jinkela<br>kind: fertilizer<br>cost: <span class="hljs-number">450</span><br></code></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>解析操作基本上就是这些。</p><p>我们通过<code>Json::Reader对象</code>中的<code>parse()</code>解析JSON数据，<code>parse()</code>会自动地吧结果写入传入的<code>Json::Value对象</code>中。调用<code>parse()</code>的方法有很多种，一般来说分别是：</p><ul><li><code>parse(C++ stream, Json::Value)</code>，第一项可以是<code>string</code>，也可以是<code>ifstream</code></li><li><code>parse(const char* begin, const char* end, Json::Value)</code></li><li><code>parse(const char* str, Json::Value)</code></li></ul><p>总之最后一项是<code>Json::Value</code>。你可能会发现<code>parse()</code>的最后一项会是<code>collectComments</code>，这个我还没研究过，咕咕咕(*･ω&lt; ) </p><p><code>Json::Value对象</code>中存储的可能是一个键值对，object，array，也可能只是一个简简单单的string，Number，Boolean等等，我们要通过<code>Json::Value对象.as***()</code>以在C++中使用他们的值</p><p>在示例代码中，我们创建了一个名为<code>root</code>的变量，并用<code>root</code>存储JSON数据的“根节点”。在“全部加起来，结果写出来”中，我们也用了一个<code>Json::Value prop</code>来存储其“子节点”的信息。并通过<code>prop</code>来访问其下的数据。其实，只要我们调用的不是<code>as***()</code>，那么我们得到的对象都是<code>Json::Value</code>类型的</p><h2 id="JSON数据封装"><a href="#JSON数据封装" class="headerlink" title="JSON数据封装"></a>JSON数据封装</h2><p>这里我们会用<code>Json::Value</code>来存储JSON中的数据，然后用<code>Json::Writer</code>来把编辑好的<code>Json::Value</code>转换为JSON字符串</p><h3 id="封装简单的数据"><a href="#封装简单的数据" class="headerlink" title="封装简单的数据"></a>封装简单的数据</h3><p>示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c_cpp">Json::Value root;<br>Json::Value files;<br>Json::FastWriter writer;<br>root[&quot;name&quot;] = &quot;Tony&quot;;<br>root[&quot;salary&quot;] = 100;<br>root[&quot;msg&quot;] = &quot;work hard&quot;;<br>files[0] = &quot;1.zip&quot;;<br>files[1] = &quot;2.txt&quot;;<br>root[&quot;files&quot;] = files;<br>std::string jsonFile = writer.write(root);<br>std::cout &lt;&lt; jsonFile &lt;&lt; std::endl;<br></code></pre></td></tr></table></figure><h3 id="封装内嵌object的array"><a href="#封装内嵌object的array" class="headerlink" title="封装内嵌object的array"></a>封装内嵌object的array</h3><p>其实和上边那个例子的过程一样。只要你能明白两点</p><ul><li>对着<code>Json::Value对象</code>直接去赋值</li><li>array和object的调用方法和使用方法大差不差</li></ul><p title="终于写完啦！！！">咕咕咕</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li><a href="https://www.cnblogs.com/tocy/p/json-intro_jsoncpp-lib.html">json简介及JsonCpp用法</a></li><li><a href="https://github.com/open-source-parsers/jsoncpp/blob/master/README.md">github上jsoncpp&#x2F;README.md</a></li><li>百度得到的CSDN博客</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>cpp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>冬天到啦，给你的博客添加雪花特效！</title>
    <link href="/2021/12/23/%E9%9B%AA%E8%8A%B1%E7%89%B9%E6%95%88/"/>
    <url>/2021/12/23/%E9%9B%AA%E8%8A%B1%E7%89%B9%E6%95%88/</url>
    
    <content type="html"><![CDATA[<p>刚刚过了冬至，可是冬天尚在最盛。距离过年还有些时间，而心却时时刻刻盼望着假期的饺子。<a href="https://limestart.cn/">青柠起始页</a> 加上了雪花的特效，在修好的背景图片上，凄清、幽寒而静谧。  </p><span id="more"></span><p>本文来源：<a href="https://blog.csdn.net/qq_36759224/article/details/85420403">Hexo 博客优化之博客美化系列（持续更新）</a><br>废话不多说，直接开始！</p><h1 id="新建文件"><a href="#新建文件" class="headerlink" title="新建文件"></a>新建文件</h1><p>在<code>.\themes\$你想要添加雪花效果的主题的文件夹$\source\js</code>下新建一个js文件，然后存如下代码：</p><h2 id="样式一"><a href="#样式一" class="headerlink" title="样式一"></a>样式一</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*样式一*/</span><br>(<span class="hljs-keyword">function</span>(<span class="hljs-params">$</span>)&#123;<br>$.fn.<span class="hljs-property">snow</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">options</span>)&#123;<br><span class="hljs-keyword">var</span> $flake = $(<span class="hljs-string">&#x27;&lt;div id=&quot;snowbox&quot; /&gt;&#x27;</span>).<span class="hljs-title function_">css</span>(&#123;<span class="hljs-string">&#x27;position&#x27;</span>: <span class="hljs-string">&#x27;absolute&#x27;</span>,<span class="hljs-string">&#x27;z-index&#x27;</span>:<span class="hljs-string">&#x27;9999&#x27;</span>, <span class="hljs-string">&#x27;top&#x27;</span>: <span class="hljs-string">&#x27;-50px&#x27;</span>&#125;).<span class="hljs-title function_">html</span>(<span class="hljs-string">&#x27;&amp;#10052;&#x27;</span>),<br>documentHeight = $(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">height</span>(),<br>documentWidth= $(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">width</span>(),<br>defaults = &#123;<br>minSize: <span class="hljs-number">10</span>,<br>maxSize: <span class="hljs-number">20</span>,<br>newOn: <span class="hljs-number">1000</span>,<br>flakeColor: <span class="hljs-string">&quot;#AFDAEF&quot;</span> <span class="hljs-comment">/* 此处可以定义雪花颜色，若要白色可以改为#FFFFFF */</span><br>&#125;,<br>options= $.<span class="hljs-title function_">extend</span>(&#123;&#125;, defaults, options);<br><span class="hljs-keyword">var</span> interval= <span class="hljs-built_in">setInterval</span>( <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">var</span> startPositionLeft = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * documentWidth - <span class="hljs-number">100</span>,<br>startOpacity = <span class="hljs-number">0.5</span> + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>(),<br>sizeFlake = options.<span class="hljs-property">minSize</span> + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * options.<span class="hljs-property">maxSize</span>,<br>endPositionTop = documentHeight - <span class="hljs-number">200</span>,<br>endPositionLeft = startPositionLeft - <span class="hljs-number">500</span> + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">500</span>,<br>durationFall = documentHeight * <span class="hljs-number">10</span> + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">5000</span>;<br>$flake.<span class="hljs-title function_">clone</span>().<span class="hljs-title function_">appendTo</span>(<span class="hljs-string">&#x27;body&#x27;</span>).<span class="hljs-title function_">css</span>(&#123;<br><span class="hljs-attr">left</span>: startPositionLeft,<br><span class="hljs-attr">opacity</span>: startOpacity,<br><span class="hljs-string">&#x27;font-size&#x27;</span>: sizeFlake,<br><span class="hljs-attr">color</span>: options.<span class="hljs-property">flakeColor</span><br>&#125;).<span class="hljs-title function_">animate</span>(&#123;<br><span class="hljs-attr">top</span>: endPositionTop,<br><span class="hljs-attr">left</span>: endPositionLeft,<br><span class="hljs-attr">opacity</span>: <span class="hljs-number">0.2</span><br>&#125;,durationFall,<span class="hljs-string">&#x27;linear&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>$(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">remove</span>()<br>&#125;);<br>&#125;, options.<span class="hljs-property">newOn</span>);<br>    &#125;;<br>&#125;)(jQuery);<br>$(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    $.fn.<span class="hljs-title function_">snow</span>(&#123; <br>    <span class="hljs-attr">minSize</span>: <span class="hljs-number">5</span>, <span class="hljs-comment">/* 定义雪花最小尺寸 */</span><br>    <span class="hljs-attr">maxSize</span>: <span class="hljs-number">50</span>,<span class="hljs-comment">/* 定义雪花最大尺寸 */</span><br>    <span class="hljs-attr">newOn</span>: <span class="hljs-number">300</span>  <span class="hljs-comment">/* 定义密集程度，数字越小越密集 */</span><br>    &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><p>这是第一种特效，效果长这样：<br><img src="https://img-blog.csdnimg.cn/20190807103144792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NzU5MjI0,size_16,color_FFFFFF,t_70" alt="哎呀哈，图片炸了……"></p><h2 id="样式二"><a href="#样式二" class="headerlink" title="样式二"></a>样式二</h2><p>或者你可以使用第二种</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*样式二*/</span><br><span class="hljs-comment">/* 控制下雪 */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">snowFall</span>(<span class="hljs-params">snow</span>) &#123;<br>    <span class="hljs-comment">/* 可配置属性 */</span><br>    snow = snow || &#123;&#125;;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">maxFlake</span> = snow.<span class="hljs-property">maxFlake</span> || <span class="hljs-number">200</span>;   <span class="hljs-comment">/* 最多片数 */</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">flakeSize</span> = snow.<span class="hljs-property">flakeSize</span> || <span class="hljs-number">10</span>;  <span class="hljs-comment">/* 雪花形状 */</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">fallSpeed</span> = snow.<span class="hljs-property">fallSpeed</span> || <span class="hljs-number">1</span>;   <span class="hljs-comment">/* 坠落速度 */</span><br>&#125;<br><span class="hljs-comment">/* 兼容写法 */</span><br>requestAnimationFrame = <span class="hljs-variable language_">window</span>.<span class="hljs-property">requestAnimationFrame</span> ||<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">mozRequestAnimationFrame</span> ||<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">webkitRequestAnimationFrame</span> ||<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">msRequestAnimationFrame</span> ||<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">oRequestAnimationFrame</span> ||<br>    <span class="hljs-keyword">function</span>(<span class="hljs-params">callback</span>) &#123; <span class="hljs-built_in">setTimeout</span>(callback, <span class="hljs-number">1000</span> / <span class="hljs-number">60</span>); &#125;;<br><br>cancelAnimationFrame = <span class="hljs-variable language_">window</span>.<span class="hljs-property">cancelAnimationFrame</span> ||<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">mozCancelAnimationFrame</span> ||<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">webkitCancelAnimationFrame</span> ||<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">msCancelAnimationFrame</span> ||<br><span class="hljs-variable language_">window</span>.<span class="hljs-property">oCancelAnimationFrame</span>;<br><span class="hljs-comment">/* 开始下雪 */</span><br>snowFall.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">start</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">/* 创建画布 */</span><br>    snowCanvas.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>);<br>    <span class="hljs-comment">/* 创建雪花形状 */</span><br>    createFlakes.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>);<br>    <span class="hljs-comment">/* 画雪 */</span><br>    drawSnow.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>)<br>&#125;<br><span class="hljs-comment">/* 创建画布 */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">snowCanvas</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">/* 添加Dom结点 */</span><br>    <span class="hljs-keyword">var</span> snowcanvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;canvas&quot;</span>);<br>    snowcanvas.<span class="hljs-property">id</span> = <span class="hljs-string">&quot;snowfall&quot;</span>;<br>    snowcanvas.<span class="hljs-property">width</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>;<br>    snowcanvas.<span class="hljs-property">height</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">clientHeight</span>;<br>    snowcanvas.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&quot;style&quot;</span>, <span class="hljs-string">&quot;position:absolute; top: 0; left: 0; z-index: 1; pointer-events: none;&quot;</span>);<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&quot;body&quot;</span>)[<span class="hljs-number">0</span>].<span class="hljs-title function_">appendChild</span>(snowcanvas);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvas</span> = snowcanvas;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">ctx</span> = snowcanvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>);<br>    <span class="hljs-comment">/* 窗口大小改变的处理 */</span><br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">onresize</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        snowcanvas.<span class="hljs-property">width</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>;<br>        <span class="hljs-comment">/* snowcanvas.height = window.innerHeight */</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">/* 雪运动对象 */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">flakeMove</span>(<span class="hljs-params">canvasWidth, canvasHeight, flakeSize, fallSpeed</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * canvasWidth);   <span class="hljs-comment">/* x坐标 */</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * canvasHeight);  <span class="hljs-comment">/* y坐标 */</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">size</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * flakeSize + <span class="hljs-number">2</span>;          <span class="hljs-comment">/* 形状 */</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">maxSize</span> = flakeSize;                           <span class="hljs-comment">/* 最大形状 */</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">speed</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">1</span> + fallSpeed;         <span class="hljs-comment">/* 坠落速度 */</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">fallSpeed</span> = fallSpeed;                         <span class="hljs-comment">/* 坠落速度 */</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">velY</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">speed</span>;                             <span class="hljs-comment">/* Y方向速度 */</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">velX</span> = <span class="hljs-number">0</span>;                                      <span class="hljs-comment">/* X方向速度 */</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">stepSize</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() / <span class="hljs-number">30</span>;                 <span class="hljs-comment">/* 步长 */</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">step</span> = <span class="hljs-number">0</span>                                       <span class="hljs-comment">/* 步数 */</span><br>&#125;<br>flakeMove.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">update</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> x = <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span>,<br>        y = <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span>;<br>    <span class="hljs-comment">/* 左右摆动(余弦) */</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">velX</span> *= <span class="hljs-number">0.98</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">velY</span> &lt;= <span class="hljs-variable language_">this</span>.<span class="hljs-property">speed</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">velY</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">speed</span><br>    &#125;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">velX</span> += <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">cos</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">step</span> += <span class="hljs-number">.05</span>) * <span class="hljs-variable language_">this</span>.<span class="hljs-property">stepSize</span>;<br><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> += <span class="hljs-variable language_">this</span>.<span class="hljs-property">velY</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> += <span class="hljs-variable language_">this</span>.<span class="hljs-property">velX</span>;<br>    <span class="hljs-comment">/* 飞出边界的处理 */</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> &gt;= canvas.<span class="hljs-property">width</span> || <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> &lt;= <span class="hljs-number">0</span> || <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> &gt;= canvas.<span class="hljs-property">height</span> || <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> &lt;= <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">reset</span>(canvas.<span class="hljs-property">width</span>, canvas.<span class="hljs-property">height</span>)<br>    &#125;<br>&#125;;<br><span class="hljs-comment">/* 飞出边界-放置最顶端继续坠落 */</span><br>flakeMove.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">reset</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">width, height</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * width);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">size</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-variable language_">this</span>.<span class="hljs-property">maxSize</span> + <span class="hljs-number">2</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">speed</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">1</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">fallSpeed</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">velY</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">speed</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">velX</span> = <span class="hljs-number">0</span>;<br>&#125;;<br><span class="hljs-comment">// 渲染雪花-随机形状（此处可修改雪花颜色！！！）</span><br>flakeMove.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">render</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">ctx</span>) &#123;<br>    <span class="hljs-keyword">var</span> snowFlake = ctx.<span class="hljs-title function_">createRadialGradient</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span>, <span class="hljs-number">0</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">size</span>);<br>    snowFlake.<span class="hljs-title function_">addColorStop</span>(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;rgba(255, 255, 255, 0.9)&quot;</span>);  <span class="hljs-comment">/* 此处是雪花颜色，默认是白色 */</span><br>    snowFlake.<span class="hljs-title function_">addColorStop</span>(<span class="hljs-number">.5</span>, <span class="hljs-string">&quot;rgba(255, 255, 255, 0.5)&quot;</span>); <span class="hljs-comment">/* 若要改为其他颜色，请自行查 */</span><br>    snowFlake.<span class="hljs-title function_">addColorStop</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;rgba(255, 255, 255, 0)&quot;</span>);    <span class="hljs-comment">/* 找16进制的RGB 颜色代码。 */</span><br>    ctx.<span class="hljs-title function_">save</span>();<br>    ctx.<span class="hljs-property">fillStyle</span> = snowFlake;<br>    ctx.<span class="hljs-title function_">beginPath</span>();<br>    ctx.<span class="hljs-title function_">arc</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">size</span>, <span class="hljs-number">0</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">2</span>);<br>    ctx.<span class="hljs-title function_">fill</span>();<br>    ctx.<span class="hljs-title function_">restore</span>();<br>&#125;;<br><span class="hljs-comment">/* 创建雪花-定义形状 */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createFlakes</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> maxFlake = <span class="hljs-variable language_">this</span>.<span class="hljs-property">maxFlake</span>,<br>        flakes = <span class="hljs-variable language_">this</span>.<span class="hljs-property">flakes</span> = [],<br>        canvas = <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvas</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; maxFlake; i++) &#123;<br>        flakes.<span class="hljs-title function_">push</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_">flakeMove</span>(canvas.<span class="hljs-property">width</span>, canvas.<span class="hljs-property">height</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">flakeSize</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">fallSpeed</span>))<br>    &#125;<br>&#125;<br><span class="hljs-comment">/* 画雪 */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">drawSnow</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> maxFlake = <span class="hljs-variable language_">this</span>.<span class="hljs-property">maxFlake</span>,<br>        flakes = <span class="hljs-variable language_">this</span>.<span class="hljs-property">flakes</span>;<br>    ctx = <span class="hljs-variable language_">this</span>.<span class="hljs-property">ctx</span>, canvas = <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvas</span>, that = <span class="hljs-variable language_">this</span>;<br>    <span class="hljs-comment">/* 清空雪花 */</span><br>    ctx.<span class="hljs-title function_">clearRect</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, canvas.<span class="hljs-property">width</span>, canvas.<span class="hljs-property">height</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> e = <span class="hljs-number">0</span>; e &lt; maxFlake; e++) &#123;<br>        flakes[e].<span class="hljs-title function_">update</span>();<br>        flakes[e].<span class="hljs-title function_">render</span>(ctx);<br>    &#125;<br>    <span class="hljs-comment">/*  一帧一帧的画 */</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">loop</span> = <span class="hljs-title function_">requestAnimationFrame</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        drawSnow.<span class="hljs-title function_">apply</span>(that);<br>    &#125;);<br>&#125;<br><span class="hljs-comment">/* 调用及控制方法 */</span><br><span class="hljs-keyword">var</span> snow = <span class="hljs-keyword">new</span> <span class="hljs-title function_">snowFall</span>(&#123;<span class="hljs-attr">maxFlake</span>:<span class="hljs-number">60</span>&#125;);<br>snow.<span class="hljs-title function_">start</span>();<br></code></pre></td></tr></table></figure><p>效果图：<br><img src="https://img-blog.csdnimg.cn/20190807103041166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NzU5MjI0,size_16,color_FFFFFF,t_70" alt="看不见，怎么想都看不见吧"></p><h1 id="引用文件"><a href="#引用文件" class="headerlink" title="引用文件"></a>引用文件</h1><p>在<code>themes\$还是那个文件夹$\layout\layout.ejs</code>里添加：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 雪花特效 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;\js\snow.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果没有效果，确认网页是否引用了JQuery，如果没有请在上面的代码之前加入JQuery即可：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://libs.baidu.com/jquery/1.8.3/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://libs.baidu.com/jquery/1.8.3/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当然，直接这样添加的话，取消效果要去layout.ejs里手动撤掉代码。</p>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>给你的hexo博客添加可可爱爱的看板娘</title>
    <link href="/2021/12/10/hexo%E7%9C%8B%E6%9D%BF%E5%A8%98/"/>
    <url>/2021/12/10/hexo%E7%9C%8B%E6%9D%BF%E5%A8%98/</url>
    
    <content type="html"><![CDATA[<p>百度上一搜，很多都是cnblogs的，决定自己收集一下hexo上添加看板娘的方法</p><span id="more"></span><h1 id="添加看板娘"><a href="#添加看板娘" class="headerlink" title="添加看板娘"></a>添加看板娘</h1><h2 id="安装live2d插件"><a href="#安装live2d插件" class="headerlink" title="安装live2d插件"></a>安装live2d插件</h2><p>在博客根目录下输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">$ npm install --save hexo-helper-live2d<br></code></pre></td></tr></table></figure><p>即可安装  </p><h2 id="修改-config-yml"><a href="#修改-config-yml" class="headerlink" title="修改_config.yml"></a>修改_config.yml</h2><p>在<code>_config.yml</code>下添加如是json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs json"># live2d<br>live2d<span class="hljs-punctuation">:</span><br>   enable<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span># 是否开启<br>   scriptFrom<span class="hljs-punctuation">:</span> local<br>   pluginRootPath<span class="hljs-punctuation">:</span> live2dw/# 插件在站点上的相对路径<br>   pluginJsPath<span class="hljs-punctuation">:</span> lib/# js文件在插件根目录上的相对路径<br>   pluginModelPath<span class="hljs-punctuation">:</span> assets/# 模型文件在插件根目录上的相对路径（这仨一般不用改）<br>   tagMode<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>   debug<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span># 标签模式，是否替换live2d tag标签而非插入到所有页面中<br>   model<span class="hljs-punctuation">:</span><br>       use<span class="hljs-punctuation">:</span> live2d-widget-model-z16 # 这里填写你使用的看板娘模型的名字<br># use<span class="hljs-punctuation">:</span> name # live2d_models/下的目录名<br># use<span class="hljs-punctuation">:</span> ./folder/name # 相对于博客根目录的相对路径<br># https<span class="hljs-punctuation">:</span><span class="hljs-comment">//xxx.xxx.xxx/xxx # 使用url</span><br>       scale<span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br>       hHeadPos<span class="hljs-punctuation">:</span> <span class="hljs-number">0.5</span><br>       vHeadPos<span class="hljs-punctuation">:</span> <span class="hljs-number">0.618</span><br>   display<span class="hljs-punctuation">:</span><br>       superSample<span class="hljs-punctuation">:</span> <span class="hljs-number">2</span># <br>       width<span class="hljs-punctuation">:</span> <span class="hljs-number">150</span><br>       height<span class="hljs-punctuation">:</span> <span class="hljs-number">300</span><br>       position<span class="hljs-punctuation">:</span> right# 定位方式，right为以右下角为原点，向左向上建立x、y轴<br>       hOffset<span class="hljs-punctuation">:</span> <span class="hljs-number">0</span># 垂直方向的偏移<br>       vOffset<span class="hljs-punctuation">:</span> <span class="hljs-number">-20</span># 水平方向的偏移<br>   mobile<span class="hljs-punctuation">:</span><br>       show<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span># 是否在手机上显示<br>       scale<span class="hljs-punctuation">:</span> <span class="hljs-number">0.5</span><br>  react<span class="hljs-punctuation">:</span><br>      opacityDefault<span class="hljs-punctuation">:</span> <span class="hljs-number">0.7</span># 一般情况下的透明度<br>      opacityOnHover<span class="hljs-punctuation">:</span> <span class="hljs-number">0.2</span># 鼠标移到看板娘上时的透明度<br></code></pre></td></tr></table></figure><h2 id="安装你的看板娘模型"><a href="#安装你的看板娘模型" class="headerlink" title="安装你的看板娘模型"></a>安装你的看板娘模型</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">$ npm install 模型名称<br></code></pre></td></tr></table></figure><p>安装好之后在.&#x2F;_config.yml里修改<code>use</code>的参数，以启用看板娘模型。<br>Live2D看板娘模型大全：<a href="https://blog.csdn.net/wang_123_zy/article/details/87181892">Hexo添加Live2D看板娘+模型预览</a>  </p><h1 id="让看板娘能互动"><a href="#让看板娘能互动" class="headerlink" title="让看板娘能互动"></a>让看板娘能互动</h1><h6 id="还没弄明白"><a href="#还没弄明白" class="headerlink" title="还没弄明白"></a>还没弄明白</h6>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大学那些琐碎事</title>
    <link href="/2021/11/14/%E5%A4%A7%E5%AD%A6/"/>
    <url>/2021/11/14/%E5%A4%A7%E5%AD%A6/</url>
    
    <content type="html"><![CDATA[<p>中学的老师和我们说：</p><blockquote><p>大学是你人生中最轻松的一段时光！<br>上了大学，你整天玩也没人管你。除了打游戏，就是谈恋爱。<br>大学你不学习也没人管你，生活非常闲。<br>…………</p></blockquote><p>当我进入大学后，我可一点都不觉得我的生活那里“闲”。<br>我感觉，我可能上了个假的大学。  </p><span id="more"></span><p><img src="https://i.loli.net/2021/11/14/1d5zvjgK4MNuHqw.jpg" alt="66012d206fc96673cc55fc93119fe2f1.jpeg"></p><h1 id="什么是大学生活"><a href="#什么是大学生活" class="headerlink" title="什么是大学生活"></a>什么是大学生活</h1><p>你给我翻译翻译，什么叫TMD大学生活？<br>大学生活：College life<br>大学生 活：College student alive<br>大 学生活：Greatly learn to live<br><del>大学 生 活：College give birth to life</del>  </p><h2 id="军训"><a href="#军训" class="headerlink" title="军训"></a>军训</h2><p>军训……差不多14天，忍一忍就过去了<br>我们军训期间，愣是一天雨都没下，晚训也是认认真真搞<code>训练</code><br>反观其他学校，他们的晚训似乎就是各种活动</p><h2 id="各种量化分"><a href="#各种量化分" class="headerlink" title="各种量化分"></a>各种量化分</h2><p>绩点、学分、德育分、体育分……<br>看起来就这四个名字，对吧？<br>可是想要拿够，那就不容易了  </p><h3 id="首先是学分"><a href="#首先是学分" class="headerlink" title="首先是学分"></a>首先是学分</h3><p>学分这个东西吧……<br>大概是我作为一个大一新生最在意的事情了<br>学分 &#x3D; 求学分(a*平时分 + b*期中分数 + c*期末分数)<br>每个老师都有不同的a b c<br>听一些学神学长说，由于他们大一打好了学分基础，因此他们大学四年都不愁学分<br>也不知道他们是如何学会复杂的高数<br>学长一致推荐<a href="https://space.bilibili.com/66607740?from=search&seid=10673502119822048357&spm_id_from=333.337.0.0">宋浩老师</a> 的高数线代课程<br>u1s1确实，他讲的比老师讲的好<br><em>我现在不太明白，那些“每次上课枪前排”的人，他们图个啥？</em>混个脸熟，让老师多给点平时分？  </p><p><code>2021年12月3日补充</code>：及时你天天抢前排老师也未必记得你。跟着老师走，一个是老师带路，不易迷路（尽管有的“导游”说起话来迷迷糊糊地），另一个是避免过多摸鱼。我一同学因为听不懂老师方言（比如正交矩阵-&gt;蒸饺矩阵）而放弃上课跟着老师学线代，准备跟着b站宋浩老师学线代，导致半个学期了线代几乎没学<br>因此<code>课前预习-&gt;课上复习-&gt;课后答疑+练题</code>是我发现的比较好的学习方式</p><h3 id="然后是德育分"><a href="#然后是德育分" class="headerlink" title="然后是德育分"></a>然后是德育分</h3><p>德育分评分取决于你参加的一些活动<br>比如听讲座，参加辩论赛……<br>如果你加入了学生会活着班委，那么德育分直接拉足    </p><p><code>2021年12月3日补充</code>：加入学校（学院）辩论队、学校（学院）运动队等等，凡是为公做事的都能拿到一些德育分。一遍造福他人，一遍获得回报，岂不美哉？胡不为也。<br>当然，如果你的学校可能氛围不太好，上述几条自然作废。不过呢，报名参加各种活动、听讲座等等都是可以获得德育分的。<br>我个人不太建议听各种讲座——有些讲座不加德育分（但是他们宣称能加德育分），有的讲座听半天纯粹是浪费时间，对你没有帮助</p><h4 id="辟谣——学生会"><a href="#辟谣——学生会" class="headerlink" title="辟谣——学生会"></a>辟谣——学生会</h4><p>我加入了我们学院的宣传部<br>学长学姐和蔼可亲<br>根本没有那种“官威”<br>个人猜测，有官威的学生会，或许是大学不太行？<br>资本引导下的互联网时代，评论区没有太多参考价值——一般来讲，主题是啥，评论就是啥</p><blockquote><p>视频：“我们学校食堂真垃圾”<br>评论1：诶对对对，我们学校食堂阿姨，那个手……<br>评论2：我看学校食堂和学校领导……</p></blockquote><p>看多了你就会觉得“我得个亲娘嘞，这食堂咋怎黑啊？”<br>再看点别的视频评论，就感觉“黑，真TM黑”<br>差不多是这样，反正多数是评论跟着视频走……  </p><p>所以啊，大多数学生会应当没有那么黑暗，我有一个鼓吹“学生会都TMD黑暗”的室友，积极地报名了“学生会社联部”（诚然，社联事实上不属于学生会，但也有上下级之分）  </p><h3 id="体育分和绩点"><a href="#体育分和绩点" class="headerlink" title="体育分和绩点"></a>体育分和绩点</h3><p>体育分就看你体育课、体测<br>绩点：保研要用到，关键数据。</p><h2 id="被期中考试吓趴下"><a href="#被期中考试吓趴下" class="headerlink" title="被期中考试吓趴下"></a>被期中考试吓趴下</h2><p><img src="https://i.loli.net/2021/11/14/sYRjEqrAC3BuD7y.jpg" alt="我经历过一模二模三模，也有过决战高考，如今却被一个期中考试吓趴下"><br>相信大多数uu都有这种体会，那就是面对大学期中考试的恐惧感<br>这是为什么呢？因为高中知识点简单，一般人都能理解，题目至少说也能骗一点过程分——蒙也能蒙个八九不离十<br>可是到了大学呢<br>由于知识困难<br><del>由于平日里摸鱼</del><br>因为涉及到学分<br>所以你就要多加准备<br>难道是，决定后的命运，比决定前更加珍贵了？<br>然而大学课本，你记住了，也不一定会用……<br><img src="https://i.loli.net/2021/11/14/elzaJY5Z9LHKruO.jpg" alt="e96d495413262c970b4a870099583d67.jpeg"></p><h2 id="卷！使劲儿卷！狠狠地卷！"><a href="#卷！使劲儿卷！狠狠地卷！" class="headerlink" title="卷！使劲儿卷！狠狠地卷！"></a>卷！使劲儿卷！狠狠地卷！</h2><blockquote><p>我就像卷心菜上的虫，同学们都在卷，而我却在爬</p></blockquote><p>你可能会遇到背着书包去打一天球的室友<br>你可能会遇到“我不行我不行”结果考得比你好的同学——上一个跟我这么说的已经去北大了，你以为我还会信你的鬼话？<br>诚然，我觉得<code>我们都在学习</code>是一种好风气，学风好了自然好<br>可是我们希望学习的目的不是打倒别人——诚然，学习好了确实能打倒别人<br>我们希望“先富带动后富”，学习好的人多帮一帮后进之人  </p><h2 id="想当研究生？"><a href="#想当研究生？" class="headerlink" title="想当研究生？"></a>想当研究生？</h2><p>想必各位uu进大学时都心怀梦想，毕竟……<br>上半年我做过必刷卷、金考卷、衡中卷、各地模拟题、经历过……<br>好了好了不要讲了，大家的想法都差不多，谁不想当将军？又有几人能当上将军？<br>将军很难当，但总有人当上，这个人很有可能就是“我”，这是我们前进的勇气。<br>想要当上将军，要学会的可能不只是如何学习，还要明白如何玩。<br>你不可能一点都不玩，你肯定要休息，“挥之不去”。<br>怎么学会玩？我还不太会，不如咱们现在就移步知乎？</p><h2 id="食堂和外卖"><a href="#食堂和外卖" class="headerlink" title="食堂和外卖"></a>食堂和外卖</h2><p>我们学校的食堂还好<br>竞争上摊位，没人有手抖<br>15块以内一定能吃饱，吃的也不差<br>只是没有馒头画卷肉夹馍<br>也找不到泡馍烩面肉呱嗒<br>因为疫情防控，校外外卖进不了学校，只能放在门口，或者卡bug穿铁门塞进来<br>不过嘞<br>有校内外卖<br>可以在x了么和美x上点食堂的饭，然后送到寝室楼门口，自己下去拿<br>经常是上第二节大课第二小节前把饭点好，这样回寝就能干饭  </p><p>我一直吃不惯南方大米<br>我还是喜欢吃北方大米<br>饱满不粘，历历可数，吸汤吸水<br>我也不知道为什么南方这边的大米饭让我不愿吃<br>也不知道是什么原因导致了这种差别<br>曾经喜爱的大米也成了一种乡思，一种别愁<br>不说了<br>食堂里有卖饺子的<br>赶紧去干几碗饺子！<br><code>2021年12月3日补充</code>：教职工食堂里还有卖馒头的！！！我觉得米饭不好吃是因为我吃的是学校食堂的米饭……外边的米饭好吃多了！！！</p><h2 id="英语破事多"><a href="#英语破事多" class="headerlink" title="英语破事多"></a>英语破事多</h2><p>什么U校园（Unipus）、iTest爱考试、期中前必须做完6套四级真题（这倒没啥）、上课回答问题累计4次、英语角参加次数、课堂测试、FiF口语训练……<br>破事儿很多，很杂，你还要抽时间去解决那些事情，一时没空解决的还要想着……<br>一年有三次四级考试，分别是12月、6月、9月</p><h2 id="对，大学一点都不闲"><a href="#对，大学一点都不闲" class="headerlink" title="对，大学一点都不闲"></a>对，大学一点都不闲</h2><p>大部分时间都是跟着课表，教师食堂宿舍三点共面，满校园“走南闯北”<br>我们每上半晌课就要横跨一个校园……<br>最后到学校最偏僻的角落，爬七层楼回寝<br>还有早自习和晚自习<br>有时候还会有四级模拟、高数期中模拟……<br>各种宣传教育班会，不是在说它不合理不合适，只是它确实会占用时间<br>有时候还有班级团建活动<br>苦在心中.jpg<br>一点都不闲，但一天到晚也不知道自己在忙些什么……  </p><h2 id="各种比赛和考证"><a href="#各种比赛和考证" class="headerlink" title="各种比赛和考证"></a>各种比赛和考证</h2><p>大学生创新创业大赛、电子设计大赛、计算机二级、英语四六级、教师资格证……乱七八糟各种比赛各种证书<br>考还是不考？什么时候有时间？有价值吗？以后用得上吗（对曰：<code>以后**可能**用得上</code>）？<br>回答这些问题需要的不是这些比赛怎么样，而是我们关于人生的智慧是什么样  </p><p><code>2021年12月3日补充</code>：<br>所以力所能及的证书一定要</p><blockquote><p>拿下！<br><del>——神里绫华（误）</del></p></blockquote><h1 id="玩！绝对不能耽误玩！"><a href="#玩！绝对不能耽误玩！" class="headerlink" title="玩！绝对不能耽误玩！"></a>玩！绝对不能耽误玩！</h1><p>原神！玩起来！<br>Phigros、Osu!、Muse Dash……音游玩起来！！！<br>最近又一次收了Leave All Behind</p><p><code>2021年12月3日追加</code>：为了和室友玩而入坑王者，被其他大佬虐到想要退坑，虽然但是，有一个强大的室友能带飞全队，还是留了下来。</p><h1 id="醒醒吧，心好了，啥都不叫事"><a href="#醒醒吧，心好了，啥都不叫事" class="headerlink" title="醒醒吧，心好了，啥都不叫事"></a>醒醒吧，心好了，啥都不叫事</h1><blockquote><p>反求诸己。——《孟子·公孙丑上》</p></blockquote><p>以及……<br>不要熬夜！<br>不要熬夜！！<br>不要熬夜！！！<br>不要因为室友而被动熬夜！！！！！</p><h1 id="大学暑假该干点什么"><a href="#大学暑假该干点什么" class="headerlink" title="大学暑假该干点什么"></a>大学暑假该干点什么</h1><h2 id="一些简单的tips"><a href="#一些简单的tips" class="headerlink" title="一些简单的tips"></a>一些简单的tips</h2><h3 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h3><p>如果你的专业和硬件关系比较近，那么你应该学习C语言<br>不然可以考虑先学一下python，毕竟好上手、好理解，当然当你转入其他语言的时候会显现少量的局限性（比如转C或许不理解什么是指针和链表）<br>想玩MC可以学一学Java（手动滑稽  </p><h1 id="遥远的高中港湾"><a href="#遥远的高中港湾" class="headerlink" title="遥远的高中港湾"></a>遥远的高中港湾</h1><p>我想我的高中了<br>尽管高中的我认为高中的生活实在是非常地黑暗……  </p>]]></content>
    
    
    
    <tags>
      
      <tag>杂谈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python学习笔记</title>
    <link href="/2021/08/16/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/08/16/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>大佬曰：把知识用自己的语言讲出来，你才算是学会了这个知识。我就用这种方式写一下自己的python学习笔记吧，编写博客边复习自己模糊的知识点。</p><span id="more"></span><h2 id="foo和bar"><a href="#foo和bar" class="headerlink" title="foo和bar"></a>foo和bar</h2><p>foo和bar就是外国人口中的张三李四……</p><h2 id="形参和实参"><a href="#形参和实参" class="headerlink" title="形参和实参"></a>形参和实参</h2><p>形参：具体的值<br>实参：定义函数时在括号里申明的变量<br>看到后觉得有个印象，但就是想不起来是什么（18年以前肯定是知道的）  </p><h2 id="global关键字"><a href="#global关键字" class="headerlink" title="global关键字"></a>global关键字</h2><p>声明在函数内：使用全局变量<br>声明在函数外：非内联的变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">jinkela = <span class="hljs-number">1800</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>():<br><span class="hljs-keyword">global</span> jinkela<br>jinkela *= <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><p>很好理解，就是 把 作为参数传递 并被调用 的函数 叫做回调函数  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">a</span>(<span class="hljs-params">f</span>):<br>f(<span class="hljs-string">&quot;Hello World&quot;</span>)<br>a(<span class="hljs-built_in">print</span>)<br></code></pre></td></tr></table></figure><p>输出结果为<code>Hello World</code>  </p><h2 id="闭包函数"><a href="#闭包函数" class="headerlink" title="闭包函数"></a>闭包函数</h2><p>被某个函数返回的内函数叫闭包函数，且这个函数使用了外函数的局部变量  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">mei</span>():<br>jinkela = <span class="hljs-string">&#x27;一代能顶两袋撒&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ri</span>():<br><span class="hljs-keyword">nonlocal</span> jinkela<br>jinkela += <span class="hljs-string">&#x27;亩产一千八&#x27;</span><br><span class="hljs-built_in">print</span>(jinkela)<br><span class="hljs-keyword">return</span> ri<br><span class="hljs-comment"># 如果要使用mei的返回结果：</span><br>res = mei() <span class="hljs-comment"># 坏了，res成了函数（的引用）了</span><br>res()<span class="hljs-comment"># 在申了在申了思密达</span><br>res()<br>res()<br>res()<br><span class="hljs-comment"># 但是如果你这样用好多次</span><br>mei()()<br><span class="hljs-comment"># 结果是不同的，读者可自行尝试</span><br><span class="hljs-comment">#############################</span><br><span class="hljs-comment"># 检测某函数是否为内函数</span><br><span class="hljs-built_in">print</span>(res.__closure__)<span class="hljs-comment"># cell</span><br><span class="hljs-built_in">print</span>(mei.__closure__)<span class="hljs-comment"># None</span><br></code></pre></td></tr></table></figure><h2 id="lambda-expression：匿名函数"><a href="#lambda-expression：匿名函数" class="headerlink" title="lambda expression：匿名函数"></a>lambda expression：匿名函数</h2><ul><li>不是代码块，是一行代码</li><li>只能使用形参，全局变量也不能用<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">f1 = <span class="hljs-keyword">lambda</span> x:x**<span class="hljs-number">233</span><br>f2 = <span class="hljs-keyword">lambda</span> x:<span class="hljs-number">666</span> <span class="hljs-keyword">if</span> x==<span class="hljs-string">&#x27;6&#x27;</span> <span class="hljs-keyword">else</span> <span class="hljs-number">114514</span><br></code></pre></td></tr></table></figure>用于避免简单功能用多行代码实现</li></ul><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><h3 id="迭代器的使用"><a href="#迭代器的使用" class="headerlink" title="迭代器的使用"></a>迭代器的使用</h3><p>C++里的迭代器是用来访问元素内部变量……之类的事情<br>python也是如此<br>那么python的迭代器怎么用呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">it = <span class="hljs-built_in">iter</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(it))<span class="hljs-comment"># 1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(it))<span class="hljs-comment"># 2</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(it))<span class="hljs-comment"># 3</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(it))<span class="hljs-comment"># 4</span><br></code></pre></td></tr></table></figure><h3 id="创建一个迭代器"><a href="#创建一个迭代器" class="headerlink" title="创建一个迭代器"></a>创建一个迭代器</h3><p>如何在自己写的class里使用呢？<br>用<code>__iter__()</code>、<code>__next__()</code>，其中<code>__iter__</code>应返回self  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">myClass</span>:<br>val = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>__iter__(self):<br>self.counter = <span class="hljs-number">0</span><br><span class="hljs-keyword">return</span> self<br>__next__(self):<br>self.counter += <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> self.counter &gt;= <span class="hljs-number">5</span><br><span class="hljs-keyword">raise</span> StopIteration  <span class="hljs-comment"># 停止继续迭代</span><br><span class="hljs-keyword">return</span> val[self.counter]<br></code></pre></td></tr></table></figure><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><p>当然你也可以使用生成器，让函数“变成”一个迭代器  </p><blockquote><p>在调用生成器运行的过程中，每次遇到 yield 时函数会暂停并保存当前所有的运行信息，返回 yield 的值, 并在下一次执行 next() 方法时从当前位置继续运行。<br>调用一个生成器函数，返回的是一个迭代器对象。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 该例子来自https://www.runoob.com/python3/python3-iterator-generator.html</span><br><span class="hljs-keyword">import</span> sys<br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fibonacci</span>(<span class="hljs-params">n</span>): <span class="hljs-comment"># 生成器函数 - 斐波那契</span><br>    a, b, counter = <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">if</span> (counter &gt; n): <br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">yield</span> a<br>        a, b = b, a + b<br>        counter += <span class="hljs-number">1</span><br>f = fibonacci(<span class="hljs-number">10</span>) <span class="hljs-comment"># f 是一个迭代器，由生成器返回生成</span><br> <br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-built_in">print</span> (<span class="hljs-built_in">next</span>(f), end=<span class="hljs-string">&quot; &quot;</span>)<br>    <span class="hljs-keyword">except</span> StopIteration:<br>        sys.exit()<br></code></pre></td></tr></table></figure><p>输出结果：</p><blockquote><p>0 1 1 2 3 5 8 13 21 34 55</p></blockquote><p>读者可以尝试稍作修改，理解一下没有yield时的输出结果。</p><h2 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h2><p>就是python解释器自带的函数  </p>]]></content>
    
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>控制台俄罗斯方块</title>
    <link href="/2021/08/15/%E6%8E%A7%E5%88%B6%E5%8F%B0%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97/"/>
    <url>/2021/08/15/%E6%8E%A7%E5%88%B6%E5%8F%B0%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97/</url>
    
    <content type="html"><![CDATA[<p>这是一个控制台项目，一切设计都要从字符角度考虑。<br>这次项目我终于敢放下顾虑，大胆解决问题了，其价值足以我写一篇博客来记录<br>俄罗斯方块不是什么很难的东西，也没人教过我怎么去构建这个项目。说明这个项目是真的简单。  </p><span id="more"></span><p>这个项目构思不是一瞬间完成的，是先有总的思路，然后考虑某个部分的内容，再接着去做其细节、写成代码，常常因为出现前面考虑不到而去修改前面的东西的情况。看来这种修改是稀松的，不用担心去修改前面的代码，<br>这种修改是一种进步，不用担心不用怕。<br>那咱就挑点重点写写吧<br><img src="https://img0.baidu.com/it/u=1233268571,2245711054&fm=26&fmt=auto&gp=0.jpg" alt="Console Tetris.png"></p><h2 id="阅前提示"><a href="#阅前提示" class="headerlink" title="阅前提示"></a>阅前提示</h2><p>建议先编译看看效果然后再来读博客。<a href="https://github.com/jensentsts/-/blob/main/Console%20Tetris.cpp">代码链接</a><br>（还有很多需要优化的地方……）  </p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="总框架"><a href="#总框架" class="headerlink" title="总框架"></a>总框架</h3><blockquote><p><code>void gameStart()</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Fake++">初始化<br>无脑死循环：<br>    处理键盘事件<br>更新游戏内的各种数据<br>unblockedSleep()<br>写入渲染器的缓冲区<br>渲染器渲染<br></code></pre></td></tr></table></figure><p>然后想到这个死循环有停下俩的时候，那就是：游戏失败或者是玩家退出，所以又加上了<code>gameOver</code>和<code>gameExit</code>这俩控制变量，然后在循环之后加上了例如分数记录之类的东西</p><h3 id="贴图实现"><a href="#贴图实现" class="headerlink" title="贴图实现"></a>贴图实现</h3><p>实际上我以前都觉得贴图应该存在一个二维数组里面，但这次我却明白贴图还有多种存储方式。比如我能把一个”山“样的下落物存储在一个一维数组里，把它的贴图当作一个矩形，记录他的宽度，然后一排一排地解析。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Fake++">降维打击前：<br> # <br>###<br>降维打击之后：<br># ### width:3 height:2<br></code></pre></td></tr></table></figure><p>大概是我第一次在显示这个问题上”活脑筋“，其价值足以我写一篇博客来记录  </p><h3 id="双缓冲渲染"><a href="#双缓冲渲染" class="headerlink" title="双缓冲渲染"></a>双缓冲渲染</h3><p>我把双缓冲渲染改成了三个部分：绘制（输出画面）、写入Buffer、Buffer更新<br>以前我会顾虑：到底在哪里使用双缓冲？<br>我突然就敢放下这个顾虑：”只在游戏部分使用不就行了，其他地方根本就不需要双缓冲。“  </p><h4 id="绘制（输出画面）"><a href="#绘制（输出画面）" class="headerlink" title="绘制（输出画面）"></a>绘制（输出画面）</h4><blockquote><p><code>void render()</code></p></blockquote><p>比较用于绘制的Buffer（<code>renderBuffer[DRAWING]</code>）和显示在屏幕上的信息（<code>renderBuffer[SHOWING]</code>），然后到相应的位置去输出不同的部分。用<code>gotoxy()</code>可以解决调用<code>system(&#39;cls&#39;)</code>带来的闪屏问题。</p><h4 id="写入Buffer"><a href="#写入Buffer" class="headerlink" title="写入Buffer"></a>写入Buffer</h4><blockquote><p><code>void renderDraw()</code></p></blockquote><p>这次把所有的绘制都封装到了一个函数<code>renderDraw()</code>里，以前的时候我总是会顾虑”逻辑运算完成了，在哪里绘制啊？？？？？？“。现在我通过gameStart()函数里的总流程，实现了贴图绘制的一个封装，就不用担心”这里是一个绘制，那里是一个绘制“导致混乱的问题、避免在这个问题上继续纠结了。<br><code>renderDraw()</code>会在(dropX,dropY)解析下落物的贴图，并写入<code>renderBuffer[DRAWING]</code>，然后把那些已经固定下来的方块一一对应绘制进buffer</p><h4 id="Buffer更新"><a href="#Buffer更新" class="headerlink" title="Buffer更新"></a>Buffer更新</h4><blockquote><p><code>void renderFresh()</code></p></blockquote><p>比较两个buffer[]，然后把旧的推进新的里去。</p><h3 id="选择选项"><a href="#选择选项" class="headerlink" title="选择选项"></a>选择选项</h3><blockquote><p><code>int makeChoice(char**, int[, char*])</code>函数  </p></blockquote><p>如果直接把做选择这个事情封闭起来，那么其它部分代码就不好实现，所以需要让makeChoice()有一个返回值，便于信息传递，而不是简简单单的去显示个动画。<br>首先，肯定要有个变量<code>choice</code>来记录选择……<br>做选择时会有多个选项，每个选项前都要有其被选中的标志，按下回车键确定，因此采用了分行输出每个选项，每个选项前留出空白，在空白区域用<code>-&gt;</code>表示这是当前选中的选项，以<code>-&gt;</code>的左右移动为其动画效果美化纯文字的界面。<br>所以首先要显示每个选项并留出空白  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; _amo; ++i)<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;   %s\n&quot;</span>, _choice[i]);<br></code></pre></td></tr></table></figure><p>然后就是考虑动效了。既然<code>-&gt;</code>要上下移动和左右移动——尽管不会同时进行——那么我们就得去确定它的移动坐标变化范围。显然该用WindowsAPI获取选项输出后的光标位置。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">HANDLE h = <span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE);<br>CONSOLE_SCREEN_BUFFER_INFO pos;<br><span class="hljs-built_in">GetConsoleScreenBufferInfo</span>(h, &amp;pos);<br></code></pre></td></tr></table></figure><p>简单把<code>-&gt;</code>输出到相应位置十分简单，这里就不讲了。我们直接考虑动效的几个步骤：</p><ol><li>清空旧的绘制图案  </li><li>绘制图案</li></ol><p>清空旧的绘制图案，有如下情况  </p><ul><li>用户改变了选中，旧的<code>-&gt;</code>要清除  </li><li><code>-&gt;</code>移动了，原来位置上的不能再显示了</li></ul><p>考虑到控制台覆盖先前字符的特性，<code>-&gt;</code>自动移动可以由新的图案直接输出覆盖，而用户改变选中，则需要我们把光标放到相应位置并输出足够的空格。当前动画播放到哪一帧，也需要去记录，就用<code>ani</code>吧。<br>而且，不管用户是否按键，我们都要去更新<code>-&gt;</code>的动画。所以我们不能阻塞进程并获取按键信息，<code>conio.h</code>的<code>kbhit()</code>以及我写的伪非阻塞Sleep<code>unblockedSleep()</code>就派上用场了。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Fake++">if kbhit() == 1:<br>    光标移动<br>覆盖旧-&gt;（无论按什么键什么都去覆盖一下，是为了代neng码tou简ge便lan<br>判断按键<br>按w：改变choice<br>按s：改变choice<br>按Enter：return choice<br>光标移动<br>在旧-&gt;上直接覆盖当前的帧的图案<br>unblockedSleep();// 这样能保证延时时间或对用户按键”随叫随到“的相应<br>ani++<br></code></pre></td></tr></table></figure><p>后来在Esc暂停菜单里我用<code>makeChoice()</code>来实现菜单选项，就又在里面加了个选择后”隐藏“菜单的功能，于是又在按下Enter键后的代码里加上了，让<code>makeChoice</code>自己清除自己的的代码<br>一开始考虑的设计是如<code> &gt;Start!</code>的样式，但是测试之后发现不如<code> -&gt;Start!</code>好康，于是就改成了这个  </p>]]></content>
    
    
    
    <tags>
      
      <tag>cpp</tag>
      
      <tag>开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小壶本纪</title>
    <link href="/2021/07/20/%E5%B0%8F%E5%A3%B6%E6%9C%AC%E7%BA%AA/"/>
    <url>/2021/07/20/%E5%B0%8F%E5%A3%B6%E6%9C%AC%E7%BA%AA/</url>
    
    <content type="html"><![CDATA[<p>小壶里都发生了什么事？</p><span id="more"></span><p>↓看到这张图片的人都能抽到神里↓<br><img src="https://upload-bbs.mihoyo.com/upload/2021/07/20/245327134/32e8d379ecdc173773694240dc5b3ebb_3943520889641554237.jpg?x-oss-process=image//resize,s_500/quality,q_80/auto-orient,0/interlace,1/format,jpg" alt="凌华~~~"></p><h1 id="诞生"><a href="#诞生" class="headerlink" title="诞生"></a>诞生</h1><p>2021年7月19日日暮，zf4h突然会想起自己最早接触的和计算机相关的“语言”是html和css<br>并且自己一直都有一个建站梦，而且2019年还在github上做过博客<br>尽管那个博客因zf4h的学业，不幸夭折，但那份记忆仍然在心底闪耀着独属于自己的光芒<br>恰逢高考之后的风平浪静<br>我的博客，<code>海舟的小舱</code>，诞生了。  </p><h1 id="主题更换"><a href="#主题更换" class="headerlink" title="主题更换"></a>主题更换</h1><ul><li>原来使用的是 <a href="https://github.com/HeskeyBaozi/hexo-theme-lite">Lite</a> ，因为它不支持LaTeX公式，所以，2021年8月16日午换成了 <a href="https://github.com/bollnh/hexo-theme-material">Material</a> 。</li><li>2022.9.16，换成现在的 <a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid</a> 啦！</li></ul><h1 id="终于弄好了评论功能！！！"><a href="#终于弄好了评论功能！！！" class="headerlink" title="终于弄好了评论功能！！！"></a>终于弄好了评论功能！！！</h1><p>2022.9.18，zf4h放弃了总是配置不好的<code>gitalk</code>，改用了<code>valine</code>，终于！<br><img src="https://s2.loli.net/2022/09/18/bBEefIt72yguUkA.png" alt="周瑜（划掉）终于！"><br>我博由我不由天！</p><h1 id="友链开放！"><a href="#友链开放！" class="headerlink" title="友链开放！"></a>友链开放！</h1><ul><li>小壶里的第一个友链：<a href="https://joedong001.github.io/">JoeDong001的博客</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>长期更新</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo杂谈</title>
    <link href="/2021/07/20/hexo%E5%8D%9A%E5%AE%A2%E6%9D%82%E8%B0%88/"/>
    <url>/2021/07/20/hexo%E5%8D%9A%E5%AE%A2%E6%9D%82%E8%B0%88/</url>
    
    <content type="html"><![CDATA[<p>写一些写博客时踩过的坑，还有用hexo写博客时常用的东西  </p><span id="more"></span><p>神里镇文<br><img src="https://upload-bbs.mihoyo.com/upload/2021/07/20/184593067/2a03b66fdf1551d53ddbdf8e2fbbba90_3182517286345932096.jpg?x-oss-process=image//resize,s_500/quality,q_80/auto-orient,0/interlace,1/format,jpg"></p><h1 id="一些报错"><a href="#一些报错" class="headerlink" title="一些报错"></a>一些报错</h1><h2 id="Deployer-not-found-git"><a href="#Deployer-not-found-git" class="headerlink" title="Deployer not found: git"></a>Deployer not found: git</h2><p>已经在站点配置文件中写入了</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repository:</span> <span class="hljs-string">git@github.com:jensentsts/jensentsts.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure><p>但是执行<code>hexo d</code>报错<code>ERROR Deployer not found: git</code></p><p><strong>解决方案</strong><br>安装<code>hexo-deployer-git</code>插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>然后就可以愉快地<code>hexo d</code>啦~</p><h1 id="github的坑"><a href="#github的坑" class="headerlink" title="github的坑"></a>github的坑</h1><h2 id="必看！github的url区分大小写的坑"><a href="#必看！github的url区分大小写的坑" class="headerlink" title="必看！github的url区分大小写的坑"></a>必看！github的url区分大小写的坑</h2><p>比如我博客的url就是 <code>https://jensentsts.github.io/</code> 在<code>/</code>后填写的便是目录<br>理论上来讲，<code>/</code>后边的东西不区分大小写<br>但！是！<br>github是区分大小写的！例如<code>link</code>和<code>Link</code>就不是同一个东西<br>因此如果你用主题文件夹里的<code>_config.yml</code>把你的友链页面设为<code>links/index.md</code>，而你在<code>sources/</code>下的对应文件夹名称为<code>Links</code><br>你在<code>loaclhost:4000</code>里能够正常访问友链页面<br>然而当你在github上点击<code>友链</code>，使用<code>https://jensentsts.github.io/links/index.html</code> 去访问你的友链时，github不能给你返回对应的页面，会报404<br>如果你去你的github库里检查，会发现<code>links</code>正在好好地躺在你的库里<br><strong>解决方案</strong>：大小写完全一致，即在主题的<code>_config.yml</code>里的和在<code>sources/</code>下的名称完全一致</p><h2 id="现在的github使用main分支"><a href="#现在的github使用main分支" class="headerlink" title="现在的github使用main分支"></a>现在的github使用main分支</h2><p>写这一条的时间是2021年12月10日，注意信息的时效性<br>以前都是用<code>master</code>作为主分支的，现在默认生成的是<code>main</code>，注意修改你的<code>_config.yml</code></p><h1 id="这里是杂谈"><a href="#这里是杂谈" class="headerlink" title="这里是杂谈"></a>这里是杂谈</h1><h2 id="为文章添加多个标签"><a href="#为文章添加多个标签" class="headerlink" title="为文章添加多个标签"></a>为文章添加多个标签</h2><p>在你的markdown文件头部，也就是俩<code>---</code>之间的部分，添加如下代码：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">tags: [标签1, 标签2, 标签3]<br></code></pre></td></tr></table></figure><p>当然，这样也是可以的：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">tags:<br>-<span class="hljs-emphasis">_标签1_</span><br>-<span class="hljs-emphasis">_标签2_</span><br></code></pre></td></tr></table></figure><p>上面写的<code>_</code>是空格的意思，<code>-</code>和标签后面都必须有一个空格。</p><h2 id="截取文章摘要"><a href="#截取文章摘要" class="headerlink" title="截取文章摘要"></a>截取文章摘要</h2><p>手动在文章合适的位置添加<code>&lt;!--more--&gt;</code>。不同的主题写</p><h2 id="给文章置顶"><a href="#给文章置顶" class="headerlink" title="给文章置顶"></a>给文章置顶</h2><p>简单粗暴的方法：把date改成99999-12-31 23:59:59<br>然后就是使用现成的库  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm uninstall hexo-generator-index --save<br>$ npm install hexo-generator-index-pin-top --save<br></code></pre></td></tr></table></figure><p>然后在你的文章前面的<code>---</code>之间加上<code>top: true</code>即可，比如说：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: 友情链接<br><span class="hljs-section">top: true</span><br><span class="hljs-section">---</span><br></code></pre></td></tr></table></figure><p>如果想直接修改主题的文件，你也可以参考<a href="https://www.jianshu.com/p/42a4efcdf8d7">这篇文章</a></p><h2 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h2><p>我不用草稿……</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new draft 文章名称<br>hexo n draft 文章名称<br></code></pre></td></tr></table></figure><h2 id="记录你的更新时间"><a href="#记录你的更新时间" class="headerlink" title="记录你的更新时间"></a>记录你的更新时间</h2><p>依旧是在.md文件顶头的<code>---</code>之间写<code>updated: 年年年年-月月-日日 时时:分分:秒秒</code></p><h2 id="使用LaTeX"><a href="#使用LaTeX" class="headerlink" title="使用LaTeX"></a>使用LaTeX</h2><p><strong>首先要保证你的主题是支持LaTeX的！！！</strong>你得阅读主题的文档。如果支持，就去找用<code>kramed</code>或者是<code>pandoc</code>的使用<code>mathjax</code>的教程吧<br>我当时配置了两个小时都没成功，最后发现是Lite主题不支持LaTeX……<br>如果你的主题不支持LaTeX，但你又不想换，可以用知乎的开放API……也就是<code>https://www.zhihu.com/equation?tex=[你的LaTeX公式]</code>，效果：<img src="https://www.zhihu.com/equation?tex=%5Cfrac%7B1%7D%7B2%7D" alt="图片挂了QAQ……"><br>当然写进url的公式里的任何<code>\</code>都要转义成%5C<br>因为能支持，所以我才换了<a href="https://github.com/viosey/hexo-theme-material">material</a> 这个主题……。现在让我们来欣赏一下欧拉恒等式吧：<br>$$ e^{i\pi}+1&#x3D;0 $$<br><strong>如果没有写·per_page: true·，记得在.md文件顶部写<code>mathjax: true</code></strong><br>补充：有的主题会为mathjax等插件专门写了设置，请查看自己的主题的_config.yml以正常使用mathjax。</p><h2 id="插件推荐"><a href="#插件推荐" class="headerlink" title="插件推荐"></a>插件推荐</h2><p>有的主题可能不支持一些插件<br>列出来的yaml代码， 请在根目录下的_config.yml文件里新增该配置<br>专门针对SEO的优化请看<a href="https://www.zdynb.cn/2019/hexo-bi-bei-cha-jian.html#toc-heading-15">这篇文章</a>  </p><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><blockquote><p>npm i hexo-prism-plugin -s</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">prism_plugin:</span><br>  <span class="hljs-attr">mode:</span> <span class="hljs-string">&#x27;preprocess&#x27;</span>    <span class="hljs-comment"># realtime/preprocess</span><br>  <span class="hljs-attr">theme:</span> <span class="hljs-string">&#x27;tomorrow&#x27;</span>     <span class="hljs-comment"># 主题选项</span><br>  <span class="hljs-attr">line_number:</span> <span class="hljs-literal">false</span>    <span class="hljs-comment"># false</span><br>  <span class="hljs-attr">custom_css:</span><br></code></pre></td></tr></table></figure><p>可选主题：</p><blockquote><p>coy,dark,funky,okaidia,solarizedlight,tomorrow,twilight,a11y-dark,atom-dark,<br>base16-ateliersulphurpool.light,cb,darcula,dracula,duotone-dark,duotone-earth,<br>duotone-forest,duotone-light,duotone-sea,duotone-space,ghcolors,hopscotch,<br>material-dark,material-light,material-oceanic,pojoaque,shades-of-purple,<br>synthwave84,vs,xonokai,default,</p></blockquote><h3 id="中文链接转拼音"><a href="#中文链接转拼音" class="headerlink" title="中文链接转拼音"></a>中文链接转拼音</h3><blockquote><p>npm i hexo-permalink-pinyin –save</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">permalink_pinyin:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">separator:</span> <span class="hljs-string">&#x27;-&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="评论emoji表情支持"><a href="#评论emoji表情支持" class="headerlink" title="评论emoji表情支持"></a>评论emoji表情支持</h3><blockquote><p>npm i hexo-filter-github-emojis –save</p></blockquote><p>将markdown中的emoji语法转换为emoji表情  </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">githubEmojis:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">className:</span> <span class="hljs-string">github-emoji</span><br>  <span class="hljs-attr">inject:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">styles:</span><br>  <span class="hljs-attr">customEmojis:</span><br></code></pre></td></tr></table></figure><h3 id="压缩html、css、js、图片"><a href="#压缩html、css、js、图片" class="headerlink" title="压缩html、css、js、图片"></a>压缩html、css、js、图片</h3><blockquote><p>npm i hexo-all-minifier –save</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">all_minifier:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-attr">html_minifier:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">ignore_error:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">exclude:</span><br>  <br><span class="hljs-attr">css_minifier:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">exclude:</span> <br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;*.min.css&#x27;</span><br><br><span class="hljs-attr">js_minifier:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">mangle:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">output:</span><br>  <span class="hljs-attr">compress:</span><br>  <span class="hljs-attr">exclude:</span> <br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;*.min.js&#x27;</span><br><br><span class="hljs-attr">image_minifier:</span> <br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">interlaced:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">multipass:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">optimizationLevel:</span> <span class="hljs-number">2</span><br>  <span class="hljs-attr">pngquant:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">progressive:</span> <span class="hljs-literal">false</span><br><br></code></pre></td></tr></table></figure><h3 id="速度优化"><a href="#速度优化" class="headerlink" title="速度优化"></a>速度优化</h3><p>见博客：<a href="https://blog.csdn.net/fengdi_yuxi/article/details/94402350">Hexo博客之速度优化</a></p><h3 id="一些美化hexo博客的方法"><a href="#一些美化hexo博客的方法" class="headerlink" title="一些美化hexo博客的方法"></a>一些美化hexo博客的方法</h3><ul><li>添加看板娘：<a href="https://jensentsts.github.io/2021/12/10/hexo-kan-ban-niang/">给你的hexo博客添加可可爱爱的看板娘</a></li><li>添加雪花特效：<a href="https://jensentsts.github.io/2021/12/23/xue-hua-te-xiao/">冬天到啦，给你的博客添加雪花特效！</a></li><li>点击后出现文字：<a href="https://www.baidu.com/">我还没写</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>长期更新</tag>
      
      <tag>hexo</tag>
      
      <tag>杂谈</tag>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何用hexo搭建博客</title>
    <link href="/2021/07/19/%E5%A6%82%E4%BD%95%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2021/07/19/%E5%A6%82%E4%BD%95%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>蒟蒻渣文笔<br>试着写一下我是如何在windows上用hexo搭建起自己的博客的。。。</p><span id="more"></span><p>建议搭配 <a href="https://jensentsts.github.io/2021/07/20/hexo%E5%8D%9A%E5%AE%A2%E6%9D%82%E8%B0%88/">hexo杂谈</a> 一起阅读。</p><h2 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h2><h3 id="搭建必需"><a href="#搭建必需" class="headerlink" title="搭建必需"></a>搭建必需</h3><blockquote><p>一个github账号<br><a href="https://gitforwindows.org/">git for windows</a> 直接进官网下最新版就行<br><a href="https://nodejs.org/zh-cn/">node.js</a> 同上  </p></blockquote><p>这两个软件都不算大，所以下载起来也不算慢。  </p><h3 id="github"><a href="#github" class="headerlink" title="github"></a>github</h3><h4 id="库"><a href="#库" class="headerlink" title="库"></a>库</h4><p>在github上新建一个名为<code>你的用户名.github.io</code>的库。比如我的用户名为<code>jensentsts</code>，那么我就新建了<code>jensentsts.github.io。</code><br>我们新建的库名必须是<code>你的用户名.github.io</code>，其它的均不会被github识别并建立github page</p><h4 id="SSH-keys"><a href="#SSH-keys" class="headerlink" title="SSH keys"></a>SSH keys</h4><p>SSH是一种网络协议，用于计算机之间的加密登录，比直接用用户名、密码登录要安全。<br>什么，你说手机验证码登录可能更安全？但我们这里是计算机通讯用的登录而不是普通的用户登录啊……<br>言归正传。<br>在此之前我没有配置SSH key，所以我用如下指令生成SSH key文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ssh-keygen -t rsa -C <span class="hljs-string">&quot;邮件地址&quot;</span><br></code></pre></td></tr></table></figure><p>我一开始把C给小写了，这就导致一开始没能成功生成SSH key文件……<br>然后再C盘打开<code>C:\用户\用户名\.ssh0</code>你会找到一个名为<code>id_rsa.pub0</code>的文件。用记事本（我用的是notepad++）打开它，然后复制里面的内容，在github的主页上，进入Settings里面的SSH and GPG keys，点New SSH key。随便取一个title，把那一堆内容复制进key里。<br>然后我们要测试一下SSH是否配置成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ssh -T git@github.com<br></code></pre></td></tr></table></figure><p>提示我们<code>Are you sure you want to continue connecting (yes/no)?</code>，输入yes，然后会看到</p><blockquote><p>Hi jensentsts! You’ve successfully authenticated, but GitHub does not provide shell access.  </p></blockquote><p>说明我们的SSH keys配置成功。然后：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git confg --global user.name <span class="hljs-string">&quot;你的github用户名&quot;</span><br>$ git confg --global user.email <span class="hljs-string">&quot;你的github注册邮箱&quot;</span><br></code></pre></td></tr></table></figure><h3 id="hexo-time"><a href="#hexo-time" class="headerlink" title="hexo time"></a>hexo time</h3><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>安好了git，再开始菜单里找到git bash并启动，然后就是一通npm……<br>npm是一个很常用的指令&amp;工具，随node.js的安装进入你的电脑.<br>下面我们要用npm把hexo安进git里  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install -g hexo<br></code></pre></td></tr></table></figure><p>在电脑里找一个存储你的博客相关内容的文件夹，比如<code>F:\blog</code>，首先cd到这个目录去</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> F:/blog<br></code></pre></td></tr></table></figure><p>然后初始化hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo init<br></code></pre></td></tr></table></figure><p>在此之后，如果你打开<code>F:\blog</code>你就会发现hexo已经为你创建了一堆博客文件。</p><h4 id="hexo创建了什么东西？"><a href="#hexo创建了什么东西？" class="headerlink" title="hexo创建了什么东西？"></a>hexo创建了什么东西？</h4><ul><li>public：存储渲染好的博客网页文件，比如html、css、js和包括图片在内的文件。</li><li>source：资源文件夹，存储了各页面下的markdwown文件。里面的_post就是博客文章0的文件夹.</li><li>scaffolds：模板文件夹，没啥用但是得留着。</li><li>themes：存储了主题，默认主题为landscape。</li><li>node_modules：存储了博客的各种插件，以后我们添加插件时可能会常常访问这个文件夹</li><li>_config.yml：存储博客相关的参数。</li><li>package.json：主要记录你的博客安装的各种东西的版本等信息，不用管</li></ul><p>没有什么特别需求的话，把你用markdown写好的文章丢进<code>./source/_post/</code>里面就好。<del>关于创建别的页面……请您去看别的博客把，我懒得写</del><br>我们可以用如下命令创建一个空白的markdown文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo n <span class="hljs-string">&quot;文章名称&quot;</span><br></code></pre></td></tr></table></figure><p>当然，<code>hexo n</code>是一个简化指令，完整指令是这个：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;文章名称&quot;</span><br></code></pre></td></tr></table></figure><p>完成后我们可以在<code>./source/_post/</code>下找到<code>文章名称.md</code>。聪明的你一定明白它是什么。</p><h4 id="配置-config-yml"><a href="#配置-config-yml" class="headerlink" title="配置_config.yml"></a>配置_config.yml</h4><p>首先用记事本或者是notepad++之类的纯文本编辑器打开<code>./_config.ynl</code></p><h5 id="修改网站名和博客主名"><a href="#修改网站名和博客主名" class="headerlink" title="修改网站名和博客主名"></a>修改网站名和博客主名</h5><p>在<code>./config.yml</code>里找到如下内容并修改</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">title:</span> 网站名<br><span class="hljs-meta"># 其它的一些东西</span><br><span class="hljs-symbol">author:</span> 博客主名<br></code></pre></td></tr></table></figure><h5 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h5><p>上指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> 主题github库的链接 themes/主题名称<br></code></pre></td></tr></table></figure><p>比如我用的就是hexo官网上的Lite主题，那么我的指令便是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> https://github.com/HeskeyBaozi/hexo-theme-lite/ themes/lite/<br></code></pre></td></tr></table></figure><p>然后修改<code>./_config.yml</code>中的<code>theme: landscape</code>改为<code>theme: 主题名称</code>，比如我的<code>theme: lite</code>。  </p><h5 id="修改语言"><a href="#修改语言" class="headerlink" title="修改语言"></a>修改语言</h5><p>有些博客分各种语言版本，所以你需要修改语言设置</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">language</span>: <span class="hljs-keyword">en</span> # <span class="hljs-keyword">en</span>是英语，或者改成是别的<br></code></pre></td></tr></table></figure><h4 id="最后一步"><a href="#最后一步" class="headerlink" title="最后一步"></a>最后一步</h4><p>别忘了，我们写的都是markdown文件，然而我们在浏览器中看到的都是解析好的html文件。<br>所以，我们还需要生成博客网页文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g<br></code></pre></td></tr></table></figure><p>这里的<code>g</code>是<code>generate</code>的简化。这时候我们会发现，在<code>./public/</code>下的<code>index.html</code>并不能打开，这是为什么呢？<br><del>我不知道</del>我们要启动hexo的服务，才能在浏览器上，通过访问<a href="http://localhost:4000/">http://localhost:4000/#/</a>，直接查看我们渲染好的博客。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo s<br></code></pre></td></tr></table></figure><p>同理，<code>s</code>是<code>server</code>的简化。</p><h3 id="上传！"><a href="#上传！" class="headerlink" title="上传！"></a>上传！</h3><h4 id="保留readme-md等文件"><a href="#保留readme-md等文件" class="headerlink" title="保留readme.md等文件"></a>保留readme.md等文件</h4><p>把你的readme.md放到<code>./source/</code>下？这样做确实可以。<br>但由于hexo每次生成时都会把所有.md文件转化为html，你还要手动删掉<code>./public/</code>下的readme.html，所以我的做法是直接把readme.md放到根目录下，每次提交时把readme.md丢进去。<br><del>当然，作为懒人，我现在不带readme.md，等哪天变勤快了，我再加上</del></p><h4 id="上传到github"><a href="#上传到github" class="headerlink" title="上传到github"></a>上传到github</h4><p>先安装一个插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>配置_config.yml中有关deploy的部分：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repository:</span> git@github.com:jensentsts/jensentsts.github.io.git<br><span class="hljs-symbol">  branch:</span> main<br></code></pre></td></tr></table></figure><p>有的教程因为使用了hexo2.x，所以写法和上面不同。请按照如上格式配置，记得把<code>jensentsts</code>替换成你的用户名。<br>分支应为main，GitHub在更新之后不再是master了<br>然后，发射！（<code>d</code>是<code>deploy</code>的简化）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo d<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><h3 id="文献"><a href="#文献" class="headerlink" title="文献"></a>文献</h3><p><a href="https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html">使用hexo+github搭建免费个人博客详细教程</a><br><a href="https://segmentfault.com/a/1190000018237272">简单认识Hexo的目录结构</a>  </p><h3 id="好用的markdown编辑器"><a href="#好用的markdown编辑器" class="headerlink" title="好用的markdown编辑器"></a>好用的markdown编辑器</h3><p><a href="https://www.luogu.com.cn/paste">洛谷云剪切板</a><br>没在洛谷博客上发主要是因为这样才能收获“自己动手，丰衣足食”的满足感</p>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>links</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>about</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>长沙理工大学，电气专业</p>          </div><div class="note note-info">            <p>原神+方舟玩家</p>          </div><div class="note note-info">            <p>喜欢编程、电气、音游</p>          </div><div class="note note-info">            <p>一个集幽默、快乐、正经于一身的神奇之人</p>          </div><div class="note note-warning">            <p>敬告：封面图片多数来源于原神摄影大赛，少数来源于网络。</p>          </div>]]></content>
    
  </entry>
  
  
  
</search>
